// @generated by protobuf-ts 2.8.1
// @generated from protobuf file "ads/errors/experiment_arm_error.proto" (package "google.ads.googleads.v11.errors", syntax proto3)
// tslint:disable
//
// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
// Proto file describing experiment arm errors.

/**
 * Container for enum describing possible experiment arm error.
 *
 * @generated from protobuf message google.ads.googleads.v11.errors.ExperimentArmErrorEnum
 */
export interface ExperimentArmErrorEnum {
}
/**
 * Enum describing possible experiment arm errors.
 *
 * @generated from protobuf enum google.ads.googleads.v11.errors.ExperimentArmErrorEnum.ExperimentArmError
 */
export enum ExperimentArmErrorEnum_ExperimentArmError {
    /**
     * Enum unspecified.
     *
     * @generated from protobuf enum value: UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * The received error code is not known in this version.
     *
     * @generated from protobuf enum value: UNKNOWN = 1;
     */
    UNKNOWN = 1,
    /**
     * Number of experiment arms is above limit.
     *
     * @generated from protobuf enum value: EXPERIMENT_ARM_COUNT_LIMIT_EXCEEDED = 2;
     */
    EXPERIMENT_ARM_COUNT_LIMIT_EXCEEDED = 2,
    /**
     * Cannot add campaign with invalid status to the experiment arm.
     *
     * @generated from protobuf enum value: INVALID_CAMPAIGN_STATUS = 3;
     */
    INVALID_CAMPAIGN_STATUS = 3,
    /**
     * Cannot add duplicate experiment arm name in one experiment.
     *
     * @generated from protobuf enum value: DUPLICATE_EXPERIMENT_ARM_NAME = 4;
     */
    DUPLICATE_EXPERIMENT_ARM_NAME = 4,
    /**
     * Cannot set campaigns of treatment experiment arm.
     *
     * @generated from protobuf enum value: CANNOT_SET_TREATMENT_ARM_CAMPAIGN = 5;
     */
    CANNOT_SET_TREATMENT_ARM_CAMPAIGN = 5,
    /**
     * Cannot edit campaign ids in trial arms in non SETUP experiment.
     *
     * @generated from protobuf enum value: CANNOT_MODIFY_CAMPAIGN_IDS = 6;
     */
    CANNOT_MODIFY_CAMPAIGN_IDS = 6,
    /**
     * Cannot modify the campaigns in the control arm
     * if there is not a suffix set in the trial.
     *
     * @generated from protobuf enum value: CANNOT_MODIFY_CAMPAIGN_WITHOUT_SUFFIX_SET = 7;
     */
    CANNOT_MODIFY_CAMPAIGN_WITHOUT_SUFFIX_SET = 7,
    /**
     * Traffic split related settings (like traffic share bounds) can't be
     * modified after the trial has started.
     *
     * @generated from protobuf enum value: CANNOT_MUTATE_TRAFFIC_SPLIT_AFTER_START = 8;
     */
    CANNOT_MUTATE_TRAFFIC_SPLIT_AFTER_START = 8,
    /**
     * Cannot use shared budget on experiment's control campaign.
     *
     * @generated from protobuf enum value: CANNOT_ADD_CAMPAIGN_WITH_SHARED_BUDGET = 9;
     */
    CANNOT_ADD_CAMPAIGN_WITH_SHARED_BUDGET = 9,
    /**
     * Cannot use custom budget on experiment's control campaigns.
     *
     * @generated from protobuf enum value: CANNOT_ADD_CAMPAIGN_WITH_CUSTOM_BUDGET = 10;
     */
    CANNOT_ADD_CAMPAIGN_WITH_CUSTOM_BUDGET = 10,
    /**
     * Cannot have enable_dynamic_assets turned on in experiment's campaigns.
     *
     * @generated from protobuf enum value: CANNOT_ADD_CAMPAIGNS_WITH_DYNAMIC_ASSETS_ENABLED = 11;
     */
    CANNOT_ADD_CAMPAIGNS_WITH_DYNAMIC_ASSETS_ENABLED = 11,
    /**
     * Cannot use campaign's advertising channel sub type in experiment.
     *
     * @generated from protobuf enum value: UNSUPPORTED_CAMPAIGN_ADVERTISING_CHANNEL_SUB_TYPE = 12;
     */
    UNSUPPORTED_CAMPAIGN_ADVERTISING_CHANNEL_SUB_TYPE = 12,
    /**
     * Experiment date range must be within base campaign's date range.
     *
     * @generated from protobuf enum value: CANNOT_ADD_BASE_CAMPAIGN_WITH_DATE_RANGE = 13;
     */
    CANNOT_ADD_BASE_CAMPAIGN_WITH_DATE_RANGE = 13,
    /**
     * Bidding strategy is not supported in experiments.
     *
     * @generated from protobuf enum value: BIDDING_STRATEGY_NOT_SUPPORTED_IN_EXPERIMENTS = 14;
     */
    BIDDING_STRATEGY_NOT_SUPPORTED_IN_EXPERIMENTS = 14,
    /**
     * Traffic split is not supported for some channel types.
     *
     * @generated from protobuf enum value: TRAFFIC_SPLIT_NOT_SUPPORTED_FOR_CHANNEL_TYPE = 15;
     */
    TRAFFIC_SPLIT_NOT_SUPPORTED_FOR_CHANNEL_TYPE = 15
}
// @generated message type with reflection information, may provide speed optimized methods
class ExperimentArmErrorEnum$Type extends MessageType<ExperimentArmErrorEnum> {
    constructor() {
        super("google.ads.googleads.v11.errors.ExperimentArmErrorEnum", []);
    }
    create(value?: PartialMessage<ExperimentArmErrorEnum>): ExperimentArmErrorEnum {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ExperimentArmErrorEnum>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExperimentArmErrorEnum): ExperimentArmErrorEnum {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ExperimentArmErrorEnum, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.errors.ExperimentArmErrorEnum
 */
export const ExperimentArmErrorEnum = new ExperimentArmErrorEnum$Type();
