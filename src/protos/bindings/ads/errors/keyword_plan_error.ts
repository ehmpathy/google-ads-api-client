// @generated by protobuf-ts 2.8.1
// @generated from protobuf file "ads/errors/keyword_plan_error.proto" (package "google.ads.googleads.v11.errors", syntax proto3)
// tslint:disable
//
// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
// Proto file describing errors from applying keyword plan resources (keyword
// plan, keyword plan campaign, keyword plan ad group or keyword plan keyword)
// or KeywordPlanService RPC.

/**
 * Container for enum describing possible errors from applying a keyword plan
 * resource (keyword plan, keyword plan campaign, keyword plan ad group or
 * keyword plan keyword) or KeywordPlanService RPC.
 *
 * @generated from protobuf message google.ads.googleads.v11.errors.KeywordPlanErrorEnum
 */
export interface KeywordPlanErrorEnum {
}
/**
 * Enum describing possible errors from applying a keyword plan.
 *
 * @generated from protobuf enum google.ads.googleads.v11.errors.KeywordPlanErrorEnum.KeywordPlanError
 */
export enum KeywordPlanErrorEnum_KeywordPlanError {
    /**
     * Enum unspecified.
     *
     * @generated from protobuf enum value: UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * The received error code is not known in this version.
     *
     * @generated from protobuf enum value: UNKNOWN = 1;
     */
    UNKNOWN = 1,
    /**
     * The plan's bid multiplier value is outside the valid range.
     *
     * @generated from protobuf enum value: BID_MULTIPLIER_OUT_OF_RANGE = 2;
     */
    BID_MULTIPLIER_OUT_OF_RANGE = 2,
    /**
     * The plan's bid value is too high.
     *
     * @generated from protobuf enum value: BID_TOO_HIGH = 3;
     */
    BID_TOO_HIGH = 3,
    /**
     * The plan's bid value is too low.
     *
     * @generated from protobuf enum value: BID_TOO_LOW = 4;
     */
    BID_TOO_LOW = 4,
    /**
     * The plan's cpc bid is not a multiple of the minimum billable unit.
     *
     * @generated from protobuf enum value: BID_TOO_MANY_FRACTIONAL_DIGITS = 5;
     */
    BID_TOO_MANY_FRACTIONAL_DIGITS = 5,
    /**
     * The plan's daily budget value is too low.
     *
     * @generated from protobuf enum value: DAILY_BUDGET_TOO_LOW = 6;
     */
    DAILY_BUDGET_TOO_LOW = 6,
    /**
     * The plan's daily budget is not a multiple of the minimum billable unit.
     *
     * @generated from protobuf enum value: DAILY_BUDGET_TOO_MANY_FRACTIONAL_DIGITS = 7;
     */
    DAILY_BUDGET_TOO_MANY_FRACTIONAL_DIGITS = 7,
    /**
     * The input has an invalid value.
     *
     * @generated from protobuf enum value: INVALID_VALUE = 8;
     */
    INVALID_VALUE = 8,
    /**
     * The plan has no keyword.
     *
     * @generated from protobuf enum value: KEYWORD_PLAN_HAS_NO_KEYWORDS = 9;
     */
    KEYWORD_PLAN_HAS_NO_KEYWORDS = 9,
    /**
     * The plan is not enabled and API cannot provide mutation, forecast or
     * stats.
     *
     * @generated from protobuf enum value: KEYWORD_PLAN_NOT_ENABLED = 10;
     */
    KEYWORD_PLAN_NOT_ENABLED = 10,
    /**
     * The requested plan cannot be found for providing forecast or stats.
     *
     * @generated from protobuf enum value: KEYWORD_PLAN_NOT_FOUND = 11;
     */
    KEYWORD_PLAN_NOT_FOUND = 11,
    /**
     * The plan is missing a cpc bid.
     *
     * @generated from protobuf enum value: MISSING_BID = 13;
     */
    MISSING_BID = 13,
    /**
     * The plan is missing required forecast_period field.
     *
     * @generated from protobuf enum value: MISSING_FORECAST_PERIOD = 14;
     */
    MISSING_FORECAST_PERIOD = 14,
    /**
     * The plan's forecast_period has invalid forecast date range.
     *
     * @generated from protobuf enum value: INVALID_FORECAST_DATE_RANGE = 15;
     */
    INVALID_FORECAST_DATE_RANGE = 15,
    /**
     * The plan's name is invalid.
     *
     * @generated from protobuf enum value: INVALID_NAME = 16;
     */
    INVALID_NAME = 16
}
// @generated message type with reflection information, may provide speed optimized methods
class KeywordPlanErrorEnum$Type extends MessageType<KeywordPlanErrorEnum> {
    constructor() {
        super("google.ads.googleads.v11.errors.KeywordPlanErrorEnum", []);
    }
    create(value?: PartialMessage<KeywordPlanErrorEnum>): KeywordPlanErrorEnum {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<KeywordPlanErrorEnum>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: KeywordPlanErrorEnum): KeywordPlanErrorEnum {
        return target ?? this.create();
    }
    internalBinaryWrite(message: KeywordPlanErrorEnum, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.errors.KeywordPlanErrorEnum
 */
export const KeywordPlanErrorEnum = new KeywordPlanErrorEnum$Type();
