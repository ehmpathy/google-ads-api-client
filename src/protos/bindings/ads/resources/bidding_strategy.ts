// @generated by protobuf-ts 2.8.1
// @generated from protobuf file "ads/resources/bidding_strategy.proto" (package "google.ads.googleads.v11.resources", syntax proto3)
// tslint:disable
//
// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { TargetSpend } from "../common/bidding";
import { TargetRoas } from "../common/bidding";
import { TargetImpressionShare } from "../common/bidding";
import { TargetCpa } from "../common/bidding";
import { MaximizeConversions } from "../common/bidding";
import { MaximizeConversionValue } from "../common/bidding";
import { EnhancedCpc } from "../common/bidding";
import { BiddingStrategyTypeEnum_BiddingStrategyType } from "../enums/bidding_strategy_type";
import { BiddingStrategyStatusEnum_BiddingStrategyStatus } from "../enums/bidding_strategy_status";
// Proto file describing the BiddingStrategy resource

/**
 * A bidding strategy.
 *
 * @generated from protobuf message google.ads.googleads.v11.resources.BiddingStrategy
 */
export interface BiddingStrategy {
    /**
     * Immutable. The resource name of the bidding strategy.
     * Bidding strategy resource names have the form:
     *
     * `customers/{customer_id}/biddingStrategies/{bidding_strategy_id}`
     *
     * @generated from protobuf field: string resource_name = 1;
     */
    resourceName: string;
    /**
     * Output only. The ID of the bidding strategy.
     *
     * @generated from protobuf field: optional int64 id = 16;
     */
    id?: bigint;
    /**
     * The name of the bidding strategy.
     * All bidding strategies within an account must be named distinctly.
     *
     * The length of this string should be between 1 and 255, inclusive,
     * in UTF-8 bytes, (trimmed).
     *
     * @generated from protobuf field: optional string name = 17;
     */
    name?: string;
    /**
     * Output only. The status of the bidding strategy.
     *
     * This field is read-only.
     *
     * @generated from protobuf field: google.ads.googleads.v11.enums.BiddingStrategyStatusEnum.BiddingStrategyStatus status = 15;
     */
    status: BiddingStrategyStatusEnum_BiddingStrategyStatus;
    /**
     * Output only. The type of the bidding strategy.
     * Create a bidding strategy by setting the bidding scheme.
     *
     * This field is read-only.
     *
     * @generated from protobuf field: google.ads.googleads.v11.enums.BiddingStrategyTypeEnum.BiddingStrategyType type = 5;
     */
    type: BiddingStrategyTypeEnum_BiddingStrategyType;
    /**
     * Immutable. The currency used by the bidding strategy (ISO 4217 three-letter code).
     *
     * For bidding strategies in manager customers, this currency can be set on
     * creation and defaults to the manager customer's currency. For serving
     * customers, this field cannot be set; all strategies in a serving customer
     * implicitly use the serving customer's currency. In all cases the
     * effective_currency_code field returns the currency used by the strategy.
     *
     * @generated from protobuf field: string currency_code = 23;
     */
    currencyCode: string;
    /**
     * Output only. The currency used by the bidding strategy (ISO 4217 three-letter code).
     *
     * For bidding strategies in manager customers, this is the currency set by
     * the advertiser when creating the strategy. For serving customers, this is
     * the customer's currency_code.
     *
     * Bidding strategy metrics are reported in this currency.
     *
     * This field is read-only.
     *
     * @generated from protobuf field: optional string effective_currency_code = 20;
     */
    effectiveCurrencyCode?: string;
    /**
     * Output only. The number of campaigns attached to this bidding strategy.
     *
     * This field is read-only.
     *
     * @generated from protobuf field: optional int64 campaign_count = 18;
     */
    campaignCount?: bigint;
    /**
     * Output only. The number of non-removed campaigns attached to this bidding strategy.
     *
     * This field is read-only.
     *
     * @generated from protobuf field: optional int64 non_removed_campaign_count = 19;
     */
    nonRemovedCampaignCount?: bigint;
    /**
     * @generated from protobuf oneof: scheme
     */
    scheme: {
        oneofKind: "enhancedCpc";
        /**
         * A bidding strategy that raises bids for clicks that seem more likely to
         * lead to a conversion and lowers them for clicks where they seem less
         * likely.
         *
         * @generated from protobuf field: google.ads.googleads.v11.common.EnhancedCpc enhanced_cpc = 7;
         */
        enhancedCpc: EnhancedCpc;
    } | {
        oneofKind: "maximizeConversionValue";
        /**
         * An automated bidding strategy to help get the most conversion value for
         * your campaigns while spending your budget.
         *
         * @generated from protobuf field: google.ads.googleads.v11.common.MaximizeConversionValue maximize_conversion_value = 21;
         */
        maximizeConversionValue: MaximizeConversionValue;
    } | {
        oneofKind: "maximizeConversions";
        /**
         * An automated bidding strategy to help get the most conversions for your
         * campaigns while spending your budget.
         *
         * @generated from protobuf field: google.ads.googleads.v11.common.MaximizeConversions maximize_conversions = 22;
         */
        maximizeConversions: MaximizeConversions;
    } | {
        oneofKind: "targetCpa";
        /**
         * A bidding strategy that sets bids to help get as many conversions as
         * possible at the target cost-per-acquisition (CPA) you set.
         *
         * @generated from protobuf field: google.ads.googleads.v11.common.TargetCpa target_cpa = 9;
         */
        targetCpa: TargetCpa;
    } | {
        oneofKind: "targetImpressionShare";
        /**
         * A bidding strategy that automatically optimizes towards a chosen
         * percentage of impressions.
         *
         * @generated from protobuf field: google.ads.googleads.v11.common.TargetImpressionShare target_impression_share = 48;
         */
        targetImpressionShare: TargetImpressionShare;
    } | {
        oneofKind: "targetRoas";
        /**
         * A bidding strategy that helps you maximize revenue while averaging a
         * specific target Return On Ad Spend (ROAS).
         *
         * @generated from protobuf field: google.ads.googleads.v11.common.TargetRoas target_roas = 11;
         */
        targetRoas: TargetRoas;
    } | {
        oneofKind: "targetSpend";
        /**
         * A bid strategy that sets your bids to help get as many clicks as
         * possible within your budget.
         *
         * @generated from protobuf field: google.ads.googleads.v11.common.TargetSpend target_spend = 12;
         */
        targetSpend: TargetSpend;
    } | {
        oneofKind: undefined;
    };
}
// @generated message type with reflection information, may provide speed optimized methods
class BiddingStrategy$Type extends MessageType<BiddingStrategy> {
    constructor() {
        super("google.ads.googleads.v11.resources.BiddingStrategy", [
            { no: 1, name: "resource_name", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "google.api.field_behavior": ["IMMUTABLE"], "google.api.resource_reference": { type: "googleads.googleapis.com/BiddingStrategy" } } },
            { no: 16, name: "id", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/, options: { "google.api.field_behavior": ["OUTPUT_ONLY"] } },
            { no: 17, name: "name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 15, name: "status", kind: "enum", T: () => ["google.ads.googleads.v11.enums.BiddingStrategyStatusEnum.BiddingStrategyStatus", BiddingStrategyStatusEnum_BiddingStrategyStatus], options: { "google.api.field_behavior": ["OUTPUT_ONLY"] } },
            { no: 5, name: "type", kind: "enum", T: () => ["google.ads.googleads.v11.enums.BiddingStrategyTypeEnum.BiddingStrategyType", BiddingStrategyTypeEnum_BiddingStrategyType], options: { "google.api.field_behavior": ["OUTPUT_ONLY"] } },
            { no: 23, name: "currency_code", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "google.api.field_behavior": ["IMMUTABLE"] } },
            { no: 20, name: "effective_currency_code", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/, options: { "google.api.field_behavior": ["OUTPUT_ONLY"] } },
            { no: 18, name: "campaign_count", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/, options: { "google.api.field_behavior": ["OUTPUT_ONLY"] } },
            { no: 19, name: "non_removed_campaign_count", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/, options: { "google.api.field_behavior": ["OUTPUT_ONLY"] } },
            { no: 7, name: "enhanced_cpc", kind: "message", oneof: "scheme", T: () => EnhancedCpc },
            { no: 21, name: "maximize_conversion_value", kind: "message", oneof: "scheme", T: () => MaximizeConversionValue },
            { no: 22, name: "maximize_conversions", kind: "message", oneof: "scheme", T: () => MaximizeConversions },
            { no: 9, name: "target_cpa", kind: "message", oneof: "scheme", T: () => TargetCpa },
            { no: 48, name: "target_impression_share", kind: "message", oneof: "scheme", T: () => TargetImpressionShare },
            { no: 11, name: "target_roas", kind: "message", oneof: "scheme", T: () => TargetRoas },
            { no: 12, name: "target_spend", kind: "message", oneof: "scheme", T: () => TargetSpend }
        ], { "google.api.resource": { type: "googleads.googleapis.com/BiddingStrategy", pattern: ["customers/{customer_id}/biddingStrategies/{bidding_strategy_id}"] } });
    }
    create(value?: PartialMessage<BiddingStrategy>): BiddingStrategy {
        const message = { resourceName: "", status: 0, type: 0, currencyCode: "", scheme: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BiddingStrategy>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BiddingStrategy): BiddingStrategy {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string resource_name */ 1:
                    message.resourceName = reader.string();
                    break;
                case /* optional int64 id */ 16:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* optional string name */ 17:
                    message.name = reader.string();
                    break;
                case /* google.ads.googleads.v11.enums.BiddingStrategyStatusEnum.BiddingStrategyStatus status */ 15:
                    message.status = reader.int32();
                    break;
                case /* google.ads.googleads.v11.enums.BiddingStrategyTypeEnum.BiddingStrategyType type */ 5:
                    message.type = reader.int32();
                    break;
                case /* string currency_code */ 23:
                    message.currencyCode = reader.string();
                    break;
                case /* optional string effective_currency_code */ 20:
                    message.effectiveCurrencyCode = reader.string();
                    break;
                case /* optional int64 campaign_count */ 18:
                    message.campaignCount = reader.int64().toBigInt();
                    break;
                case /* optional int64 non_removed_campaign_count */ 19:
                    message.nonRemovedCampaignCount = reader.int64().toBigInt();
                    break;
                case /* google.ads.googleads.v11.common.EnhancedCpc enhanced_cpc */ 7:
                    message.scheme = {
                        oneofKind: "enhancedCpc",
                        enhancedCpc: EnhancedCpc.internalBinaryRead(reader, reader.uint32(), options, (message.scheme as any).enhancedCpc)
                    };
                    break;
                case /* google.ads.googleads.v11.common.MaximizeConversionValue maximize_conversion_value */ 21:
                    message.scheme = {
                        oneofKind: "maximizeConversionValue",
                        maximizeConversionValue: MaximizeConversionValue.internalBinaryRead(reader, reader.uint32(), options, (message.scheme as any).maximizeConversionValue)
                    };
                    break;
                case /* google.ads.googleads.v11.common.MaximizeConversions maximize_conversions */ 22:
                    message.scheme = {
                        oneofKind: "maximizeConversions",
                        maximizeConversions: MaximizeConversions.internalBinaryRead(reader, reader.uint32(), options, (message.scheme as any).maximizeConversions)
                    };
                    break;
                case /* google.ads.googleads.v11.common.TargetCpa target_cpa */ 9:
                    message.scheme = {
                        oneofKind: "targetCpa",
                        targetCpa: TargetCpa.internalBinaryRead(reader, reader.uint32(), options, (message.scheme as any).targetCpa)
                    };
                    break;
                case /* google.ads.googleads.v11.common.TargetImpressionShare target_impression_share */ 48:
                    message.scheme = {
                        oneofKind: "targetImpressionShare",
                        targetImpressionShare: TargetImpressionShare.internalBinaryRead(reader, reader.uint32(), options, (message.scheme as any).targetImpressionShare)
                    };
                    break;
                case /* google.ads.googleads.v11.common.TargetRoas target_roas */ 11:
                    message.scheme = {
                        oneofKind: "targetRoas",
                        targetRoas: TargetRoas.internalBinaryRead(reader, reader.uint32(), options, (message.scheme as any).targetRoas)
                    };
                    break;
                case /* google.ads.googleads.v11.common.TargetSpend target_spend */ 12:
                    message.scheme = {
                        oneofKind: "targetSpend",
                        targetSpend: TargetSpend.internalBinaryRead(reader, reader.uint32(), options, (message.scheme as any).targetSpend)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BiddingStrategy, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string resource_name = 1; */
        if (message.resourceName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.resourceName);
        /* optional int64 id = 16; */
        if (message.id !== undefined)
            writer.tag(16, WireType.Varint).int64(message.id);
        /* optional string name = 17; */
        if (message.name !== undefined)
            writer.tag(17, WireType.LengthDelimited).string(message.name);
        /* google.ads.googleads.v11.enums.BiddingStrategyStatusEnum.BiddingStrategyStatus status = 15; */
        if (message.status !== 0)
            writer.tag(15, WireType.Varint).int32(message.status);
        /* google.ads.googleads.v11.enums.BiddingStrategyTypeEnum.BiddingStrategyType type = 5; */
        if (message.type !== 0)
            writer.tag(5, WireType.Varint).int32(message.type);
        /* string currency_code = 23; */
        if (message.currencyCode !== "")
            writer.tag(23, WireType.LengthDelimited).string(message.currencyCode);
        /* optional string effective_currency_code = 20; */
        if (message.effectiveCurrencyCode !== undefined)
            writer.tag(20, WireType.LengthDelimited).string(message.effectiveCurrencyCode);
        /* optional int64 campaign_count = 18; */
        if (message.campaignCount !== undefined)
            writer.tag(18, WireType.Varint).int64(message.campaignCount);
        /* optional int64 non_removed_campaign_count = 19; */
        if (message.nonRemovedCampaignCount !== undefined)
            writer.tag(19, WireType.Varint).int64(message.nonRemovedCampaignCount);
        /* google.ads.googleads.v11.common.EnhancedCpc enhanced_cpc = 7; */
        if (message.scheme.oneofKind === "enhancedCpc")
            EnhancedCpc.internalBinaryWrite(message.scheme.enhancedCpc, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* google.ads.googleads.v11.common.MaximizeConversionValue maximize_conversion_value = 21; */
        if (message.scheme.oneofKind === "maximizeConversionValue")
            MaximizeConversionValue.internalBinaryWrite(message.scheme.maximizeConversionValue, writer.tag(21, WireType.LengthDelimited).fork(), options).join();
        /* google.ads.googleads.v11.common.MaximizeConversions maximize_conversions = 22; */
        if (message.scheme.oneofKind === "maximizeConversions")
            MaximizeConversions.internalBinaryWrite(message.scheme.maximizeConversions, writer.tag(22, WireType.LengthDelimited).fork(), options).join();
        /* google.ads.googleads.v11.common.TargetCpa target_cpa = 9; */
        if (message.scheme.oneofKind === "targetCpa")
            TargetCpa.internalBinaryWrite(message.scheme.targetCpa, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* google.ads.googleads.v11.common.TargetImpressionShare target_impression_share = 48; */
        if (message.scheme.oneofKind === "targetImpressionShare")
            TargetImpressionShare.internalBinaryWrite(message.scheme.targetImpressionShare, writer.tag(48, WireType.LengthDelimited).fork(), options).join();
        /* google.ads.googleads.v11.common.TargetRoas target_roas = 11; */
        if (message.scheme.oneofKind === "targetRoas")
            TargetRoas.internalBinaryWrite(message.scheme.targetRoas, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* google.ads.googleads.v11.common.TargetSpend target_spend = 12; */
        if (message.scheme.oneofKind === "targetSpend")
            TargetSpend.internalBinaryWrite(message.scheme.targetSpend, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.resources.BiddingStrategy
 */
export const BiddingStrategy = new BiddingStrategy$Type();
