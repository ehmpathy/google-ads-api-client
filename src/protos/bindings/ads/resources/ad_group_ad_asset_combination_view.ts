// @generated by protobuf-ts 2.8.1
// @generated from protobuf file "ads/resources/ad_group_ad_asset_combination_view.proto" (package "google.ads.googleads.v11.resources", syntax proto3)
// tslint:disable
//
// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { AssetUsage } from "../common/asset_usage";
// Proto file describing the asset combination view resource.

/**
 * A view on the usage of ad group ad asset combination.
 * Now we only support AdGroupAdAssetCombinationView for Responsive Search Ads,
 * with more ad types planned for the future.
 *
 * @generated from protobuf message google.ads.googleads.v11.resources.AdGroupAdAssetCombinationView
 */
export interface AdGroupAdAssetCombinationView {
    /**
     * Output only. The resource name of the ad group ad asset combination view. The
     * combination ID is 128 bits long, where the upper 64 bits are stored in
     * asset_combination_id_high, and the lower 64 bits are stored in
     * asset_combination_id_low.
     * AdGroupAd Asset Combination view resource names have the form:
     * `customers/{customer_id}/adGroupAdAssetCombinationViews/{AdGroupAd.ad_group_id}~{AdGroupAd.ad.ad_id}~{AssetCombination.asset_combination_id_low}~{AssetCombination.asset_combination_id_high}`
     *
     * @generated from protobuf field: string resource_name = 1;
     */
    resourceName: string;
    /**
     * Output only. Served assets.
     *
     * @generated from protobuf field: repeated google.ads.googleads.v11.common.AssetUsage served_assets = 2;
     */
    servedAssets: AssetUsage[];
    /**
     * Output only. The status between the asset combination and the latest version of the ad.
     * If true, the asset combination is linked to the latest version of the ad.
     * If false, it means the link once existed but has been removed and is no
     * longer present in the latest version of the ad.
     *
     * @generated from protobuf field: optional bool enabled = 3;
     */
    enabled?: boolean;
}
// @generated message type with reflection information, may provide speed optimized methods
class AdGroupAdAssetCombinationView$Type extends MessageType<AdGroupAdAssetCombinationView> {
    constructor() {
        super("google.ads.googleads.v11.resources.AdGroupAdAssetCombinationView", [
            { no: 1, name: "resource_name", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "google.api.field_behavior": ["OUTPUT_ONLY"], "google.api.resource_reference": { type: "googleads.googleapis.com/AdGroupAdAssetCombinationView" } } },
            { no: 2, name: "served_assets", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => AssetUsage, options: { "google.api.field_behavior": ["OUTPUT_ONLY"] } },
            { no: 3, name: "enabled", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/, options: { "google.api.field_behavior": ["OUTPUT_ONLY"] } }
        ], { "google.api.resource": { type: "googleads.googleapis.com/AdGroupAdAssetCombinationView", pattern: ["customers/{customer_id}/adGroupAdAssetCombinationViews/{ad_group_id}~{ad_id}~{asset_combination_id_low}~{asset_combination_id_high}"] } });
    }
    create(value?: PartialMessage<AdGroupAdAssetCombinationView>): AdGroupAdAssetCombinationView {
        const message = { resourceName: "", servedAssets: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AdGroupAdAssetCombinationView>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AdGroupAdAssetCombinationView): AdGroupAdAssetCombinationView {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string resource_name */ 1:
                    message.resourceName = reader.string();
                    break;
                case /* repeated google.ads.googleads.v11.common.AssetUsage served_assets */ 2:
                    message.servedAssets.push(AssetUsage.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional bool enabled */ 3:
                    message.enabled = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AdGroupAdAssetCombinationView, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string resource_name = 1; */
        if (message.resourceName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.resourceName);
        /* repeated google.ads.googleads.v11.common.AssetUsage served_assets = 2; */
        for (let i = 0; i < message.servedAssets.length; i++)
            AssetUsage.internalBinaryWrite(message.servedAssets[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* optional bool enabled = 3; */
        if (message.enabled !== undefined)
            writer.tag(3, WireType.Varint).bool(message.enabled);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.resources.AdGroupAdAssetCombinationView
 */
export const AdGroupAdAssetCombinationView = new AdGroupAdAssetCombinationView$Type();
