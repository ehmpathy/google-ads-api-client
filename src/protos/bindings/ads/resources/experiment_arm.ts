// @generated by protobuf-ts 2.8.1
// @generated from protobuf file "ads/resources/experiment_arm.proto" (package "google.ads.googleads.v11.resources", syntax proto3)
// tslint:disable
//
// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
// Proto file describing the Experiment arm resource.

/**
 * A Google ads experiment for users to experiment changes on multiple
 * campaigns, compare the performance, and apply the effective changes.
 *
 * @generated from protobuf message google.ads.googleads.v11.resources.ExperimentArm
 */
export interface ExperimentArm {
    /**
     * Immutable. The resource name of the experiment arm.
     * Experiment arm resource names have the form:
     *
     * `customers/{customer_id}/experimentArms/{TrialArm.trial_id}~{TrialArm.trial_arm_id}`
     *
     * @generated from protobuf field: string resource_name = 1;
     */
    resourceName: string;
    /**
     * Immutable. The experiment to which the ExperimentArm belongs.
     *
     * @generated from protobuf field: string trial = 2;
     */
    trial: string;
    /**
     * Required. The name of the experiment arm. It must have a minimum length of 1 and
     * maximum length of 1024. It must be unique under an experiment.
     *
     * @generated from protobuf field: string name = 3;
     */
    name: string;
    /**
     * Whether this arm is a control arm. A control arm is the arm against
     * which the other arms are compared.
     *
     * @generated from protobuf field: bool control = 4;
     */
    control: boolean;
    /**
     * Traffic split of the trial arm. The value should be between 1 and 100
     * and must total 100 between the two trial arms.
     *
     * @generated from protobuf field: int64 traffic_split = 5;
     */
    trafficSplit: bigint;
    /**
     * List of campaigns in the trial arm. The max length is one.
     *
     * @generated from protobuf field: repeated string campaigns = 6;
     */
    campaigns: string[];
    /**
     * Output only. The in design campaigns in the treatment experiment arm.
     *
     * @generated from protobuf field: repeated string in_design_campaigns = 7;
     */
    inDesignCampaigns: string[];
}
// @generated message type with reflection information, may provide speed optimized methods
class ExperimentArm$Type extends MessageType<ExperimentArm> {
    constructor() {
        super("google.ads.googleads.v11.resources.ExperimentArm", [
            { no: 1, name: "resource_name", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "google.api.field_behavior": ["IMMUTABLE"], "google.api.resource_reference": { type: "googleads.googleapis.com/ExperimentArm" } } },
            { no: 2, name: "trial", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "google.api.field_behavior": ["IMMUTABLE"], "google.api.resource_reference": { type: "googleads.googleapis.com/Experiment" } } },
            { no: 3, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "google.api.field_behavior": ["REQUIRED"] } },
            { no: 4, name: "control", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "traffic_split", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "campaigns", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/, options: { "google.api.resource_reference": { type: "googleads.googleapis.com/Campaign" } } },
            { no: 7, name: "in_design_campaigns", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/, options: { "google.api.field_behavior": ["OUTPUT_ONLY"], "google.api.resource_reference": { type: "googleads.googleapis.com/Campaign" } } }
        ], { "google.api.resource": { type: "googleads.googleapis.com/ExperimentArm", pattern: ["customers/{customer_id}/experimentArms/{trial_id}~{trial_arm_id}"] } });
    }
    create(value?: PartialMessage<ExperimentArm>): ExperimentArm {
        const message = { resourceName: "", trial: "", name: "", control: false, trafficSplit: 0n, campaigns: [], inDesignCampaigns: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ExperimentArm>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExperimentArm): ExperimentArm {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string resource_name */ 1:
                    message.resourceName = reader.string();
                    break;
                case /* string trial */ 2:
                    message.trial = reader.string();
                    break;
                case /* string name */ 3:
                    message.name = reader.string();
                    break;
                case /* bool control */ 4:
                    message.control = reader.bool();
                    break;
                case /* int64 traffic_split */ 5:
                    message.trafficSplit = reader.int64().toBigInt();
                    break;
                case /* repeated string campaigns */ 6:
                    message.campaigns.push(reader.string());
                    break;
                case /* repeated string in_design_campaigns */ 7:
                    message.inDesignCampaigns.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExperimentArm, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string resource_name = 1; */
        if (message.resourceName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.resourceName);
        /* string trial = 2; */
        if (message.trial !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.trial);
        /* string name = 3; */
        if (message.name !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.name);
        /* bool control = 4; */
        if (message.control !== false)
            writer.tag(4, WireType.Varint).bool(message.control);
        /* int64 traffic_split = 5; */
        if (message.trafficSplit !== 0n)
            writer.tag(5, WireType.Varint).int64(message.trafficSplit);
        /* repeated string campaigns = 6; */
        for (let i = 0; i < message.campaigns.length; i++)
            writer.tag(6, WireType.LengthDelimited).string(message.campaigns[i]);
        /* repeated string in_design_campaigns = 7; */
        for (let i = 0; i < message.inDesignCampaigns.length; i++)
            writer.tag(7, WireType.LengthDelimited).string(message.inDesignCampaigns[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.resources.ExperimentArm
 */
export const ExperimentArm = new ExperimentArm$Type();
