// @generated by protobuf-ts 2.8.1
// @generated from protobuf file "ads/resources/batch_job.proto" (package "google.ads.googleads.v11.resources", syntax proto3)
// tslint:disable
//
// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { BatchJobStatusEnum_BatchJobStatus } from "../enums/batch_job_status";
// Proto file describing the batch job resource.

/**
 * A list of mutates being processed asynchronously. The mutates are uploaded
 * by the user. The mutates themselves aren't readable and the results of the
 * job can only be read using BatchJobService.ListBatchJobResults.
 *
 * @generated from protobuf message google.ads.googleads.v11.resources.BatchJob
 */
export interface BatchJob {
    /**
     * Immutable. The resource name of the batch job.
     * Batch job resource names have the form:
     *
     * `customers/{customer_id}/batchJobs/{batch_job_id}`
     *
     * @generated from protobuf field: string resource_name = 1;
     */
    resourceName: string;
    /**
     * Output only. ID of this batch job.
     *
     * @generated from protobuf field: optional int64 id = 7;
     */
    id?: bigint;
    /**
     * Output only. The next sequence token to use when adding operations. Only set when the
     * batch job status is PENDING.
     *
     * @generated from protobuf field: optional string next_add_sequence_token = 8;
     */
    nextAddSequenceToken?: string;
    /**
     * Output only. Contains additional information about this batch job.
     *
     * @generated from protobuf field: google.ads.googleads.v11.resources.BatchJob.BatchJobMetadata metadata = 4;
     */
    metadata?: BatchJob_BatchJobMetadata;
    /**
     * Output only. Status of this batch job.
     *
     * @generated from protobuf field: google.ads.googleads.v11.enums.BatchJobStatusEnum.BatchJobStatus status = 5;
     */
    status: BatchJobStatusEnum_BatchJobStatus;
    /**
     * Output only. The resource name of the long-running operation that can be used to poll
     * for completion. Only set when the batch job status is RUNNING or DONE.
     *
     * @generated from protobuf field: optional string long_running_operation = 9;
     */
    longRunningOperation?: string;
}
/**
 * Additional information about the batch job. This message is also used as
 * metadata returned in batch job Long Running Operations.
 *
 * @generated from protobuf message google.ads.googleads.v11.resources.BatchJob.BatchJobMetadata
 */
export interface BatchJob_BatchJobMetadata {
    /**
     * Output only. The time when this batch job was created.
     * Formatted as yyyy-mm-dd hh:mm:ss. Example: "2018-03-05 09:15:00"
     *
     * @generated from protobuf field: optional string creation_date_time = 8;
     */
    creationDateTime?: string;
    /**
     * Output only. The time when this batch job started running.
     * Formatted as yyyy-mm-dd hh:mm:ss. Example: "2018-03-05 09:15:30"
     *
     * @generated from protobuf field: optional string start_date_time = 7;
     */
    startDateTime?: string;
    /**
     * Output only. The time when this batch job was completed.
     * Formatted as yyyy-MM-dd HH:mm:ss. Example: "2018-03-05 09:16:00"
     *
     * @generated from protobuf field: optional string completion_date_time = 9;
     */
    completionDateTime?: string;
    /**
     * Output only. The fraction (between 0.0 and 1.0) of mutates that have been processed.
     * This is empty if the job hasn't started running yet.
     *
     * @generated from protobuf field: optional double estimated_completion_ratio = 10;
     */
    estimatedCompletionRatio?: number;
    /**
     * Output only. The number of mutate operations in the batch job.
     *
     * @generated from protobuf field: optional int64 operation_count = 11;
     */
    operationCount?: bigint;
    /**
     * Output only. The number of mutate operations executed by the batch job.
     * Present only if the job has started running.
     *
     * @generated from protobuf field: optional int64 executed_operation_count = 12;
     */
    executedOperationCount?: bigint;
}
// @generated message type with reflection information, may provide speed optimized methods
class BatchJob$Type extends MessageType<BatchJob> {
    constructor() {
        super("google.ads.googleads.v11.resources.BatchJob", [
            { no: 1, name: "resource_name", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "google.api.field_behavior": ["IMMUTABLE"], "google.api.resource_reference": { type: "googleads.googleapis.com/BatchJob" } } },
            { no: 7, name: "id", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/, options: { "google.api.field_behavior": ["OUTPUT_ONLY"] } },
            { no: 8, name: "next_add_sequence_token", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/, options: { "google.api.field_behavior": ["OUTPUT_ONLY"] } },
            { no: 4, name: "metadata", kind: "message", T: () => BatchJob_BatchJobMetadata, options: { "google.api.field_behavior": ["OUTPUT_ONLY"] } },
            { no: 5, name: "status", kind: "enum", T: () => ["google.ads.googleads.v11.enums.BatchJobStatusEnum.BatchJobStatus", BatchJobStatusEnum_BatchJobStatus], options: { "google.api.field_behavior": ["OUTPUT_ONLY"] } },
            { no: 9, name: "long_running_operation", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/, options: { "google.api.field_behavior": ["OUTPUT_ONLY"] } }
        ], { "google.api.resource": { type: "googleads.googleapis.com/BatchJob", pattern: ["customers/{customer_id}/batchJobs/{batch_job_id}"] } });
    }
    create(value?: PartialMessage<BatchJob>): BatchJob {
        const message = { resourceName: "", status: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BatchJob>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BatchJob): BatchJob {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string resource_name */ 1:
                    message.resourceName = reader.string();
                    break;
                case /* optional int64 id */ 7:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* optional string next_add_sequence_token */ 8:
                    message.nextAddSequenceToken = reader.string();
                    break;
                case /* google.ads.googleads.v11.resources.BatchJob.BatchJobMetadata metadata */ 4:
                    message.metadata = BatchJob_BatchJobMetadata.internalBinaryRead(reader, reader.uint32(), options, message.metadata);
                    break;
                case /* google.ads.googleads.v11.enums.BatchJobStatusEnum.BatchJobStatus status */ 5:
                    message.status = reader.int32();
                    break;
                case /* optional string long_running_operation */ 9:
                    message.longRunningOperation = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BatchJob, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string resource_name = 1; */
        if (message.resourceName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.resourceName);
        /* optional int64 id = 7; */
        if (message.id !== undefined)
            writer.tag(7, WireType.Varint).int64(message.id);
        /* optional string next_add_sequence_token = 8; */
        if (message.nextAddSequenceToken !== undefined)
            writer.tag(8, WireType.LengthDelimited).string(message.nextAddSequenceToken);
        /* google.ads.googleads.v11.resources.BatchJob.BatchJobMetadata metadata = 4; */
        if (message.metadata)
            BatchJob_BatchJobMetadata.internalBinaryWrite(message.metadata, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* google.ads.googleads.v11.enums.BatchJobStatusEnum.BatchJobStatus status = 5; */
        if (message.status !== 0)
            writer.tag(5, WireType.Varint).int32(message.status);
        /* optional string long_running_operation = 9; */
        if (message.longRunningOperation !== undefined)
            writer.tag(9, WireType.LengthDelimited).string(message.longRunningOperation);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.resources.BatchJob
 */
export const BatchJob = new BatchJob$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BatchJob_BatchJobMetadata$Type extends MessageType<BatchJob_BatchJobMetadata> {
    constructor() {
        super("google.ads.googleads.v11.resources.BatchJob.BatchJobMetadata", [
            { no: 8, name: "creation_date_time", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/, options: { "google.api.field_behavior": ["OUTPUT_ONLY"] } },
            { no: 7, name: "start_date_time", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/, options: { "google.api.field_behavior": ["OUTPUT_ONLY"] } },
            { no: 9, name: "completion_date_time", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/, options: { "google.api.field_behavior": ["OUTPUT_ONLY"] } },
            { no: 10, name: "estimated_completion_ratio", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/, options: { "google.api.field_behavior": ["OUTPUT_ONLY"] } },
            { no: 11, name: "operation_count", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/, options: { "google.api.field_behavior": ["OUTPUT_ONLY"] } },
            { no: 12, name: "executed_operation_count", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/, options: { "google.api.field_behavior": ["OUTPUT_ONLY"] } }
        ]);
    }
    create(value?: PartialMessage<BatchJob_BatchJobMetadata>): BatchJob_BatchJobMetadata {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BatchJob_BatchJobMetadata>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BatchJob_BatchJobMetadata): BatchJob_BatchJobMetadata {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string creation_date_time */ 8:
                    message.creationDateTime = reader.string();
                    break;
                case /* optional string start_date_time */ 7:
                    message.startDateTime = reader.string();
                    break;
                case /* optional string completion_date_time */ 9:
                    message.completionDateTime = reader.string();
                    break;
                case /* optional double estimated_completion_ratio */ 10:
                    message.estimatedCompletionRatio = reader.double();
                    break;
                case /* optional int64 operation_count */ 11:
                    message.operationCount = reader.int64().toBigInt();
                    break;
                case /* optional int64 executed_operation_count */ 12:
                    message.executedOperationCount = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BatchJob_BatchJobMetadata, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string creation_date_time = 8; */
        if (message.creationDateTime !== undefined)
            writer.tag(8, WireType.LengthDelimited).string(message.creationDateTime);
        /* optional string start_date_time = 7; */
        if (message.startDateTime !== undefined)
            writer.tag(7, WireType.LengthDelimited).string(message.startDateTime);
        /* optional string completion_date_time = 9; */
        if (message.completionDateTime !== undefined)
            writer.tag(9, WireType.LengthDelimited).string(message.completionDateTime);
        /* optional double estimated_completion_ratio = 10; */
        if (message.estimatedCompletionRatio !== undefined)
            writer.tag(10, WireType.Bit64).double(message.estimatedCompletionRatio);
        /* optional int64 operation_count = 11; */
        if (message.operationCount !== undefined)
            writer.tag(11, WireType.Varint).int64(message.operationCount);
        /* optional int64 executed_operation_count = 12; */
        if (message.executedOperationCount !== undefined)
            writer.tag(12, WireType.Varint).int64(message.executedOperationCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.resources.BatchJob.BatchJobMetadata
 */
export const BatchJob_BatchJobMetadata = new BatchJob_BatchJobMetadata$Type();
