// @generated by protobuf-ts 2.8.1
// @generated from protobuf file "ads/resources/experiment.proto" (package "google.ads.googleads.v11.resources", syntax proto3)
// tslint:disable
//
// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { AsyncActionStatusEnum_AsyncActionStatus } from "../enums/async_action_status";
import { MetricGoal } from "../common/metric_goal";
import { ExperimentStatusEnum_ExperimentStatus } from "../enums/experiment_status";
import { ExperimentTypeEnum_ExperimentType } from "../enums/experiment_type";
// Proto file describing the Experiment resource.

/**
 * A Google ads experiment for users to experiment changes on multiple
 * campaigns, compare the performance, and apply the effective changes.
 *
 * @generated from protobuf message google.ads.googleads.v11.resources.Experiment
 */
export interface Experiment {
    /**
     * Immutable. The resource name of the experiment.
     * Experiment resource names have the form:
     *
     * `customers/{customer_id}/experiments/{experiment_id}`
     *
     * @generated from protobuf field: string resource_name = 1;
     */
    resourceName: string;
    /**
     * Output only. The ID of the experiment. Read only.
     *
     * @generated from protobuf field: optional int64 experiment_id = 9;
     */
    experimentId?: bigint;
    /**
     * Required. The name of the experiment. It must have a minimum length of 1 and
     * maximum length of 1024. It must be unique under a customer.
     *
     * @generated from protobuf field: string name = 10;
     */
    name: string;
    /**
     * The description of the experiment. It must have a minimum length of 1 and
     * maximum length of 2048.
     *
     * @generated from protobuf field: string description = 11;
     */
    description: string;
    /**
     * For system managed experiments, the advertiser must provide a suffix during
     * construction, in the setup stage before moving to initiated. The suffix
     * will be appended to the in-design and experiment campaign names so that the
     * name is base campaign name + suffix.
     *
     * @generated from protobuf field: string suffix = 12;
     */
    suffix: string;
    /**
     * The product/feature that uses this experiment.
     *
     * @generated from protobuf field: google.ads.googleads.v11.enums.ExperimentTypeEnum.ExperimentType type = 13;
     */
    type: ExperimentTypeEnum_ExperimentType;
    /**
     * The Advertiser-chosen status of this experiment.
     *
     * @generated from protobuf field: google.ads.googleads.v11.enums.ExperimentStatusEnum.ExperimentStatus status = 14;
     */
    status: ExperimentStatusEnum_ExperimentStatus;
    /**
     * Date when the experiment starts. By default, the experiment starts
     * now or on the campaign's start date, whichever is later. If this field is
     * set, then the experiment starts at the beginning of the specified date in
     * the customer's time zone.
     *
     * Format: YYYY-MM-DD
     * Example: 2019-03-14
     *
     * @generated from protobuf field: optional string start_date = 15;
     */
    startDate?: string;
    /**
     * Date when the experiment ends. By default, the experiment ends on
     * the campaign's end date. If this field is set, then the experiment ends at
     * the end of the specified date in the customer's time zone.
     *
     * Format: YYYY-MM-DD
     * Example: 2019-04-18
     *
     * @generated from protobuf field: optional string end_date = 16;
     */
    endDate?: string;
    /**
     * The goals of this experiment.
     *
     * @generated from protobuf field: repeated google.ads.googleads.v11.common.MetricGoal goals = 17;
     */
    goals: MetricGoal[];
    /**
     * Output only. The resource name of the long-running operation that can be used to poll
     * for completion of experiment schedule or promote. The most recent long
     * running operation is returned.
     *
     * @generated from protobuf field: optional string long_running_operation = 18;
     */
    longRunningOperation?: string;
    /**
     * Output only. The status of the experiment promotion process.
     *
     * @generated from protobuf field: google.ads.googleads.v11.enums.AsyncActionStatusEnum.AsyncActionStatus promote_status = 19;
     */
    promoteStatus: AsyncActionStatusEnum_AsyncActionStatus;
}
// @generated message type with reflection information, may provide speed optimized methods
class Experiment$Type extends MessageType<Experiment> {
    constructor() {
        super("google.ads.googleads.v11.resources.Experiment", [
            { no: 1, name: "resource_name", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "google.api.field_behavior": ["IMMUTABLE"], "google.api.resource_reference": { type: "googleads.googleapis.com/Experiment" } } },
            { no: 9, name: "experiment_id", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/, options: { "google.api.field_behavior": ["OUTPUT_ONLY"] } },
            { no: 10, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "google.api.field_behavior": ["REQUIRED"] } },
            { no: 11, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "suffix", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "type", kind: "enum", T: () => ["google.ads.googleads.v11.enums.ExperimentTypeEnum.ExperimentType", ExperimentTypeEnum_ExperimentType] },
            { no: 14, name: "status", kind: "enum", T: () => ["google.ads.googleads.v11.enums.ExperimentStatusEnum.ExperimentStatus", ExperimentStatusEnum_ExperimentStatus] },
            { no: 15, name: "start_date", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 16, name: "end_date", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 17, name: "goals", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MetricGoal },
            { no: 18, name: "long_running_operation", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/, options: { "google.api.field_behavior": ["OUTPUT_ONLY"] } },
            { no: 19, name: "promote_status", kind: "enum", T: () => ["google.ads.googleads.v11.enums.AsyncActionStatusEnum.AsyncActionStatus", AsyncActionStatusEnum_AsyncActionStatus], options: { "google.api.field_behavior": ["OUTPUT_ONLY"] } }
        ], { "google.api.resource": { type: "googleads.googleapis.com/Experiment", pattern: ["customers/{customer_id}/experiments/{trial_id}"] } });
    }
    create(value?: PartialMessage<Experiment>): Experiment {
        const message = { resourceName: "", name: "", description: "", suffix: "", type: 0, status: 0, goals: [], promoteStatus: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Experiment>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Experiment): Experiment {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string resource_name */ 1:
                    message.resourceName = reader.string();
                    break;
                case /* optional int64 experiment_id */ 9:
                    message.experimentId = reader.int64().toBigInt();
                    break;
                case /* string name */ 10:
                    message.name = reader.string();
                    break;
                case /* string description */ 11:
                    message.description = reader.string();
                    break;
                case /* string suffix */ 12:
                    message.suffix = reader.string();
                    break;
                case /* google.ads.googleads.v11.enums.ExperimentTypeEnum.ExperimentType type */ 13:
                    message.type = reader.int32();
                    break;
                case /* google.ads.googleads.v11.enums.ExperimentStatusEnum.ExperimentStatus status */ 14:
                    message.status = reader.int32();
                    break;
                case /* optional string start_date */ 15:
                    message.startDate = reader.string();
                    break;
                case /* optional string end_date */ 16:
                    message.endDate = reader.string();
                    break;
                case /* repeated google.ads.googleads.v11.common.MetricGoal goals */ 17:
                    message.goals.push(MetricGoal.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional string long_running_operation */ 18:
                    message.longRunningOperation = reader.string();
                    break;
                case /* google.ads.googleads.v11.enums.AsyncActionStatusEnum.AsyncActionStatus promote_status */ 19:
                    message.promoteStatus = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Experiment, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string resource_name = 1; */
        if (message.resourceName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.resourceName);
        /* optional int64 experiment_id = 9; */
        if (message.experimentId !== undefined)
            writer.tag(9, WireType.Varint).int64(message.experimentId);
        /* string name = 10; */
        if (message.name !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.name);
        /* string description = 11; */
        if (message.description !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.description);
        /* string suffix = 12; */
        if (message.suffix !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.suffix);
        /* google.ads.googleads.v11.enums.ExperimentTypeEnum.ExperimentType type = 13; */
        if (message.type !== 0)
            writer.tag(13, WireType.Varint).int32(message.type);
        /* google.ads.googleads.v11.enums.ExperimentStatusEnum.ExperimentStatus status = 14; */
        if (message.status !== 0)
            writer.tag(14, WireType.Varint).int32(message.status);
        /* optional string start_date = 15; */
        if (message.startDate !== undefined)
            writer.tag(15, WireType.LengthDelimited).string(message.startDate);
        /* optional string end_date = 16; */
        if (message.endDate !== undefined)
            writer.tag(16, WireType.LengthDelimited).string(message.endDate);
        /* repeated google.ads.googleads.v11.common.MetricGoal goals = 17; */
        for (let i = 0; i < message.goals.length; i++)
            MetricGoal.internalBinaryWrite(message.goals[i], writer.tag(17, WireType.LengthDelimited).fork(), options).join();
        /* optional string long_running_operation = 18; */
        if (message.longRunningOperation !== undefined)
            writer.tag(18, WireType.LengthDelimited).string(message.longRunningOperation);
        /* google.ads.googleads.v11.enums.AsyncActionStatusEnum.AsyncActionStatus promote_status = 19; */
        if (message.promoteStatus !== 0)
            writer.tag(19, WireType.Varint).int32(message.promoteStatus);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.resources.Experiment
 */
export const Experiment = new Experiment$Type();
