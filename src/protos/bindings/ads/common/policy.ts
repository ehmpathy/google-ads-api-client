// @generated by protobuf-ts 2.8.1
// @generated from protobuf file "ads/common/policy.proto" (package "google.ads.googleads.v11.common", syntax proto3)
// tslint:disable
//
// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { PolicyTopicEvidenceDestinationNotWorkingDnsErrorTypeEnum_PolicyTopicEvidenceDestinationNotWorkingDnsErrorType } from "../enums/policy_topic_evidence_destination_not_working_dns_error_type";
import { PolicyTopicEvidenceDestinationNotWorkingDeviceEnum_PolicyTopicEvidenceDestinationNotWorkingDevice } from "../enums/policy_topic_evidence_destination_not_working_device";
import { PolicyTopicEvidenceDestinationMismatchUrlTypeEnum_PolicyTopicEvidenceDestinationMismatchUrlType } from "../enums/policy_topic_evidence_destination_mismatch_url_type";
import { PolicyTopicEntryTypeEnum_PolicyTopicEntryType } from "../enums/policy_topic_entry_type";
// Proto file describing policy information.

/**
 * Key of the violation. The key is used for referring to a violation
 * when filing an exemption request.
 *
 * @generated from protobuf message google.ads.googleads.v11.common.PolicyViolationKey
 */
export interface PolicyViolationKey {
    /**
     * Unique ID of the violated policy.
     *
     * @generated from protobuf field: optional string policy_name = 3;
     */
    policyName?: string;
    /**
     * The text that violates the policy if specified.
     * Otherwise, refers to the policy in general
     * (for example, when requesting to be exempt from the whole policy).
     * If not specified for criterion exemptions, the whole policy is implied.
     * Must be specified for ad exemptions.
     *
     * @generated from protobuf field: optional string violating_text = 4;
     */
    violatingText?: string;
}
/**
 * Parameter for controlling how policy exemption is done.
 *
 * @generated from protobuf message google.ads.googleads.v11.common.PolicyValidationParameter
 */
export interface PolicyValidationParameter {
    /**
     * The list of policy topics that should not cause a PolicyFindingError to
     * be reported. This field is currently only compatible with Enhanced Text Ad.
     * It corresponds to the PolicyTopicEntry.topic field.
     *
     * Resources violating these policies will be saved, but will not be eligible
     * to serve. They may begin serving at a later time due to a change in
     * policies, re-review of the resource, or a change in advertiser
     * certificates.
     *
     * @generated from protobuf field: repeated string ignorable_policy_topics = 3;
     */
    ignorablePolicyTopics: string[];
    /**
     * The list of policy violation keys that should not cause a
     * PolicyViolationError to be reported. Not all policy violations are
     * exemptable, refer to the is_exemptible field in the returned
     * PolicyViolationError.
     *
     * Resources violating these polices will be saved, but will not be eligible
     * to serve. They may begin serving at a later time due to a change in
     * policies, re-review of the resource, or a change in advertiser
     * certificates.
     *
     * @generated from protobuf field: repeated google.ads.googleads.v11.common.PolicyViolationKey exempt_policy_violation_keys = 2;
     */
    exemptPolicyViolationKeys: PolicyViolationKey[];
}
/**
 * Policy finding attached to a resource (for example, alcohol policy associated
 * with a site that sells alcohol).
 *
 * Each PolicyTopicEntry has a topic that indicates the specific ads policy
 * the entry is about and a type to indicate the effect that the entry will have
 * on serving. It may optionally have one or more evidences that indicate the
 * reason for the finding. It may also optionally have one or more constraints
 * that provide details about how serving may be restricted.
 *
 * @generated from protobuf message google.ads.googleads.v11.common.PolicyTopicEntry
 */
export interface PolicyTopicEntry {
    /**
     * Policy topic this finding refers to. For example, "ALCOHOL",
     * "TRADEMARKS_IN_AD_TEXT", or "DESTINATION_NOT_WORKING". The set of possible
     * policy topics is not fixed for a particular API version and may change
     * at any time.
     *
     * @generated from protobuf field: optional string topic = 5;
     */
    topic?: string;
    /**
     * Describes the negative or positive effect this policy will have on serving.
     *
     * @generated from protobuf field: google.ads.googleads.v11.enums.PolicyTopicEntryTypeEnum.PolicyTopicEntryType type = 2;
     */
    type: PolicyTopicEntryTypeEnum_PolicyTopicEntryType;
    /**
     * Additional information that explains policy finding
     * (for example, the brand name for a trademark finding).
     *
     * @generated from protobuf field: repeated google.ads.googleads.v11.common.PolicyTopicEvidence evidences = 3;
     */
    evidences: PolicyTopicEvidence[];
    /**
     * Indicates how serving of this resource may be affected (for example, not
     * serving in a country).
     *
     * @generated from protobuf field: repeated google.ads.googleads.v11.common.PolicyTopicConstraint constraints = 4;
     */
    constraints: PolicyTopicConstraint[];
}
/**
 * Additional information that explains a policy finding.
 *
 * @generated from protobuf message google.ads.googleads.v11.common.PolicyTopicEvidence
 */
export interface PolicyTopicEvidence {
    /**
     * @generated from protobuf oneof: value
     */
    value: {
        oneofKind: "websiteList";
        /**
         * List of websites linked with this resource.
         *
         * @generated from protobuf field: google.ads.googleads.v11.common.PolicyTopicEvidence.WebsiteList website_list = 3;
         */
        websiteList: PolicyTopicEvidence_WebsiteList;
    } | {
        oneofKind: "textList";
        /**
         * List of evidence found in the text of a resource.
         *
         * @generated from protobuf field: google.ads.googleads.v11.common.PolicyTopicEvidence.TextList text_list = 4;
         */
        textList: PolicyTopicEvidence_TextList;
    } | {
        oneofKind: "languageCode";
        /**
         * The language the resource was detected to be written in.
         * This is an IETF language tag such as "en-US".
         *
         * @generated from protobuf field: string language_code = 9;
         */
        languageCode: string;
    } | {
        oneofKind: "destinationTextList";
        /**
         * The text in the destination of the resource that is causing a policy
         * finding.
         *
         * @generated from protobuf field: google.ads.googleads.v11.common.PolicyTopicEvidence.DestinationTextList destination_text_list = 6;
         */
        destinationTextList: PolicyTopicEvidence_DestinationTextList;
    } | {
        oneofKind: "destinationMismatch";
        /**
         * Mismatch between the destinations of a resource's URLs.
         *
         * @generated from protobuf field: google.ads.googleads.v11.common.PolicyTopicEvidence.DestinationMismatch destination_mismatch = 7;
         */
        destinationMismatch: PolicyTopicEvidence_DestinationMismatch;
    } | {
        oneofKind: "destinationNotWorking";
        /**
         * Details when the destination is returning an HTTP error code or isn't
         * functional in all locations for commonly used devices.
         *
         * @generated from protobuf field: google.ads.googleads.v11.common.PolicyTopicEvidence.DestinationNotWorking destination_not_working = 8;
         */
        destinationNotWorking: PolicyTopicEvidence_DestinationNotWorking;
    } | {
        oneofKind: undefined;
    };
}
/**
 * A list of fragments of text that violated a policy.
 *
 * @generated from protobuf message google.ads.googleads.v11.common.PolicyTopicEvidence.TextList
 */
export interface PolicyTopicEvidence_TextList {
    /**
     * The fragments of text from the resource that caused the policy finding.
     *
     * @generated from protobuf field: repeated string texts = 2;
     */
    texts: string[];
}
/**
 * A list of websites that caused a policy finding. Used for
 * ONE_WEBSITE_PER_AD_GROUP policy topic, for example. In case there are more
 * than five websites, only the top five (those that appear in resources the
 * most) will be listed here.
 *
 * @generated from protobuf message google.ads.googleads.v11.common.PolicyTopicEvidence.WebsiteList
 */
export interface PolicyTopicEvidence_WebsiteList {
    /**
     * Websites that caused the policy finding.
     *
     * @generated from protobuf field: repeated string websites = 2;
     */
    websites: string[];
}
/**
 * A list of strings found in a destination page that caused a policy
 * finding.
 *
 * @generated from protobuf message google.ads.googleads.v11.common.PolicyTopicEvidence.DestinationTextList
 */
export interface PolicyTopicEvidence_DestinationTextList {
    /**
     * List of text found in the resource's destination page.
     *
     * @generated from protobuf field: repeated string destination_texts = 2;
     */
    destinationTexts: string[];
}
/**
 * Evidence of mismatches between the URLs of a resource.
 *
 * @generated from protobuf message google.ads.googleads.v11.common.PolicyTopicEvidence.DestinationMismatch
 */
export interface PolicyTopicEvidence_DestinationMismatch {
    /**
     * The set of URLs that did not match each other.
     *
     * @generated from protobuf field: repeated google.ads.googleads.v11.enums.PolicyTopicEvidenceDestinationMismatchUrlTypeEnum.PolicyTopicEvidenceDestinationMismatchUrlType url_types = 1;
     */
    urlTypes: PolicyTopicEvidenceDestinationMismatchUrlTypeEnum_PolicyTopicEvidenceDestinationMismatchUrlType[];
}
/**
 * Evidence details when the destination is returning an HTTP error
 * code or isn't functional in all locations for commonly used devices.
 *
 * @generated from protobuf message google.ads.googleads.v11.common.PolicyTopicEvidence.DestinationNotWorking
 */
export interface PolicyTopicEvidence_DestinationNotWorking {
    /**
     * The full URL that didn't work.
     *
     * @generated from protobuf field: optional string expanded_url = 7;
     */
    expandedUrl?: string;
    /**
     * The type of device that failed to load the URL.
     *
     * @generated from protobuf field: google.ads.googleads.v11.enums.PolicyTopicEvidenceDestinationNotWorkingDeviceEnum.PolicyTopicEvidenceDestinationNotWorkingDevice device = 4;
     */
    device: PolicyTopicEvidenceDestinationNotWorkingDeviceEnum_PolicyTopicEvidenceDestinationNotWorkingDevice;
    /**
     * The time the URL was last checked.
     * The format is "YYYY-MM-DD HH:MM:SS".
     * Examples: "2018-03-05 09:15:00" or "2018-02-01 14:34:30"
     *
     * @generated from protobuf field: optional string last_checked_date_time = 8;
     */
    lastCheckedDateTime?: string;
    /**
     * @generated from protobuf oneof: reason
     */
    reason: {
        oneofKind: "dnsErrorType";
        /**
         * The type of DNS error.
         *
         * @generated from protobuf field: google.ads.googleads.v11.enums.PolicyTopicEvidenceDestinationNotWorkingDnsErrorTypeEnum.PolicyTopicEvidenceDestinationNotWorkingDnsErrorType dns_error_type = 1;
         */
        dnsErrorType: PolicyTopicEvidenceDestinationNotWorkingDnsErrorTypeEnum_PolicyTopicEvidenceDestinationNotWorkingDnsErrorType;
    } | {
        oneofKind: "httpErrorCode";
        /**
         * The HTTP error code.
         *
         * @generated from protobuf field: int64 http_error_code = 6;
         */
        httpErrorCode: bigint;
    } | {
        oneofKind: undefined;
    };
}
/**
 * Describes the effect on serving that a policy topic entry will have.
 *
 * @generated from protobuf message google.ads.googleads.v11.common.PolicyTopicConstraint
 */
export interface PolicyTopicConstraint {
    /**
     * @generated from protobuf oneof: value
     */
    value: {
        oneofKind: "countryConstraintList";
        /**
         * Countries where the resource cannot serve.
         *
         * @generated from protobuf field: google.ads.googleads.v11.common.PolicyTopicConstraint.CountryConstraintList country_constraint_list = 1;
         */
        countryConstraintList: PolicyTopicConstraint_CountryConstraintList;
    } | {
        oneofKind: "resellerConstraint";
        /**
         * Reseller constraint.
         *
         * @generated from protobuf field: google.ads.googleads.v11.common.PolicyTopicConstraint.ResellerConstraint reseller_constraint = 2;
         */
        resellerConstraint: PolicyTopicConstraint_ResellerConstraint;
    } | {
        oneofKind: "certificateMissingInCountryList";
        /**
         * Countries where a certificate is required for serving.
         *
         * @generated from protobuf field: google.ads.googleads.v11.common.PolicyTopicConstraint.CountryConstraintList certificate_missing_in_country_list = 3;
         */
        certificateMissingInCountryList: PolicyTopicConstraint_CountryConstraintList;
    } | {
        oneofKind: "certificateDomainMismatchInCountryList";
        /**
         * Countries where the resource's domain is not covered by the
         * certificates associated with it.
         *
         * @generated from protobuf field: google.ads.googleads.v11.common.PolicyTopicConstraint.CountryConstraintList certificate_domain_mismatch_in_country_list = 4;
         */
        certificateDomainMismatchInCountryList: PolicyTopicConstraint_CountryConstraintList;
    } | {
        oneofKind: undefined;
    };
}
/**
 * A list of countries where a resource's serving is constrained.
 *
 * @generated from protobuf message google.ads.googleads.v11.common.PolicyTopicConstraint.CountryConstraintList
 */
export interface PolicyTopicConstraint_CountryConstraintList {
    /**
     * Total number of countries targeted by the resource.
     *
     * @generated from protobuf field: optional int32 total_targeted_countries = 3;
     */
    totalTargetedCountries?: number;
    /**
     * Countries in which serving is restricted.
     *
     * @generated from protobuf field: repeated google.ads.googleads.v11.common.PolicyTopicConstraint.CountryConstraint countries = 2;
     */
    countries: PolicyTopicConstraint_CountryConstraint[];
}
/**
 * Indicates that a policy topic was constrained due to disapproval of the
 * website for reseller purposes.
 *
 * @generated from protobuf message google.ads.googleads.v11.common.PolicyTopicConstraint.ResellerConstraint
 */
export interface PolicyTopicConstraint_ResellerConstraint {
}
/**
 * Indicates that a resource's ability to serve in a particular country is
 * constrained.
 *
 * @generated from protobuf message google.ads.googleads.v11.common.PolicyTopicConstraint.CountryConstraint
 */
export interface PolicyTopicConstraint_CountryConstraint {
    /**
     * Geo target constant resource name of the country in which serving is
     * constrained.
     *
     * @generated from protobuf field: optional string country_criterion = 2;
     */
    countryCriterion?: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class PolicyViolationKey$Type extends MessageType<PolicyViolationKey> {
    constructor() {
        super("google.ads.googleads.v11.common.PolicyViolationKey", [
            { no: 3, name: "policy_name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "violating_text", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PolicyViolationKey>): PolicyViolationKey {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PolicyViolationKey>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PolicyViolationKey): PolicyViolationKey {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string policy_name */ 3:
                    message.policyName = reader.string();
                    break;
                case /* optional string violating_text */ 4:
                    message.violatingText = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PolicyViolationKey, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string policy_name = 3; */
        if (message.policyName !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.policyName);
        /* optional string violating_text = 4; */
        if (message.violatingText !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.violatingText);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.common.PolicyViolationKey
 */
export const PolicyViolationKey = new PolicyViolationKey$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PolicyValidationParameter$Type extends MessageType<PolicyValidationParameter> {
    constructor() {
        super("google.ads.googleads.v11.common.PolicyValidationParameter", [
            { no: 3, name: "ignorable_policy_topics", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "exempt_policy_violation_keys", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PolicyViolationKey }
        ]);
    }
    create(value?: PartialMessage<PolicyValidationParameter>): PolicyValidationParameter {
        const message = { ignorablePolicyTopics: [], exemptPolicyViolationKeys: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PolicyValidationParameter>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PolicyValidationParameter): PolicyValidationParameter {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string ignorable_policy_topics */ 3:
                    message.ignorablePolicyTopics.push(reader.string());
                    break;
                case /* repeated google.ads.googleads.v11.common.PolicyViolationKey exempt_policy_violation_keys */ 2:
                    message.exemptPolicyViolationKeys.push(PolicyViolationKey.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PolicyValidationParameter, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string ignorable_policy_topics = 3; */
        for (let i = 0; i < message.ignorablePolicyTopics.length; i++)
            writer.tag(3, WireType.LengthDelimited).string(message.ignorablePolicyTopics[i]);
        /* repeated google.ads.googleads.v11.common.PolicyViolationKey exempt_policy_violation_keys = 2; */
        for (let i = 0; i < message.exemptPolicyViolationKeys.length; i++)
            PolicyViolationKey.internalBinaryWrite(message.exemptPolicyViolationKeys[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.common.PolicyValidationParameter
 */
export const PolicyValidationParameter = new PolicyValidationParameter$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PolicyTopicEntry$Type extends MessageType<PolicyTopicEntry> {
    constructor() {
        super("google.ads.googleads.v11.common.PolicyTopicEntry", [
            { no: 5, name: "topic", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "type", kind: "enum", T: () => ["google.ads.googleads.v11.enums.PolicyTopicEntryTypeEnum.PolicyTopicEntryType", PolicyTopicEntryTypeEnum_PolicyTopicEntryType] },
            { no: 3, name: "evidences", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PolicyTopicEvidence },
            { no: 4, name: "constraints", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PolicyTopicConstraint }
        ]);
    }
    create(value?: PartialMessage<PolicyTopicEntry>): PolicyTopicEntry {
        const message = { type: 0, evidences: [], constraints: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PolicyTopicEntry>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PolicyTopicEntry): PolicyTopicEntry {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string topic */ 5:
                    message.topic = reader.string();
                    break;
                case /* google.ads.googleads.v11.enums.PolicyTopicEntryTypeEnum.PolicyTopicEntryType type */ 2:
                    message.type = reader.int32();
                    break;
                case /* repeated google.ads.googleads.v11.common.PolicyTopicEvidence evidences */ 3:
                    message.evidences.push(PolicyTopicEvidence.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated google.ads.googleads.v11.common.PolicyTopicConstraint constraints */ 4:
                    message.constraints.push(PolicyTopicConstraint.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PolicyTopicEntry, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string topic = 5; */
        if (message.topic !== undefined)
            writer.tag(5, WireType.LengthDelimited).string(message.topic);
        /* google.ads.googleads.v11.enums.PolicyTopicEntryTypeEnum.PolicyTopicEntryType type = 2; */
        if (message.type !== 0)
            writer.tag(2, WireType.Varint).int32(message.type);
        /* repeated google.ads.googleads.v11.common.PolicyTopicEvidence evidences = 3; */
        for (let i = 0; i < message.evidences.length; i++)
            PolicyTopicEvidence.internalBinaryWrite(message.evidences[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated google.ads.googleads.v11.common.PolicyTopicConstraint constraints = 4; */
        for (let i = 0; i < message.constraints.length; i++)
            PolicyTopicConstraint.internalBinaryWrite(message.constraints[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.common.PolicyTopicEntry
 */
export const PolicyTopicEntry = new PolicyTopicEntry$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PolicyTopicEvidence$Type extends MessageType<PolicyTopicEvidence> {
    constructor() {
        super("google.ads.googleads.v11.common.PolicyTopicEvidence", [
            { no: 3, name: "website_list", kind: "message", oneof: "value", T: () => PolicyTopicEvidence_WebsiteList },
            { no: 4, name: "text_list", kind: "message", oneof: "value", T: () => PolicyTopicEvidence_TextList },
            { no: 9, name: "language_code", kind: "scalar", oneof: "value", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "destination_text_list", kind: "message", oneof: "value", T: () => PolicyTopicEvidence_DestinationTextList },
            { no: 7, name: "destination_mismatch", kind: "message", oneof: "value", T: () => PolicyTopicEvidence_DestinationMismatch },
            { no: 8, name: "destination_not_working", kind: "message", oneof: "value", T: () => PolicyTopicEvidence_DestinationNotWorking }
        ]);
    }
    create(value?: PartialMessage<PolicyTopicEvidence>): PolicyTopicEvidence {
        const message = { value: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PolicyTopicEvidence>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PolicyTopicEvidence): PolicyTopicEvidence {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.ads.googleads.v11.common.PolicyTopicEvidence.WebsiteList website_list */ 3:
                    message.value = {
                        oneofKind: "websiteList",
                        websiteList: PolicyTopicEvidence_WebsiteList.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).websiteList)
                    };
                    break;
                case /* google.ads.googleads.v11.common.PolicyTopicEvidence.TextList text_list */ 4:
                    message.value = {
                        oneofKind: "textList",
                        textList: PolicyTopicEvidence_TextList.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).textList)
                    };
                    break;
                case /* string language_code */ 9:
                    message.value = {
                        oneofKind: "languageCode",
                        languageCode: reader.string()
                    };
                    break;
                case /* google.ads.googleads.v11.common.PolicyTopicEvidence.DestinationTextList destination_text_list */ 6:
                    message.value = {
                        oneofKind: "destinationTextList",
                        destinationTextList: PolicyTopicEvidence_DestinationTextList.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).destinationTextList)
                    };
                    break;
                case /* google.ads.googleads.v11.common.PolicyTopicEvidence.DestinationMismatch destination_mismatch */ 7:
                    message.value = {
                        oneofKind: "destinationMismatch",
                        destinationMismatch: PolicyTopicEvidence_DestinationMismatch.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).destinationMismatch)
                    };
                    break;
                case /* google.ads.googleads.v11.common.PolicyTopicEvidence.DestinationNotWorking destination_not_working */ 8:
                    message.value = {
                        oneofKind: "destinationNotWorking",
                        destinationNotWorking: PolicyTopicEvidence_DestinationNotWorking.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).destinationNotWorking)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PolicyTopicEvidence, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.ads.googleads.v11.common.PolicyTopicEvidence.WebsiteList website_list = 3; */
        if (message.value.oneofKind === "websiteList")
            PolicyTopicEvidence_WebsiteList.internalBinaryWrite(message.value.websiteList, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* google.ads.googleads.v11.common.PolicyTopicEvidence.TextList text_list = 4; */
        if (message.value.oneofKind === "textList")
            PolicyTopicEvidence_TextList.internalBinaryWrite(message.value.textList, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* string language_code = 9; */
        if (message.value.oneofKind === "languageCode")
            writer.tag(9, WireType.LengthDelimited).string(message.value.languageCode);
        /* google.ads.googleads.v11.common.PolicyTopicEvidence.DestinationTextList destination_text_list = 6; */
        if (message.value.oneofKind === "destinationTextList")
            PolicyTopicEvidence_DestinationTextList.internalBinaryWrite(message.value.destinationTextList, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* google.ads.googleads.v11.common.PolicyTopicEvidence.DestinationMismatch destination_mismatch = 7; */
        if (message.value.oneofKind === "destinationMismatch")
            PolicyTopicEvidence_DestinationMismatch.internalBinaryWrite(message.value.destinationMismatch, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* google.ads.googleads.v11.common.PolicyTopicEvidence.DestinationNotWorking destination_not_working = 8; */
        if (message.value.oneofKind === "destinationNotWorking")
            PolicyTopicEvidence_DestinationNotWorking.internalBinaryWrite(message.value.destinationNotWorking, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.common.PolicyTopicEvidence
 */
export const PolicyTopicEvidence = new PolicyTopicEvidence$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PolicyTopicEvidence_TextList$Type extends MessageType<PolicyTopicEvidence_TextList> {
    constructor() {
        super("google.ads.googleads.v11.common.PolicyTopicEvidence.TextList", [
            { no: 2, name: "texts", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PolicyTopicEvidence_TextList>): PolicyTopicEvidence_TextList {
        const message = { texts: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PolicyTopicEvidence_TextList>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PolicyTopicEvidence_TextList): PolicyTopicEvidence_TextList {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string texts */ 2:
                    message.texts.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PolicyTopicEvidence_TextList, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string texts = 2; */
        for (let i = 0; i < message.texts.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.texts[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.common.PolicyTopicEvidence.TextList
 */
export const PolicyTopicEvidence_TextList = new PolicyTopicEvidence_TextList$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PolicyTopicEvidence_WebsiteList$Type extends MessageType<PolicyTopicEvidence_WebsiteList> {
    constructor() {
        super("google.ads.googleads.v11.common.PolicyTopicEvidence.WebsiteList", [
            { no: 2, name: "websites", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PolicyTopicEvidence_WebsiteList>): PolicyTopicEvidence_WebsiteList {
        const message = { websites: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PolicyTopicEvidence_WebsiteList>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PolicyTopicEvidence_WebsiteList): PolicyTopicEvidence_WebsiteList {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string websites */ 2:
                    message.websites.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PolicyTopicEvidence_WebsiteList, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string websites = 2; */
        for (let i = 0; i < message.websites.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.websites[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.common.PolicyTopicEvidence.WebsiteList
 */
export const PolicyTopicEvidence_WebsiteList = new PolicyTopicEvidence_WebsiteList$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PolicyTopicEvidence_DestinationTextList$Type extends MessageType<PolicyTopicEvidence_DestinationTextList> {
    constructor() {
        super("google.ads.googleads.v11.common.PolicyTopicEvidence.DestinationTextList", [
            { no: 2, name: "destination_texts", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PolicyTopicEvidence_DestinationTextList>): PolicyTopicEvidence_DestinationTextList {
        const message = { destinationTexts: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PolicyTopicEvidence_DestinationTextList>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PolicyTopicEvidence_DestinationTextList): PolicyTopicEvidence_DestinationTextList {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string destination_texts */ 2:
                    message.destinationTexts.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PolicyTopicEvidence_DestinationTextList, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string destination_texts = 2; */
        for (let i = 0; i < message.destinationTexts.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.destinationTexts[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.common.PolicyTopicEvidence.DestinationTextList
 */
export const PolicyTopicEvidence_DestinationTextList = new PolicyTopicEvidence_DestinationTextList$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PolicyTopicEvidence_DestinationMismatch$Type extends MessageType<PolicyTopicEvidence_DestinationMismatch> {
    constructor() {
        super("google.ads.googleads.v11.common.PolicyTopicEvidence.DestinationMismatch", [
            { no: 1, name: "url_types", kind: "enum", repeat: 1 /*RepeatType.PACKED*/, T: () => ["google.ads.googleads.v11.enums.PolicyTopicEvidenceDestinationMismatchUrlTypeEnum.PolicyTopicEvidenceDestinationMismatchUrlType", PolicyTopicEvidenceDestinationMismatchUrlTypeEnum_PolicyTopicEvidenceDestinationMismatchUrlType] }
        ]);
    }
    create(value?: PartialMessage<PolicyTopicEvidence_DestinationMismatch>): PolicyTopicEvidence_DestinationMismatch {
        const message = { urlTypes: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PolicyTopicEvidence_DestinationMismatch>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PolicyTopicEvidence_DestinationMismatch): PolicyTopicEvidence_DestinationMismatch {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated google.ads.googleads.v11.enums.PolicyTopicEvidenceDestinationMismatchUrlTypeEnum.PolicyTopicEvidenceDestinationMismatchUrlType url_types */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.urlTypes.push(reader.int32());
                    else
                        message.urlTypes.push(reader.int32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PolicyTopicEvidence_DestinationMismatch, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated google.ads.googleads.v11.enums.PolicyTopicEvidenceDestinationMismatchUrlTypeEnum.PolicyTopicEvidenceDestinationMismatchUrlType url_types = 1; */
        if (message.urlTypes.length) {
            writer.tag(1, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.urlTypes.length; i++)
                writer.int32(message.urlTypes[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.common.PolicyTopicEvidence.DestinationMismatch
 */
export const PolicyTopicEvidence_DestinationMismatch = new PolicyTopicEvidence_DestinationMismatch$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PolicyTopicEvidence_DestinationNotWorking$Type extends MessageType<PolicyTopicEvidence_DestinationNotWorking> {
    constructor() {
        super("google.ads.googleads.v11.common.PolicyTopicEvidence.DestinationNotWorking", [
            { no: 7, name: "expanded_url", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "device", kind: "enum", T: () => ["google.ads.googleads.v11.enums.PolicyTopicEvidenceDestinationNotWorkingDeviceEnum.PolicyTopicEvidenceDestinationNotWorkingDevice", PolicyTopicEvidenceDestinationNotWorkingDeviceEnum_PolicyTopicEvidenceDestinationNotWorkingDevice] },
            { no: 8, name: "last_checked_date_time", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 1, name: "dns_error_type", kind: "enum", oneof: "reason", T: () => ["google.ads.googleads.v11.enums.PolicyTopicEvidenceDestinationNotWorkingDnsErrorTypeEnum.PolicyTopicEvidenceDestinationNotWorkingDnsErrorType", PolicyTopicEvidenceDestinationNotWorkingDnsErrorTypeEnum_PolicyTopicEvidenceDestinationNotWorkingDnsErrorType] },
            { no: 6, name: "http_error_code", kind: "scalar", oneof: "reason", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<PolicyTopicEvidence_DestinationNotWorking>): PolicyTopicEvidence_DestinationNotWorking {
        const message = { device: 0, reason: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PolicyTopicEvidence_DestinationNotWorking>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PolicyTopicEvidence_DestinationNotWorking): PolicyTopicEvidence_DestinationNotWorking {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string expanded_url */ 7:
                    message.expandedUrl = reader.string();
                    break;
                case /* google.ads.googleads.v11.enums.PolicyTopicEvidenceDestinationNotWorkingDeviceEnum.PolicyTopicEvidenceDestinationNotWorkingDevice device */ 4:
                    message.device = reader.int32();
                    break;
                case /* optional string last_checked_date_time */ 8:
                    message.lastCheckedDateTime = reader.string();
                    break;
                case /* google.ads.googleads.v11.enums.PolicyTopicEvidenceDestinationNotWorkingDnsErrorTypeEnum.PolicyTopicEvidenceDestinationNotWorkingDnsErrorType dns_error_type */ 1:
                    message.reason = {
                        oneofKind: "dnsErrorType",
                        dnsErrorType: reader.int32()
                    };
                    break;
                case /* int64 http_error_code */ 6:
                    message.reason = {
                        oneofKind: "httpErrorCode",
                        httpErrorCode: reader.int64().toBigInt()
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PolicyTopicEvidence_DestinationNotWorking, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string expanded_url = 7; */
        if (message.expandedUrl !== undefined)
            writer.tag(7, WireType.LengthDelimited).string(message.expandedUrl);
        /* google.ads.googleads.v11.enums.PolicyTopicEvidenceDestinationNotWorkingDeviceEnum.PolicyTopicEvidenceDestinationNotWorkingDevice device = 4; */
        if (message.device !== 0)
            writer.tag(4, WireType.Varint).int32(message.device);
        /* optional string last_checked_date_time = 8; */
        if (message.lastCheckedDateTime !== undefined)
            writer.tag(8, WireType.LengthDelimited).string(message.lastCheckedDateTime);
        /* google.ads.googleads.v11.enums.PolicyTopicEvidenceDestinationNotWorkingDnsErrorTypeEnum.PolicyTopicEvidenceDestinationNotWorkingDnsErrorType dns_error_type = 1; */
        if (message.reason.oneofKind === "dnsErrorType")
            writer.tag(1, WireType.Varint).int32(message.reason.dnsErrorType);
        /* int64 http_error_code = 6; */
        if (message.reason.oneofKind === "httpErrorCode")
            writer.tag(6, WireType.Varint).int64(message.reason.httpErrorCode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.common.PolicyTopicEvidence.DestinationNotWorking
 */
export const PolicyTopicEvidence_DestinationNotWorking = new PolicyTopicEvidence_DestinationNotWorking$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PolicyTopicConstraint$Type extends MessageType<PolicyTopicConstraint> {
    constructor() {
        super("google.ads.googleads.v11.common.PolicyTopicConstraint", [
            { no: 1, name: "country_constraint_list", kind: "message", oneof: "value", T: () => PolicyTopicConstraint_CountryConstraintList },
            { no: 2, name: "reseller_constraint", kind: "message", oneof: "value", T: () => PolicyTopicConstraint_ResellerConstraint },
            { no: 3, name: "certificate_missing_in_country_list", kind: "message", oneof: "value", T: () => PolicyTopicConstraint_CountryConstraintList },
            { no: 4, name: "certificate_domain_mismatch_in_country_list", kind: "message", oneof: "value", T: () => PolicyTopicConstraint_CountryConstraintList }
        ]);
    }
    create(value?: PartialMessage<PolicyTopicConstraint>): PolicyTopicConstraint {
        const message = { value: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PolicyTopicConstraint>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PolicyTopicConstraint): PolicyTopicConstraint {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.ads.googleads.v11.common.PolicyTopicConstraint.CountryConstraintList country_constraint_list */ 1:
                    message.value = {
                        oneofKind: "countryConstraintList",
                        countryConstraintList: PolicyTopicConstraint_CountryConstraintList.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).countryConstraintList)
                    };
                    break;
                case /* google.ads.googleads.v11.common.PolicyTopicConstraint.ResellerConstraint reseller_constraint */ 2:
                    message.value = {
                        oneofKind: "resellerConstraint",
                        resellerConstraint: PolicyTopicConstraint_ResellerConstraint.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).resellerConstraint)
                    };
                    break;
                case /* google.ads.googleads.v11.common.PolicyTopicConstraint.CountryConstraintList certificate_missing_in_country_list */ 3:
                    message.value = {
                        oneofKind: "certificateMissingInCountryList",
                        certificateMissingInCountryList: PolicyTopicConstraint_CountryConstraintList.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).certificateMissingInCountryList)
                    };
                    break;
                case /* google.ads.googleads.v11.common.PolicyTopicConstraint.CountryConstraintList certificate_domain_mismatch_in_country_list */ 4:
                    message.value = {
                        oneofKind: "certificateDomainMismatchInCountryList",
                        certificateDomainMismatchInCountryList: PolicyTopicConstraint_CountryConstraintList.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).certificateDomainMismatchInCountryList)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PolicyTopicConstraint, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.ads.googleads.v11.common.PolicyTopicConstraint.CountryConstraintList country_constraint_list = 1; */
        if (message.value.oneofKind === "countryConstraintList")
            PolicyTopicConstraint_CountryConstraintList.internalBinaryWrite(message.value.countryConstraintList, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* google.ads.googleads.v11.common.PolicyTopicConstraint.ResellerConstraint reseller_constraint = 2; */
        if (message.value.oneofKind === "resellerConstraint")
            PolicyTopicConstraint_ResellerConstraint.internalBinaryWrite(message.value.resellerConstraint, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* google.ads.googleads.v11.common.PolicyTopicConstraint.CountryConstraintList certificate_missing_in_country_list = 3; */
        if (message.value.oneofKind === "certificateMissingInCountryList")
            PolicyTopicConstraint_CountryConstraintList.internalBinaryWrite(message.value.certificateMissingInCountryList, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* google.ads.googleads.v11.common.PolicyTopicConstraint.CountryConstraintList certificate_domain_mismatch_in_country_list = 4; */
        if (message.value.oneofKind === "certificateDomainMismatchInCountryList")
            PolicyTopicConstraint_CountryConstraintList.internalBinaryWrite(message.value.certificateDomainMismatchInCountryList, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.common.PolicyTopicConstraint
 */
export const PolicyTopicConstraint = new PolicyTopicConstraint$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PolicyTopicConstraint_CountryConstraintList$Type extends MessageType<PolicyTopicConstraint_CountryConstraintList> {
    constructor() {
        super("google.ads.googleads.v11.common.PolicyTopicConstraint.CountryConstraintList", [
            { no: 3, name: "total_targeted_countries", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "countries", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PolicyTopicConstraint_CountryConstraint }
        ]);
    }
    create(value?: PartialMessage<PolicyTopicConstraint_CountryConstraintList>): PolicyTopicConstraint_CountryConstraintList {
        const message = { countries: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PolicyTopicConstraint_CountryConstraintList>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PolicyTopicConstraint_CountryConstraintList): PolicyTopicConstraint_CountryConstraintList {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 total_targeted_countries */ 3:
                    message.totalTargetedCountries = reader.int32();
                    break;
                case /* repeated google.ads.googleads.v11.common.PolicyTopicConstraint.CountryConstraint countries */ 2:
                    message.countries.push(PolicyTopicConstraint_CountryConstraint.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PolicyTopicConstraint_CountryConstraintList, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 total_targeted_countries = 3; */
        if (message.totalTargetedCountries !== undefined)
            writer.tag(3, WireType.Varint).int32(message.totalTargetedCountries);
        /* repeated google.ads.googleads.v11.common.PolicyTopicConstraint.CountryConstraint countries = 2; */
        for (let i = 0; i < message.countries.length; i++)
            PolicyTopicConstraint_CountryConstraint.internalBinaryWrite(message.countries[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.common.PolicyTopicConstraint.CountryConstraintList
 */
export const PolicyTopicConstraint_CountryConstraintList = new PolicyTopicConstraint_CountryConstraintList$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PolicyTopicConstraint_ResellerConstraint$Type extends MessageType<PolicyTopicConstraint_ResellerConstraint> {
    constructor() {
        super("google.ads.googleads.v11.common.PolicyTopicConstraint.ResellerConstraint", []);
    }
    create(value?: PartialMessage<PolicyTopicConstraint_ResellerConstraint>): PolicyTopicConstraint_ResellerConstraint {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PolicyTopicConstraint_ResellerConstraint>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PolicyTopicConstraint_ResellerConstraint): PolicyTopicConstraint_ResellerConstraint {
        return target ?? this.create();
    }
    internalBinaryWrite(message: PolicyTopicConstraint_ResellerConstraint, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.common.PolicyTopicConstraint.ResellerConstraint
 */
export const PolicyTopicConstraint_ResellerConstraint = new PolicyTopicConstraint_ResellerConstraint$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PolicyTopicConstraint_CountryConstraint$Type extends MessageType<PolicyTopicConstraint_CountryConstraint> {
    constructor() {
        super("google.ads.googleads.v11.common.PolicyTopicConstraint.CountryConstraint", [
            { no: 2, name: "country_criterion", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PolicyTopicConstraint_CountryConstraint>): PolicyTopicConstraint_CountryConstraint {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PolicyTopicConstraint_CountryConstraint>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PolicyTopicConstraint_CountryConstraint): PolicyTopicConstraint_CountryConstraint {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string country_criterion */ 2:
                    message.countryCriterion = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PolicyTopicConstraint_CountryConstraint, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string country_criterion = 2; */
        if (message.countryCriterion !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.countryCriterion);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.common.PolicyTopicConstraint.CountryConstraint
 */
export const PolicyTopicConstraint_CountryConstraint = new PolicyTopicConstraint_CountryConstraint$Type();
