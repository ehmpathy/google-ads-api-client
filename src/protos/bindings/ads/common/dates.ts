// @generated by protobuf-ts 2.8.1
// @generated from protobuf file "ads/common/dates.proto" (package "google.ads.googleads.v11.common", syntax proto3)
// tslint:disable
//
// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { MonthOfYearEnum_MonthOfYear } from "../enums/month_of_year";
// Proto file describing date range message.

/**
 * A date range.
 *
 * @generated from protobuf message google.ads.googleads.v11.common.DateRange
 */
export interface DateRange {
    /**
     * The start date, in yyyy-mm-dd format. This date is inclusive.
     *
     * @generated from protobuf field: optional string start_date = 3;
     */
    startDate?: string;
    /**
     * The end date, in yyyy-mm-dd format. This date is inclusive.
     *
     * @generated from protobuf field: optional string end_date = 4;
     */
    endDate?: string;
}
/**
 * The year month range inclusive of the start and end months.
 * Eg: A year month range to represent Jan 2020 would be: (Jan 2020, Jan 2020).
 *
 * @generated from protobuf message google.ads.googleads.v11.common.YearMonthRange
 */
export interface YearMonthRange {
    /**
     * The inclusive start year month.
     *
     * @generated from protobuf field: google.ads.googleads.v11.common.YearMonth start = 1;
     */
    start?: YearMonth;
    /**
     * The inclusive end year month.
     *
     * @generated from protobuf field: google.ads.googleads.v11.common.YearMonth end = 2;
     */
    end?: YearMonth;
}
/**
 * Year month.
 *
 * @generated from protobuf message google.ads.googleads.v11.common.YearMonth
 */
export interface YearMonth {
    /**
     * The year (for example, 2020).
     *
     * @generated from protobuf field: int64 year = 1;
     */
    year: bigint;
    /**
     * The month of the year. (for example, FEBRUARY).
     *
     * @generated from protobuf field: google.ads.googleads.v11.enums.MonthOfYearEnum.MonthOfYear month = 2;
     */
    month: MonthOfYearEnum_MonthOfYear;
}
// @generated message type with reflection information, may provide speed optimized methods
class DateRange$Type extends MessageType<DateRange> {
    constructor() {
        super("google.ads.googleads.v11.common.DateRange", [
            { no: 3, name: "start_date", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "end_date", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DateRange>): DateRange {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DateRange>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DateRange): DateRange {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string start_date */ 3:
                    message.startDate = reader.string();
                    break;
                case /* optional string end_date */ 4:
                    message.endDate = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DateRange, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string start_date = 3; */
        if (message.startDate !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.startDate);
        /* optional string end_date = 4; */
        if (message.endDate !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.endDate);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.common.DateRange
 */
export const DateRange = new DateRange$Type();
// @generated message type with reflection information, may provide speed optimized methods
class YearMonthRange$Type extends MessageType<YearMonthRange> {
    constructor() {
        super("google.ads.googleads.v11.common.YearMonthRange", [
            { no: 1, name: "start", kind: "message", T: () => YearMonth },
            { no: 2, name: "end", kind: "message", T: () => YearMonth }
        ]);
    }
    create(value?: PartialMessage<YearMonthRange>): YearMonthRange {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<YearMonthRange>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: YearMonthRange): YearMonthRange {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.ads.googleads.v11.common.YearMonth start */ 1:
                    message.start = YearMonth.internalBinaryRead(reader, reader.uint32(), options, message.start);
                    break;
                case /* google.ads.googleads.v11.common.YearMonth end */ 2:
                    message.end = YearMonth.internalBinaryRead(reader, reader.uint32(), options, message.end);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: YearMonthRange, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.ads.googleads.v11.common.YearMonth start = 1; */
        if (message.start)
            YearMonth.internalBinaryWrite(message.start, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* google.ads.googleads.v11.common.YearMonth end = 2; */
        if (message.end)
            YearMonth.internalBinaryWrite(message.end, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.common.YearMonthRange
 */
export const YearMonthRange = new YearMonthRange$Type();
// @generated message type with reflection information, may provide speed optimized methods
class YearMonth$Type extends MessageType<YearMonth> {
    constructor() {
        super("google.ads.googleads.v11.common.YearMonth", [
            { no: 1, name: "year", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "month", kind: "enum", T: () => ["google.ads.googleads.v11.enums.MonthOfYearEnum.MonthOfYear", MonthOfYearEnum_MonthOfYear] }
        ]);
    }
    create(value?: PartialMessage<YearMonth>): YearMonth {
        const message = { year: 0n, month: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<YearMonth>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: YearMonth): YearMonth {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 year */ 1:
                    message.year = reader.int64().toBigInt();
                    break;
                case /* google.ads.googleads.v11.enums.MonthOfYearEnum.MonthOfYear month */ 2:
                    message.month = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: YearMonth, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 year = 1; */
        if (message.year !== 0n)
            writer.tag(1, WireType.Varint).int64(message.year);
        /* google.ads.googleads.v11.enums.MonthOfYearEnum.MonthOfYear month = 2; */
        if (message.month !== 0)
            writer.tag(2, WireType.Varint).int32(message.month);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.common.YearMonth
 */
export const YearMonth = new YearMonth$Type();
