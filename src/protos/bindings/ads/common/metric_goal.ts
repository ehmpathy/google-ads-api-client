// @generated by protobuf-ts 2.8.1
// @generated from protobuf file "ads/common/metric_goal.proto" (package "google.ads.googleads.v11.common", syntax proto3)
// tslint:disable
//
// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { ExperimentMetricDirectionEnum_ExperimentMetricDirection } from "../enums/experiment_metric_direction";
import { ExperimentMetricEnum_ExperimentMetric } from "../enums/experiment_metric";
// Proto file describing experiment metric goal.

/**
 * A metric goal for an experiment.
 *
 * @generated from protobuf message google.ads.googleads.v11.common.MetricGoal
 */
export interface MetricGoal {
    /**
     * The metric of the goal. For example, clicks, impressions, cost,
     * conversions, etc.
     *
     * @generated from protobuf field: google.ads.googleads.v11.enums.ExperimentMetricEnum.ExperimentMetric metric = 1;
     */
    metric: ExperimentMetricEnum_ExperimentMetric;
    /**
     * The metric direction of the goal. For example, increase, decrease, no
     * change.
     *
     * @generated from protobuf field: google.ads.googleads.v11.enums.ExperimentMetricDirectionEnum.ExperimentMetricDirection direction = 2;
     */
    direction: ExperimentMetricDirectionEnum_ExperimentMetricDirection;
}
// @generated message type with reflection information, may provide speed optimized methods
class MetricGoal$Type extends MessageType<MetricGoal> {
    constructor() {
        super("google.ads.googleads.v11.common.MetricGoal", [
            { no: 1, name: "metric", kind: "enum", T: () => ["google.ads.googleads.v11.enums.ExperimentMetricEnum.ExperimentMetric", ExperimentMetricEnum_ExperimentMetric] },
            { no: 2, name: "direction", kind: "enum", T: () => ["google.ads.googleads.v11.enums.ExperimentMetricDirectionEnum.ExperimentMetricDirection", ExperimentMetricDirectionEnum_ExperimentMetricDirection] }
        ]);
    }
    create(value?: PartialMessage<MetricGoal>): MetricGoal {
        const message = { metric: 0, direction: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MetricGoal>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MetricGoal): MetricGoal {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.ads.googleads.v11.enums.ExperimentMetricEnum.ExperimentMetric metric */ 1:
                    message.metric = reader.int32();
                    break;
                case /* google.ads.googleads.v11.enums.ExperimentMetricDirectionEnum.ExperimentMetricDirection direction */ 2:
                    message.direction = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MetricGoal, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.ads.googleads.v11.enums.ExperimentMetricEnum.ExperimentMetric metric = 1; */
        if (message.metric !== 0)
            writer.tag(1, WireType.Varint).int32(message.metric);
        /* google.ads.googleads.v11.enums.ExperimentMetricDirectionEnum.ExperimentMetricDirection direction = 2; */
        if (message.direction !== 0)
            writer.tag(2, WireType.Varint).int32(message.direction);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.common.MetricGoal
 */
export const MetricGoal = new MetricGoal$Type();
