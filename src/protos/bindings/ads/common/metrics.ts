// @generated by protobuf-ts 2.8.1
// @generated from protobuf file "ads/common/metrics.proto" (package "google.ads.googleads.v11.common", syntax proto3)
// tslint:disable
//
// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { InteractionEventTypeEnum_InteractionEventType } from "../enums/interaction_event_type";
import { QualityScoreBucketEnum_QualityScoreBucket } from "../enums/quality_score_bucket";
// Proto file describing metrics.

/**
 * Metrics data.
 *
 * @generated from protobuf message google.ads.googleads.v11.common.Metrics
 */
export interface Metrics {
    /**
     * The percent of your ad impressions that are shown as the very first ad
     * above the organic search results.
     *
     * @generated from protobuf field: optional double absolute_top_impression_percentage = 183;
     */
    absoluteTopImpressionPercentage?: number;
    /**
     * Average cost of viewable impressions (`active_view_impressions`).
     *
     * @generated from protobuf field: optional double active_view_cpm = 184;
     */
    activeViewCpm?: number;
    /**
     * Active view measurable clicks divided by active view viewable impressions.
     * This metric is reported only for display network.
     *
     * @generated from protobuf field: optional double active_view_ctr = 185;
     */
    activeViewCtr?: number;
    /**
     * A measurement of how often your ad has become viewable on a Display
     * Network site.
     *
     * @generated from protobuf field: optional int64 active_view_impressions = 186;
     */
    activeViewImpressions?: bigint;
    /**
     * The ratio of impressions that could be measured by Active View over the
     * number of served impressions.
     *
     * @generated from protobuf field: optional double active_view_measurability = 187;
     */
    activeViewMeasurability?: number;
    /**
     * The cost of the impressions you received that were measurable by Active
     * View.
     *
     * @generated from protobuf field: optional int64 active_view_measurable_cost_micros = 188;
     */
    activeViewMeasurableCostMicros?: bigint;
    /**
     * The number of times your ads are appearing on placements in positions
     * where they can be seen.
     *
     * @generated from protobuf field: optional int64 active_view_measurable_impressions = 189;
     */
    activeViewMeasurableImpressions?: bigint;
    /**
     * The percentage of time when your ad appeared on an Active View enabled site
     * (measurable impressions) and was viewable (viewable impressions).
     *
     * @generated from protobuf field: optional double active_view_viewability = 190;
     */
    activeViewViewability?: number;
    /**
     * All conversions from interactions (as oppose to view through conversions)
     * divided by the number of ad interactions.
     *
     * @generated from protobuf field: optional double all_conversions_from_interactions_rate = 191;
     */
    allConversionsFromInteractionsRate?: number;
    /**
     * The value of all conversions.
     *
     * @generated from protobuf field: optional double all_conversions_value = 192;
     */
    allConversionsValue?: number;
    /**
     * The value of all conversions. When this column is selected with date, the
     * values in date column means the conversion date. Details for the
     * by_conversion_date columns are available at
     * https://support.google.com/google-ads/answer/9549009.
     *
     * @generated from protobuf field: double all_conversions_value_by_conversion_date = 240;
     */
    allConversionsValueByConversionDate: number;
    /**
     * The total number of conversions. This includes all conversions regardless
     * of the value of include_in_conversions_metric.
     *
     * @generated from protobuf field: optional double all_conversions = 193;
     */
    allConversions?: number;
    /**
     * The total number of conversions. This includes all conversions regardless
     * of the value of include_in_conversions_metric. When this column is selected
     * with date, the values in date column means the conversion date. Details for
     * the by_conversion_date columns are available at
     * https://support.google.com/google-ads/answer/9549009.
     *
     * @generated from protobuf field: double all_conversions_by_conversion_date = 241;
     */
    allConversionsByConversionDate: number;
    /**
     * The value of all conversions divided by the total cost of ad interactions
     * (such as clicks for text ads or views for video ads).
     *
     * @generated from protobuf field: optional double all_conversions_value_per_cost = 194;
     */
    allConversionsValuePerCost?: number;
    /**
     * The number of times people clicked the "Call" button to call a store during
     * or after clicking an ad. This number doesn't include whether or not calls
     * were connected, or the duration of any calls.
     * This metric applies to feed items only.
     *
     * @generated from protobuf field: optional double all_conversions_from_click_to_call = 195;
     */
    allConversionsFromClickToCall?: number;
    /**
     * The number of times people clicked a "Get directions" button to navigate to
     * a store after clicking an ad.
     * This metric applies to feed items only.
     *
     * @generated from protobuf field: optional double all_conversions_from_directions = 196;
     */
    allConversionsFromDirections?: number;
    /**
     * The value of all conversions from interactions divided by the total number
     * of interactions.
     *
     * @generated from protobuf field: optional double all_conversions_from_interactions_value_per_interaction = 197;
     */
    allConversionsFromInteractionsValuePerInteraction?: number;
    /**
     * The number of times people clicked a link to view a store's menu after
     * clicking an ad.
     * This metric applies to feed items only.
     *
     * @generated from protobuf field: optional double all_conversions_from_menu = 198;
     */
    allConversionsFromMenu?: number;
    /**
     * The number of times people placed an order at a store after clicking an ad.
     * This metric applies to feed items only.
     *
     * @generated from protobuf field: optional double all_conversions_from_order = 199;
     */
    allConversionsFromOrder?: number;
    /**
     * The number of other conversions (for example, posting a review or saving a
     * location for a store) that occurred after people clicked an ad.
     * This metric applies to feed items only.
     *
     * @generated from protobuf field: optional double all_conversions_from_other_engagement = 200;
     */
    allConversionsFromOtherEngagement?: number;
    /**
     * Estimated number of times people visited a store after clicking an ad.
     * This metric applies to feed items only.
     *
     * @generated from protobuf field: optional double all_conversions_from_store_visit = 201;
     */
    allConversionsFromStoreVisit?: number;
    /**
     * The number of times that people were taken to a store's URL after clicking
     * an ad.
     * This metric applies to feed items only.
     *
     * @generated from protobuf field: optional double all_conversions_from_store_website = 202;
     */
    allConversionsFromStoreWebsite?: number;
    /**
     * This metric is part of the Auction Insights report, and tells how often
     * the ads of another participant showed as the very first ad above the
     * organic search results.
     * This percentage is computed only over the auctions that you appeared in
     * the page.
     * This metric is not publicly available.
     *
     * @generated from protobuf field: optional double auction_insight_search_absolute_top_impression_percentage = 258;
     */
    auctionInsightSearchAbsoluteTopImpressionPercentage?: number;
    /**
     * This metric is part of the Auction Insights report, and tells the
     * percentage of impressions that another participant obtained, over the total
     * number of impressions that your ads were eligible for.
     * Any value below 0.1 is reported as 0.0999.
     * This metric is not publicly available.
     *
     * @generated from protobuf field: optional double auction_insight_search_impression_share = 259;
     */
    auctionInsightSearchImpressionShare?: number;
    /**
     * This metric is part of the Auction Insights report, and tells the
     * percentage of impressions that your ads outranked (showed above)
     * another participant in the auction, compared to the total number of
     * impressions that your ads were eligible for.
     * Any value below 0.1 is reported as 0.0999.
     * This metric is not publicly available.
     *
     * @generated from protobuf field: optional double auction_insight_search_outranking_share = 260;
     */
    auctionInsightSearchOutrankingShare?: number;
    /**
     * This metric is part of the Auction Insights report, and tells how often
     * another participant's ad received an impression when your ad also received
     * an impression.
     * This metric is not publicly available.
     *
     * @generated from protobuf field: optional double auction_insight_search_overlap_rate = 261;
     */
    auctionInsightSearchOverlapRate?: number;
    /**
     * This metric is part of the Auction Insights report, and tells how often
     * another participant's ad was shown in a higher position than yours, when
     * both of your ads were shown at the same page.
     * This metric is not publicly available.
     *
     * @generated from protobuf field: optional double auction_insight_search_position_above_rate = 262;
     */
    auctionInsightSearchPositionAboveRate?: number;
    /**
     * This metric is part of the Auction Insights report, and tells how often
     * the ads of another participant showed above the organic search results.
     * This percentage is computed only over the auctions that you appeared in
     * the page.
     * This metric is not publicly available.
     *
     * @generated from protobuf field: optional double auction_insight_search_top_impression_percentage = 263;
     */
    auctionInsightSearchTopImpressionPercentage?: number;
    /**
     * The average amount you pay per interaction. This amount is the total cost
     * of your ads divided by the total number of interactions.
     *
     * @generated from protobuf field: optional double average_cost = 203;
     */
    averageCost?: number;
    /**
     * The total cost of all clicks divided by the total number of clicks
     * received.
     *
     * @generated from protobuf field: optional double average_cpc = 204;
     */
    averageCpc?: number;
    /**
     * The average amount that you've been charged for an ad engagement. This
     * amount is the total cost of all ad engagements divided by the total number
     * of ad engagements.
     *
     * @generated from protobuf field: optional double average_cpe = 205;
     */
    averageCpe?: number;
    /**
     * Average cost-per-thousand impressions (CPM).
     *
     * @generated from protobuf field: optional double average_cpm = 206;
     */
    averageCpm?: number;
    /**
     * The average amount you pay each time someone views your ad.
     * The average CPV is defined by the total cost of all ad views divided by
     * the number of views.
     *
     * @generated from protobuf field: optional double average_cpv = 207;
     */
    averageCpv?: number;
    /**
     * Average number of pages viewed per session.
     *
     * @generated from protobuf field: optional double average_page_views = 208;
     */
    averagePageViews?: number;
    /**
     * Total duration of all sessions (in seconds) / number of sessions. Imported
     * from Google Analytics.
     *
     * @generated from protobuf field: optional double average_time_on_site = 209;
     */
    averageTimeOnSite?: number;
    /**
     * An indication of how other advertisers are bidding on similar products.
     *
     * @generated from protobuf field: optional double benchmark_average_max_cpc = 210;
     */
    benchmarkAverageMaxCpc?: number;
    /**
     * Number of app installs.
     *
     * @generated from protobuf field: optional double biddable_app_install_conversions = 254;
     */
    biddableAppInstallConversions?: number;
    /**
     * Number of in-app actions.
     *
     * @generated from protobuf field: optional double biddable_app_post_install_conversions = 255;
     */
    biddableAppPostInstallConversions?: number;
    /**
     * An indication on how other advertisers' Shopping ads for similar products
     * are performing based on how often people who see their ad click on it.
     *
     * @generated from protobuf field: optional double benchmark_ctr = 211;
     */
    benchmarkCtr?: number;
    /**
     * Percentage of clicks where the user only visited a single page on your
     * site. Imported from Google Analytics.
     *
     * @generated from protobuf field: optional double bounce_rate = 212;
     */
    bounceRate?: number;
    /**
     * The number of clicks.
     *
     * @generated from protobuf field: optional int64 clicks = 131;
     */
    clicks?: bigint;
    /**
     * The number of times your ad or your site's listing in the unpaid
     * results was clicked. See the help page at
     * https://support.google.com/google-ads/answer/3097241 for details.
     *
     * @generated from protobuf field: optional int64 combined_clicks = 156;
     */
    combinedClicks?: bigint;
    /**
     * The number of times your ad or your site's listing in the unpaid
     * results was clicked (combined_clicks) divided by combined_queries. See the
     * help page at https://support.google.com/google-ads/answer/3097241 for
     * details.
     *
     * @generated from protobuf field: optional double combined_clicks_per_query = 157;
     */
    combinedClicksPerQuery?: number;
    /**
     * The number of searches that returned pages from your site in the unpaid
     * results or showed one of your text ads. See the help page at
     * https://support.google.com/google-ads/answer/3097241 for details.
     *
     * @generated from protobuf field: optional int64 combined_queries = 158;
     */
    combinedQueries?: bigint;
    /**
     * The estimated percent of times that your ad was eligible to show
     * on the Display Network but didn't because your budget was too low.
     * Note: Content budget lost impression share is reported in the range of 0
     * to 0.9. Any value above 0.9 is reported as 0.9001.
     *
     * @generated from protobuf field: optional double content_budget_lost_impression_share = 159;
     */
    contentBudgetLostImpressionShare?: number;
    /**
     * The impressions you've received on the Display Network divided
     * by the estimated number of impressions you were eligible to receive.
     * Note: Content impression share is reported in the range of 0.1 to 1. Any
     * value below 0.1 is reported as 0.0999.
     *
     * @generated from protobuf field: optional double content_impression_share = 160;
     */
    contentImpressionShare?: number;
    /**
     * The last date/time a conversion tag for this conversion action successfully
     * fired and was seen by Google Ads. This firing event may not have been the
     * result of an attributable conversion (for example, because the tag was
     * fired from a browser that did not previously click an ad from an
     * appropriate advertiser). The date/time is in the customer's time zone.
     *
     * @generated from protobuf field: optional string conversion_last_received_request_date_time = 161;
     */
    conversionLastReceivedRequestDateTime?: string;
    /**
     * The date of the most recent conversion for this conversion action. The date
     * is in the customer's time zone.
     *
     * @generated from protobuf field: optional string conversion_last_conversion_date = 162;
     */
    conversionLastConversionDate?: string;
    /**
     * The estimated percentage of impressions on the Display Network
     * that your ads didn't receive due to poor Ad Rank.
     * Note: Content rank lost impression share is reported in the range of 0
     * to 0.9. Any value above 0.9 is reported as 0.9001.
     *
     * @generated from protobuf field: optional double content_rank_lost_impression_share = 163;
     */
    contentRankLostImpressionShare?: number;
    /**
     * Conversions from interactions divided by the number of ad interactions
     * (such as clicks for text ads or views for video ads). This only includes
     * conversion actions which include_in_conversions_metric attribute is set to
     * true. If you use conversion-based bidding, your bid strategies will
     * optimize for these conversions.
     *
     * @generated from protobuf field: optional double conversions_from_interactions_rate = 164;
     */
    conversionsFromInteractionsRate?: number;
    /**
     * The value of conversions. This only includes conversion actions which
     * include_in_conversions_metric attribute is set to true. If you use
     * conversion-based bidding, your bid strategies will optimize for these
     * conversions.
     *
     * @generated from protobuf field: optional double conversions_value = 165;
     */
    conversionsValue?: number;
    /**
     * The value of conversions. This only includes conversion actions which
     * include_in_conversions_metric attribute is set to true. If you use
     * conversion-based bidding, your bid strategies will optimize for these
     * conversions. When this column is selected with date, the values in date
     * column means the conversion date. Details for the by_conversion_date
     * columns are available at
     * https://support.google.com/google-ads/answer/9549009.
     *
     * @generated from protobuf field: double conversions_value_by_conversion_date = 242;
     */
    conversionsValueByConversionDate: number;
    /**
     * The value of conversions divided by the cost of ad interactions. This only
     * includes conversion actions which include_in_conversions_metric attribute
     * is set to true. If you use conversion-based bidding, your bid strategies
     * will optimize for these conversions.
     *
     * @generated from protobuf field: optional double conversions_value_per_cost = 166;
     */
    conversionsValuePerCost?: number;
    /**
     * The value of conversions from interactions divided by the number of ad
     * interactions. This only includes conversion actions which
     * include_in_conversions_metric attribute is set to true. If you use
     * conversion-based bidding, your bid strategies will optimize for these
     * conversions.
     *
     * @generated from protobuf field: optional double conversions_from_interactions_value_per_interaction = 167;
     */
    conversionsFromInteractionsValuePerInteraction?: number;
    /**
     * The number of conversions. This only includes conversion actions which
     * include_in_conversions_metric attribute is set to true. If you use
     * conversion-based bidding, your bid strategies will optimize for these
     * conversions.
     *
     * @generated from protobuf field: optional double conversions = 168;
     */
    conversions?: number;
    /**
     * The number of conversions. This only includes conversion actions which
     * include_in_conversions_metric attribute is set to true. If you use
     * conversion-based bidding, your bid strategies will optimize for these
     * conversions. When this column is selected with date, the values in date
     * column means the conversion date. Details for the by_conversion_date
     * columns are available at
     * https://support.google.com/google-ads/answer/9549009.
     *
     * @generated from protobuf field: double conversions_by_conversion_date = 243;
     */
    conversionsByConversionDate: number;
    /**
     * The sum of your cost-per-click (CPC) and cost-per-thousand impressions
     * (CPM) costs during this period.
     *
     * @generated from protobuf field: optional int64 cost_micros = 169;
     */
    costMicros?: bigint;
    /**
     * The cost of ad interactions divided by all conversions.
     *
     * @generated from protobuf field: optional double cost_per_all_conversions = 170;
     */
    costPerAllConversions?: number;
    /**
     * The cost of ad interactions divided by conversions. This only includes
     * conversion actions which include_in_conversions_metric attribute is set to
     * true. If you use conversion-based bidding, your bid strategies will
     * optimize for these conversions.
     *
     * @generated from protobuf field: optional double cost_per_conversion = 171;
     */
    costPerConversion?: number;
    /**
     * The cost of ad interactions divided by current model attributed
     * conversions. This only includes conversion actions which
     * include_in_conversions_metric attribute is set to true. If you use
     * conversion-based bidding, your bid strategies will optimize for these
     * conversions.
     *
     * @generated from protobuf field: optional double cost_per_current_model_attributed_conversion = 172;
     */
    costPerCurrentModelAttributedConversion?: number;
    /**
     * Conversions from when a customer clicks on a Google Ads ad on one device,
     * then converts on a different device or browser.
     * Cross-device conversions are already included in all_conversions.
     *
     * @generated from protobuf field: optional double cross_device_conversions = 173;
     */
    crossDeviceConversions?: number;
    /**
     * The number of clicks your ad receives (Clicks) divided by the number
     * of times your ad is shown (Impressions).
     *
     * @generated from protobuf field: optional double ctr = 174;
     */
    ctr?: number;
    /**
     * Shows how your historic conversions data would look under the attribution
     * model you've currently selected. This only includes conversion actions
     * which include_in_conversions_metric attribute is set to true. If you use
     * conversion-based bidding, your bid strategies will optimize for these
     * conversions.
     *
     * @generated from protobuf field: optional double current_model_attributed_conversions = 175;
     */
    currentModelAttributedConversions?: number;
    /**
     * Current model attributed conversions from interactions divided by the
     * number of ad interactions (such as clicks for text ads or views for video
     * ads). This only includes conversion actions which
     * include_in_conversions_metric attribute is set to true. If you use
     * conversion-based bidding, your bid strategies will optimize for these
     * conversions.
     *
     * @generated from protobuf field: optional double current_model_attributed_conversions_from_interactions_rate = 176;
     */
    currentModelAttributedConversionsFromInteractionsRate?: number;
    /**
     * The value of current model attributed conversions from interactions divided
     * by the number of ad interactions. This only includes conversion actions
     * which include_in_conversions_metric attribute is set to true. If you use
     * conversion-based bidding, your bid strategies will optimize for these
     * conversions.
     *
     * @generated from protobuf field: optional double current_model_attributed_conversions_from_interactions_value_per_interaction = 177;
     */
    currentModelAttributedConversionsFromInteractionsValuePerInteraction?: number;
    /**
     * The value of current model attributed conversions. This only includes
     * conversion actions which include_in_conversions_metric attribute is set to
     * true. If you use conversion-based bidding, your bid strategies will
     * optimize for these conversions.
     *
     * @generated from protobuf field: optional double current_model_attributed_conversions_value = 178;
     */
    currentModelAttributedConversionsValue?: number;
    /**
     * The value of current model attributed conversions divided by the cost of ad
     * interactions. This only includes conversion actions which
     * include_in_conversions_metric attribute is set to true. If you use
     * conversion-based bidding, your bid strategies will optimize for these
     * conversions.
     *
     * @generated from protobuf field: optional double current_model_attributed_conversions_value_per_cost = 179;
     */
    currentModelAttributedConversionsValuePerCost?: number;
    /**
     * How often people engage with your ad after it's shown to them. This is the
     * number of ad expansions divided by the number of times your ad is shown.
     *
     * @generated from protobuf field: optional double engagement_rate = 180;
     */
    engagementRate?: number;
    /**
     * The number of engagements.
     * An engagement occurs when a viewer expands your Lightbox ad. Also, in the
     * future, other ad types may support engagement metrics.
     *
     * @generated from protobuf field: optional int64 engagements = 181;
     */
    engagements?: bigint;
    /**
     * Average lead value based on clicks.
     *
     * @generated from protobuf field: optional double hotel_average_lead_value_micros = 213;
     */
    hotelAverageLeadValueMicros?: number;
    /**
     * Commission bid rate in micros. A 20% commission is represented as
     * 200,000.
     *
     * @generated from protobuf field: optional int64 hotel_commission_rate_micros = 256;
     */
    hotelCommissionRateMicros?: bigint;
    /**
     * Expected commission cost. The result of multiplying the commission value
     * times the hotel_commission_rate in advertiser currency.
     *
     * @generated from protobuf field: optional double hotel_expected_commission_cost = 257;
     */
    hotelExpectedCommissionCost?: number;
    /**
     * The average price difference between the price offered by reporting hotel
     * advertiser and the cheapest price offered by the competing advertiser.
     *
     * @generated from protobuf field: optional double hotel_price_difference_percentage = 214;
     */
    hotelPriceDifferencePercentage?: number;
    /**
     * The number of impressions that hotel partners could have had given their
     * feed performance.
     *
     * @generated from protobuf field: optional int64 hotel_eligible_impressions = 215;
     */
    hotelEligibleImpressions?: bigint;
    /**
     * The creative historical quality score.
     *
     * @generated from protobuf field: google.ads.googleads.v11.enums.QualityScoreBucketEnum.QualityScoreBucket historical_creative_quality_score = 80;
     */
    historicalCreativeQualityScore: QualityScoreBucketEnum_QualityScoreBucket;
    /**
     * The quality of historical landing page experience.
     *
     * @generated from protobuf field: google.ads.googleads.v11.enums.QualityScoreBucketEnum.QualityScoreBucket historical_landing_page_quality_score = 81;
     */
    historicalLandingPageQualityScore: QualityScoreBucketEnum_QualityScoreBucket;
    /**
     * The historical quality score.
     *
     * @generated from protobuf field: optional int64 historical_quality_score = 216;
     */
    historicalQualityScore?: bigint;
    /**
     * The historical search predicted click through rate (CTR).
     *
     * @generated from protobuf field: google.ads.googleads.v11.enums.QualityScoreBucketEnum.QualityScoreBucket historical_search_predicted_ctr = 83;
     */
    historicalSearchPredictedCtr: QualityScoreBucketEnum_QualityScoreBucket;
    /**
     * The number of times the ad was forwarded to someone else as a message.
     *
     * @generated from protobuf field: optional int64 gmail_forwards = 217;
     */
    gmailForwards?: bigint;
    /**
     * The number of times someone has saved your Gmail ad to their inbox as a
     * message.
     *
     * @generated from protobuf field: optional int64 gmail_saves = 218;
     */
    gmailSaves?: bigint;
    /**
     * The number of clicks to the landing page on the expanded state of Gmail
     * ads.
     *
     * @generated from protobuf field: optional int64 gmail_secondary_clicks = 219;
     */
    gmailSecondaryClicks?: bigint;
    /**
     * The number of times a store's location-based ad was shown.
     * This metric applies to feed items only.
     *
     * @generated from protobuf field: optional int64 impressions_from_store_reach = 220;
     */
    impressionsFromStoreReach?: bigint;
    /**
     * Count of how often your ad has appeared on a search results page or
     * website on the Google Network.
     *
     * @generated from protobuf field: optional int64 impressions = 221;
     */
    impressions?: bigint;
    /**
     * How often people interact with your ad after it is shown to them.
     * This is the number of interactions divided by the number of times your ad
     * is shown.
     *
     * @generated from protobuf field: optional double interaction_rate = 222;
     */
    interactionRate?: number;
    /**
     * The number of interactions.
     * An interaction is the main user action associated with an ad format-clicks
     * for text and shopping ads, views for video ads, and so on.
     *
     * @generated from protobuf field: optional int64 interactions = 223;
     */
    interactions?: bigint;
    /**
     * The types of payable and free interactions.
     *
     * @generated from protobuf field: repeated google.ads.googleads.v11.enums.InteractionEventTypeEnum.InteractionEventType interaction_event_types = 100;
     */
    interactionEventTypes: InteractionEventTypeEnum_InteractionEventType[];
    /**
     * The percentage of clicks filtered out of your total number of clicks
     * (filtered + non-filtered clicks) during the reporting period.
     *
     * @generated from protobuf field: optional double invalid_click_rate = 224;
     */
    invalidClickRate?: number;
    /**
     * Number of clicks Google considers illegitimate and doesn't charge you for.
     *
     * @generated from protobuf field: optional int64 invalid_clicks = 225;
     */
    invalidClicks?: bigint;
    /**
     * Number of message chats initiated for Click To Message impressions that
     * were message tracking eligible.
     *
     * @generated from protobuf field: optional int64 message_chats = 226;
     */
    messageChats?: bigint;
    /**
     * Number of Click To Message impressions that were message tracking eligible.
     *
     * @generated from protobuf field: optional int64 message_impressions = 227;
     */
    messageImpressions?: bigint;
    /**
     * Number of message chats initiated (message_chats) divided by the number
     * of message impressions (message_impressions).
     * Rate at which a user initiates a message chat from an ad impression with
     * a messaging option and message tracking enabled.
     * Note that this rate can be more than 1.0 for a given message impression.
     *
     * @generated from protobuf field: optional double message_chat_rate = 228;
     */
    messageChatRate?: number;
    /**
     * The percentage of mobile clicks that go to a mobile-friendly page.
     *
     * @generated from protobuf field: optional double mobile_friendly_clicks_percentage = 229;
     */
    mobileFriendlyClicksPercentage?: number;
    /**
     * Total optimization score uplift of all recommendations.
     *
     * @generated from protobuf field: optional double optimization_score_uplift = 247;
     */
    optimizationScoreUplift?: number;
    /**
     * URL for the optimization score page in the Google Ads web interface.
     * This metric can be selected from `customer` or `campaign`, and can be
     * segmented by `segments.recommendation_type`. For example, `SELECT
     * metrics.optimization_score_url, segments.recommendation_type FROM
     * customer` will return a URL for each unique (customer, recommendation_type)
     * combination.
     *
     * @generated from protobuf field: optional string optimization_score_url = 248;
     */
    optimizationScoreUrl?: string;
    /**
     * The number of times someone clicked your site's listing in the unpaid
     * results for a particular query. See the help page at
     * https://support.google.com/google-ads/answer/3097241 for details.
     *
     * @generated from protobuf field: optional int64 organic_clicks = 230;
     */
    organicClicks?: bigint;
    /**
     * The number of times someone clicked your site's listing in the unpaid
     * results (organic_clicks) divided by the total number of searches that
     * returned pages from your site (organic_queries). See the help page at
     * https://support.google.com/google-ads/answer/3097241 for details.
     *
     * @generated from protobuf field: optional double organic_clicks_per_query = 231;
     */
    organicClicksPerQuery?: number;
    /**
     * The number of listings for your site in the unpaid search results. See the
     * help page at https://support.google.com/google-ads/answer/3097241 for
     * details.
     *
     * @generated from protobuf field: optional int64 organic_impressions = 232;
     */
    organicImpressions?: bigint;
    /**
     * The number of times a page from your site was listed in the unpaid search
     * results (organic_impressions) divided by the number of searches returning
     * your site's listing in the unpaid results (organic_queries). See the help
     * page at https://support.google.com/google-ads/answer/3097241 for details.
     *
     * @generated from protobuf field: optional double organic_impressions_per_query = 233;
     */
    organicImpressionsPerQuery?: number;
    /**
     * The total number of searches that returned your site's listing in the
     * unpaid results. See the help page at
     * https://support.google.com/google-ads/answer/3097241 for details.
     *
     * @generated from protobuf field: optional int64 organic_queries = 234;
     */
    organicQueries?: bigint;
    /**
     * Percentage of first-time sessions (from people who had never visited your
     * site before). Imported from Google Analytics.
     *
     * @generated from protobuf field: optional double percent_new_visitors = 235;
     */
    percentNewVisitors?: number;
    /**
     * Number of offline phone calls.
     *
     * @generated from protobuf field: optional int64 phone_calls = 236;
     */
    phoneCalls?: bigint;
    /**
     * Number of offline phone impressions.
     *
     * @generated from protobuf field: optional int64 phone_impressions = 237;
     */
    phoneImpressions?: bigint;
    /**
     * Number of phone calls received (phone_calls) divided by the number of
     * times your phone number is shown (phone_impressions).
     *
     * @generated from protobuf field: optional double phone_through_rate = 238;
     */
    phoneThroughRate?: number;
    /**
     * Your clickthrough rate (Ctr) divided by the average clickthrough rate of
     * all advertisers on the websites that show your ads. Measures how your ads
     * perform on Display Network sites compared to other ads on the same sites.
     *
     * @generated from protobuf field: optional double relative_ctr = 239;
     */
    relativeCtr?: number;
    /**
     * The percentage of the customer's Shopping or Search ad impressions that are
     * shown in the most prominent Shopping position. See
     * https://support.google.com/google-ads/answer/7501826
     * for details. Any value below 0.1 is reported as 0.0999.
     *
     * @generated from protobuf field: optional double search_absolute_top_impression_share = 136;
     */
    searchAbsoluteTopImpressionShare?: number;
    /**
     * The number estimating how often your ad wasn't the very first ad above the
     * organic search results due to a low budget. Note: Search
     * budget lost absolute top impression share is reported in the range of 0 to
     * 0.9. Any value above 0.9 is reported as 0.9001.
     *
     * @generated from protobuf field: optional double search_budget_lost_absolute_top_impression_share = 137;
     */
    searchBudgetLostAbsoluteTopImpressionShare?: number;
    /**
     * The estimated percent of times that your ad was eligible to show on the
     * Search Network but didn't because your budget was too low. Note: Search
     * budget lost impression share is reported in the range of 0 to 0.9. Any
     * value above 0.9 is reported as 0.9001.
     *
     * @generated from protobuf field: optional double search_budget_lost_impression_share = 138;
     */
    searchBudgetLostImpressionShare?: number;
    /**
     * The number estimating how often your ad didn't show anywhere above the
     * organic search results due to a low budget. Note: Search
     * budget lost top impression share is reported in the range of 0 to 0.9. Any
     * value above 0.9 is reported as 0.9001.
     *
     * @generated from protobuf field: optional double search_budget_lost_top_impression_share = 139;
     */
    searchBudgetLostTopImpressionShare?: number;
    /**
     * The number of clicks you've received on the Search Network
     * divided by the estimated number of clicks you were eligible to receive.
     * Note: Search click share is reported in the range of 0.1 to 1. Any value
     * below 0.1 is reported as 0.0999.
     *
     * @generated from protobuf field: optional double search_click_share = 140;
     */
    searchClickShare?: number;
    /**
     * The impressions you've received divided by the estimated number of
     * impressions you were eligible to receive on the Search Network for search
     * terms that matched your keywords exactly (or were close variants of your
     * keyword), regardless of your keyword match types. Note: Search exact match
     * impression share is reported in the range of 0.1 to 1. Any value below 0.1
     * is reported as 0.0999.
     *
     * @generated from protobuf field: optional double search_exact_match_impression_share = 141;
     */
    searchExactMatchImpressionShare?: number;
    /**
     * The impressions you've received on the Search Network divided
     * by the estimated number of impressions you were eligible to receive.
     * Note: Search impression share is reported in the range of 0.1 to 1. Any
     * value below 0.1 is reported as 0.0999.
     *
     * @generated from protobuf field: optional double search_impression_share = 142;
     */
    searchImpressionShare?: number;
    /**
     * The number estimating how often your ad wasn't the very first ad above the
     * organic search results due to poor Ad Rank.
     * Note: Search rank lost absolute top impression share is reported in the
     * range of 0 to 0.9. Any value above 0.9 is reported as 0.9001.
     *
     * @generated from protobuf field: optional double search_rank_lost_absolute_top_impression_share = 143;
     */
    searchRankLostAbsoluteTopImpressionShare?: number;
    /**
     * The estimated percentage of impressions on the Search Network
     * that your ads didn't receive due to poor Ad Rank.
     * Note: Search rank lost impression share is reported in the range of 0 to
     * 0.9. Any value above 0.9 is reported as 0.9001.
     *
     * @generated from protobuf field: optional double search_rank_lost_impression_share = 144;
     */
    searchRankLostImpressionShare?: number;
    /**
     * The number estimating how often your ad didn't show anywhere above the
     * organic search results due to poor Ad Rank.
     * Note: Search rank lost top impression share is reported in the range of 0
     * to 0.9. Any value above 0.9 is reported as 0.9001.
     *
     * @generated from protobuf field: optional double search_rank_lost_top_impression_share = 145;
     */
    searchRankLostTopImpressionShare?: number;
    /**
     * The impressions you've received in the top location (anywhere above the
     * organic search results) compared to the estimated number of impressions you
     * were eligible to receive in the top location.
     * Note: Search top impression share is reported in the range of 0.1 to 1. Any
     * value below 0.1 is reported as 0.0999.
     *
     * @generated from protobuf field: optional double search_top_impression_share = 146;
     */
    searchTopImpressionShare?: number;
    /**
     * A measure of how quickly your page loads after clicks on your mobile ads.
     * The score is a range from 1 to 10, 10 being the fastest.
     *
     * @generated from protobuf field: optional int64 speed_score = 147;
     */
    speedScore?: bigint;
    /**
     * The percent of your ad impressions that are shown anywhere above the
     * organic search results.
     *
     * @generated from protobuf field: optional double top_impression_percentage = 148;
     */
    topImpressionPercentage?: number;
    /**
     * The percentage of ad clicks to Accelerated Mobile Pages (AMP) landing pages
     * that reach a valid AMP page.
     *
     * @generated from protobuf field: optional double valid_accelerated_mobile_pages_clicks_percentage = 149;
     */
    validAcceleratedMobilePagesClicksPercentage?: number;
    /**
     * The value of all conversions divided by the number of all conversions.
     *
     * @generated from protobuf field: optional double value_per_all_conversions = 150;
     */
    valuePerAllConversions?: number;
    /**
     * The value of all conversions divided by the number of all conversions. When
     * this column is selected with date, the values in date column means the
     * conversion date. Details for the by_conversion_date columns are available
     * at https://support.google.com/google-ads/answer/9549009.
     *
     * @generated from protobuf field: optional double value_per_all_conversions_by_conversion_date = 244;
     */
    valuePerAllConversionsByConversionDate?: number;
    /**
     * The value of conversions divided by the number of conversions. This only
     * includes conversion actions which include_in_conversions_metric attribute
     * is set to true. If you use conversion-based bidding, your bid strategies
     * will optimize for these conversions.
     *
     * @generated from protobuf field: optional double value_per_conversion = 151;
     */
    valuePerConversion?: number;
    /**
     * The value of conversions divided by the number of conversions. This only
     * includes conversion actions which include_in_conversions_metric attribute
     * is set to true. If you use conversion-based bidding, your bid strategies
     * will optimize for these conversions. When this column is selected with
     * date, the values in date column means the conversion date. Details for the
     * by_conversion_date columns are available at
     * https://support.google.com/google-ads/answer/9549009.
     *
     * @generated from protobuf field: optional double value_per_conversions_by_conversion_date = 245;
     */
    valuePerConversionsByConversionDate?: number;
    /**
     * The value of current model attributed conversions divided by the number of
     * the conversions. This only includes conversion actions which
     * include_in_conversions_metric attribute is set to true. If you use
     * conversion-based bidding, your bid strategies will optimize for these
     * conversions.
     *
     * @generated from protobuf field: optional double value_per_current_model_attributed_conversion = 152;
     */
    valuePerCurrentModelAttributedConversion?: number;
    /**
     * Percentage of impressions where the viewer watched all of your video.
     *
     * @generated from protobuf field: optional double video_quartile_p100_rate = 132;
     */
    videoQuartileP100Rate?: number;
    /**
     * Percentage of impressions where the viewer watched 25% of your video.
     *
     * @generated from protobuf field: optional double video_quartile_p25_rate = 133;
     */
    videoQuartileP25Rate?: number;
    /**
     * Percentage of impressions where the viewer watched 50% of your video.
     *
     * @generated from protobuf field: optional double video_quartile_p50_rate = 134;
     */
    videoQuartileP50Rate?: number;
    /**
     * Percentage of impressions where the viewer watched 75% of your video.
     *
     * @generated from protobuf field: optional double video_quartile_p75_rate = 135;
     */
    videoQuartileP75Rate?: number;
    /**
     * The number of views your TrueView video ad receives divided by its number
     * of impressions, including thumbnail impressions for TrueView in-display
     * ads.
     *
     * @generated from protobuf field: optional double video_view_rate = 153;
     */
    videoViewRate?: number;
    /**
     * The number of times your video ads were viewed.
     *
     * @generated from protobuf field: optional int64 video_views = 154;
     */
    videoViews?: bigint;
    /**
     * The total number of view-through conversions.
     * These happen when a customer sees an image or rich media ad, then later
     * completes a conversion on your site without interacting with (for example,
     * clicking on) another ad.
     *
     * @generated from protobuf field: optional int64 view_through_conversions = 155;
     */
    viewThroughConversions?: bigint;
    /**
     * The number of iOS Store Kit Ad Network conversions.
     *
     * @generated from protobuf field: int64 sk_ad_network_conversions = 246;
     */
    skAdNetworkConversions: bigint;
}
// @generated message type with reflection information, may provide speed optimized methods
class Metrics$Type extends MessageType<Metrics> {
    constructor() {
        super("google.ads.googleads.v11.common.Metrics", [
            { no: 183, name: "absolute_top_impression_percentage", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 184, name: "active_view_cpm", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 185, name: "active_view_ctr", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 186, name: "active_view_impressions", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 187, name: "active_view_measurability", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 188, name: "active_view_measurable_cost_micros", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 189, name: "active_view_measurable_impressions", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 190, name: "active_view_viewability", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 191, name: "all_conversions_from_interactions_rate", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 192, name: "all_conversions_value", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 240, name: "all_conversions_value_by_conversion_date", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 193, name: "all_conversions", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 241, name: "all_conversions_by_conversion_date", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 194, name: "all_conversions_value_per_cost", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 195, name: "all_conversions_from_click_to_call", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 196, name: "all_conversions_from_directions", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 197, name: "all_conversions_from_interactions_value_per_interaction", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 198, name: "all_conversions_from_menu", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 199, name: "all_conversions_from_order", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 200, name: "all_conversions_from_other_engagement", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 201, name: "all_conversions_from_store_visit", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 202, name: "all_conversions_from_store_website", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 258, name: "auction_insight_search_absolute_top_impression_percentage", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 259, name: "auction_insight_search_impression_share", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 260, name: "auction_insight_search_outranking_share", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 261, name: "auction_insight_search_overlap_rate", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 262, name: "auction_insight_search_position_above_rate", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 263, name: "auction_insight_search_top_impression_percentage", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 203, name: "average_cost", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 204, name: "average_cpc", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 205, name: "average_cpe", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 206, name: "average_cpm", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 207, name: "average_cpv", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 208, name: "average_page_views", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 209, name: "average_time_on_site", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 210, name: "benchmark_average_max_cpc", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 254, name: "biddable_app_install_conversions", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 255, name: "biddable_app_post_install_conversions", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 211, name: "benchmark_ctr", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 212, name: "bounce_rate", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 131, name: "clicks", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 156, name: "combined_clicks", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 157, name: "combined_clicks_per_query", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 158, name: "combined_queries", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 159, name: "content_budget_lost_impression_share", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 160, name: "content_impression_share", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 161, name: "conversion_last_received_request_date_time", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 162, name: "conversion_last_conversion_date", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 163, name: "content_rank_lost_impression_share", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 164, name: "conversions_from_interactions_rate", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 165, name: "conversions_value", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 242, name: "conversions_value_by_conversion_date", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 166, name: "conversions_value_per_cost", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 167, name: "conversions_from_interactions_value_per_interaction", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 168, name: "conversions", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 243, name: "conversions_by_conversion_date", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 169, name: "cost_micros", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 170, name: "cost_per_all_conversions", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 171, name: "cost_per_conversion", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 172, name: "cost_per_current_model_attributed_conversion", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 173, name: "cross_device_conversions", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 174, name: "ctr", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 175, name: "current_model_attributed_conversions", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 176, name: "current_model_attributed_conversions_from_interactions_rate", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 177, name: "current_model_attributed_conversions_from_interactions_value_per_interaction", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 178, name: "current_model_attributed_conversions_value", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 179, name: "current_model_attributed_conversions_value_per_cost", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 180, name: "engagement_rate", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 181, name: "engagements", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 213, name: "hotel_average_lead_value_micros", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 256, name: "hotel_commission_rate_micros", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 257, name: "hotel_expected_commission_cost", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 214, name: "hotel_price_difference_percentage", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 215, name: "hotel_eligible_impressions", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 80, name: "historical_creative_quality_score", kind: "enum", T: () => ["google.ads.googleads.v11.enums.QualityScoreBucketEnum.QualityScoreBucket", QualityScoreBucketEnum_QualityScoreBucket] },
            { no: 81, name: "historical_landing_page_quality_score", kind: "enum", T: () => ["google.ads.googleads.v11.enums.QualityScoreBucketEnum.QualityScoreBucket", QualityScoreBucketEnum_QualityScoreBucket] },
            { no: 216, name: "historical_quality_score", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 83, name: "historical_search_predicted_ctr", kind: "enum", T: () => ["google.ads.googleads.v11.enums.QualityScoreBucketEnum.QualityScoreBucket", QualityScoreBucketEnum_QualityScoreBucket] },
            { no: 217, name: "gmail_forwards", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 218, name: "gmail_saves", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 219, name: "gmail_secondary_clicks", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 220, name: "impressions_from_store_reach", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 221, name: "impressions", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 222, name: "interaction_rate", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 223, name: "interactions", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 100, name: "interaction_event_types", kind: "enum", repeat: 1 /*RepeatType.PACKED*/, T: () => ["google.ads.googleads.v11.enums.InteractionEventTypeEnum.InteractionEventType", InteractionEventTypeEnum_InteractionEventType] },
            { no: 224, name: "invalid_click_rate", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 225, name: "invalid_clicks", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 226, name: "message_chats", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 227, name: "message_impressions", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 228, name: "message_chat_rate", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 229, name: "mobile_friendly_clicks_percentage", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 247, name: "optimization_score_uplift", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 248, name: "optimization_score_url", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 230, name: "organic_clicks", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 231, name: "organic_clicks_per_query", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 232, name: "organic_impressions", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 233, name: "organic_impressions_per_query", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 234, name: "organic_queries", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 235, name: "percent_new_visitors", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 236, name: "phone_calls", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 237, name: "phone_impressions", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 238, name: "phone_through_rate", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 239, name: "relative_ctr", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 136, name: "search_absolute_top_impression_share", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 137, name: "search_budget_lost_absolute_top_impression_share", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 138, name: "search_budget_lost_impression_share", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 139, name: "search_budget_lost_top_impression_share", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 140, name: "search_click_share", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 141, name: "search_exact_match_impression_share", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 142, name: "search_impression_share", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 143, name: "search_rank_lost_absolute_top_impression_share", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 144, name: "search_rank_lost_impression_share", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 145, name: "search_rank_lost_top_impression_share", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 146, name: "search_top_impression_share", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 147, name: "speed_score", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 148, name: "top_impression_percentage", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 149, name: "valid_accelerated_mobile_pages_clicks_percentage", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 150, name: "value_per_all_conversions", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 244, name: "value_per_all_conversions_by_conversion_date", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 151, name: "value_per_conversion", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 245, name: "value_per_conversions_by_conversion_date", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 152, name: "value_per_current_model_attributed_conversion", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 132, name: "video_quartile_p100_rate", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 133, name: "video_quartile_p25_rate", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 134, name: "video_quartile_p50_rate", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 135, name: "video_quartile_p75_rate", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 153, name: "video_view_rate", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 154, name: "video_views", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 155, name: "view_through_conversions", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 246, name: "sk_ad_network_conversions", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<Metrics>): Metrics {
        const message = { allConversionsValueByConversionDate: 0, allConversionsByConversionDate: 0, conversionsValueByConversionDate: 0, conversionsByConversionDate: 0, historicalCreativeQualityScore: 0, historicalLandingPageQualityScore: 0, historicalSearchPredictedCtr: 0, interactionEventTypes: [], skAdNetworkConversions: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Metrics>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Metrics): Metrics {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional double absolute_top_impression_percentage */ 183:
                    message.absoluteTopImpressionPercentage = reader.double();
                    break;
                case /* optional double active_view_cpm */ 184:
                    message.activeViewCpm = reader.double();
                    break;
                case /* optional double active_view_ctr */ 185:
                    message.activeViewCtr = reader.double();
                    break;
                case /* optional int64 active_view_impressions */ 186:
                    message.activeViewImpressions = reader.int64().toBigInt();
                    break;
                case /* optional double active_view_measurability */ 187:
                    message.activeViewMeasurability = reader.double();
                    break;
                case /* optional int64 active_view_measurable_cost_micros */ 188:
                    message.activeViewMeasurableCostMicros = reader.int64().toBigInt();
                    break;
                case /* optional int64 active_view_measurable_impressions */ 189:
                    message.activeViewMeasurableImpressions = reader.int64().toBigInt();
                    break;
                case /* optional double active_view_viewability */ 190:
                    message.activeViewViewability = reader.double();
                    break;
                case /* optional double all_conversions_from_interactions_rate */ 191:
                    message.allConversionsFromInteractionsRate = reader.double();
                    break;
                case /* optional double all_conversions_value */ 192:
                    message.allConversionsValue = reader.double();
                    break;
                case /* double all_conversions_value_by_conversion_date */ 240:
                    message.allConversionsValueByConversionDate = reader.double();
                    break;
                case /* optional double all_conversions */ 193:
                    message.allConversions = reader.double();
                    break;
                case /* double all_conversions_by_conversion_date */ 241:
                    message.allConversionsByConversionDate = reader.double();
                    break;
                case /* optional double all_conversions_value_per_cost */ 194:
                    message.allConversionsValuePerCost = reader.double();
                    break;
                case /* optional double all_conversions_from_click_to_call */ 195:
                    message.allConversionsFromClickToCall = reader.double();
                    break;
                case /* optional double all_conversions_from_directions */ 196:
                    message.allConversionsFromDirections = reader.double();
                    break;
                case /* optional double all_conversions_from_interactions_value_per_interaction */ 197:
                    message.allConversionsFromInteractionsValuePerInteraction = reader.double();
                    break;
                case /* optional double all_conversions_from_menu */ 198:
                    message.allConversionsFromMenu = reader.double();
                    break;
                case /* optional double all_conversions_from_order */ 199:
                    message.allConversionsFromOrder = reader.double();
                    break;
                case /* optional double all_conversions_from_other_engagement */ 200:
                    message.allConversionsFromOtherEngagement = reader.double();
                    break;
                case /* optional double all_conversions_from_store_visit */ 201:
                    message.allConversionsFromStoreVisit = reader.double();
                    break;
                case /* optional double all_conversions_from_store_website */ 202:
                    message.allConversionsFromStoreWebsite = reader.double();
                    break;
                case /* optional double auction_insight_search_absolute_top_impression_percentage */ 258:
                    message.auctionInsightSearchAbsoluteTopImpressionPercentage = reader.double();
                    break;
                case /* optional double auction_insight_search_impression_share */ 259:
                    message.auctionInsightSearchImpressionShare = reader.double();
                    break;
                case /* optional double auction_insight_search_outranking_share */ 260:
                    message.auctionInsightSearchOutrankingShare = reader.double();
                    break;
                case /* optional double auction_insight_search_overlap_rate */ 261:
                    message.auctionInsightSearchOverlapRate = reader.double();
                    break;
                case /* optional double auction_insight_search_position_above_rate */ 262:
                    message.auctionInsightSearchPositionAboveRate = reader.double();
                    break;
                case /* optional double auction_insight_search_top_impression_percentage */ 263:
                    message.auctionInsightSearchTopImpressionPercentage = reader.double();
                    break;
                case /* optional double average_cost */ 203:
                    message.averageCost = reader.double();
                    break;
                case /* optional double average_cpc */ 204:
                    message.averageCpc = reader.double();
                    break;
                case /* optional double average_cpe */ 205:
                    message.averageCpe = reader.double();
                    break;
                case /* optional double average_cpm */ 206:
                    message.averageCpm = reader.double();
                    break;
                case /* optional double average_cpv */ 207:
                    message.averageCpv = reader.double();
                    break;
                case /* optional double average_page_views */ 208:
                    message.averagePageViews = reader.double();
                    break;
                case /* optional double average_time_on_site */ 209:
                    message.averageTimeOnSite = reader.double();
                    break;
                case /* optional double benchmark_average_max_cpc */ 210:
                    message.benchmarkAverageMaxCpc = reader.double();
                    break;
                case /* optional double biddable_app_install_conversions */ 254:
                    message.biddableAppInstallConversions = reader.double();
                    break;
                case /* optional double biddable_app_post_install_conversions */ 255:
                    message.biddableAppPostInstallConversions = reader.double();
                    break;
                case /* optional double benchmark_ctr */ 211:
                    message.benchmarkCtr = reader.double();
                    break;
                case /* optional double bounce_rate */ 212:
                    message.bounceRate = reader.double();
                    break;
                case /* optional int64 clicks */ 131:
                    message.clicks = reader.int64().toBigInt();
                    break;
                case /* optional int64 combined_clicks */ 156:
                    message.combinedClicks = reader.int64().toBigInt();
                    break;
                case /* optional double combined_clicks_per_query */ 157:
                    message.combinedClicksPerQuery = reader.double();
                    break;
                case /* optional int64 combined_queries */ 158:
                    message.combinedQueries = reader.int64().toBigInt();
                    break;
                case /* optional double content_budget_lost_impression_share */ 159:
                    message.contentBudgetLostImpressionShare = reader.double();
                    break;
                case /* optional double content_impression_share */ 160:
                    message.contentImpressionShare = reader.double();
                    break;
                case /* optional string conversion_last_received_request_date_time */ 161:
                    message.conversionLastReceivedRequestDateTime = reader.string();
                    break;
                case /* optional string conversion_last_conversion_date */ 162:
                    message.conversionLastConversionDate = reader.string();
                    break;
                case /* optional double content_rank_lost_impression_share */ 163:
                    message.contentRankLostImpressionShare = reader.double();
                    break;
                case /* optional double conversions_from_interactions_rate */ 164:
                    message.conversionsFromInteractionsRate = reader.double();
                    break;
                case /* optional double conversions_value */ 165:
                    message.conversionsValue = reader.double();
                    break;
                case /* double conversions_value_by_conversion_date */ 242:
                    message.conversionsValueByConversionDate = reader.double();
                    break;
                case /* optional double conversions_value_per_cost */ 166:
                    message.conversionsValuePerCost = reader.double();
                    break;
                case /* optional double conversions_from_interactions_value_per_interaction */ 167:
                    message.conversionsFromInteractionsValuePerInteraction = reader.double();
                    break;
                case /* optional double conversions */ 168:
                    message.conversions = reader.double();
                    break;
                case /* double conversions_by_conversion_date */ 243:
                    message.conversionsByConversionDate = reader.double();
                    break;
                case /* optional int64 cost_micros */ 169:
                    message.costMicros = reader.int64().toBigInt();
                    break;
                case /* optional double cost_per_all_conversions */ 170:
                    message.costPerAllConversions = reader.double();
                    break;
                case /* optional double cost_per_conversion */ 171:
                    message.costPerConversion = reader.double();
                    break;
                case /* optional double cost_per_current_model_attributed_conversion */ 172:
                    message.costPerCurrentModelAttributedConversion = reader.double();
                    break;
                case /* optional double cross_device_conversions */ 173:
                    message.crossDeviceConversions = reader.double();
                    break;
                case /* optional double ctr */ 174:
                    message.ctr = reader.double();
                    break;
                case /* optional double current_model_attributed_conversions */ 175:
                    message.currentModelAttributedConversions = reader.double();
                    break;
                case /* optional double current_model_attributed_conversions_from_interactions_rate */ 176:
                    message.currentModelAttributedConversionsFromInteractionsRate = reader.double();
                    break;
                case /* optional double current_model_attributed_conversions_from_interactions_value_per_interaction */ 177:
                    message.currentModelAttributedConversionsFromInteractionsValuePerInteraction = reader.double();
                    break;
                case /* optional double current_model_attributed_conversions_value */ 178:
                    message.currentModelAttributedConversionsValue = reader.double();
                    break;
                case /* optional double current_model_attributed_conversions_value_per_cost */ 179:
                    message.currentModelAttributedConversionsValuePerCost = reader.double();
                    break;
                case /* optional double engagement_rate */ 180:
                    message.engagementRate = reader.double();
                    break;
                case /* optional int64 engagements */ 181:
                    message.engagements = reader.int64().toBigInt();
                    break;
                case /* optional double hotel_average_lead_value_micros */ 213:
                    message.hotelAverageLeadValueMicros = reader.double();
                    break;
                case /* optional int64 hotel_commission_rate_micros */ 256:
                    message.hotelCommissionRateMicros = reader.int64().toBigInt();
                    break;
                case /* optional double hotel_expected_commission_cost */ 257:
                    message.hotelExpectedCommissionCost = reader.double();
                    break;
                case /* optional double hotel_price_difference_percentage */ 214:
                    message.hotelPriceDifferencePercentage = reader.double();
                    break;
                case /* optional int64 hotel_eligible_impressions */ 215:
                    message.hotelEligibleImpressions = reader.int64().toBigInt();
                    break;
                case /* google.ads.googleads.v11.enums.QualityScoreBucketEnum.QualityScoreBucket historical_creative_quality_score */ 80:
                    message.historicalCreativeQualityScore = reader.int32();
                    break;
                case /* google.ads.googleads.v11.enums.QualityScoreBucketEnum.QualityScoreBucket historical_landing_page_quality_score */ 81:
                    message.historicalLandingPageQualityScore = reader.int32();
                    break;
                case /* optional int64 historical_quality_score */ 216:
                    message.historicalQualityScore = reader.int64().toBigInt();
                    break;
                case /* google.ads.googleads.v11.enums.QualityScoreBucketEnum.QualityScoreBucket historical_search_predicted_ctr */ 83:
                    message.historicalSearchPredictedCtr = reader.int32();
                    break;
                case /* optional int64 gmail_forwards */ 217:
                    message.gmailForwards = reader.int64().toBigInt();
                    break;
                case /* optional int64 gmail_saves */ 218:
                    message.gmailSaves = reader.int64().toBigInt();
                    break;
                case /* optional int64 gmail_secondary_clicks */ 219:
                    message.gmailSecondaryClicks = reader.int64().toBigInt();
                    break;
                case /* optional int64 impressions_from_store_reach */ 220:
                    message.impressionsFromStoreReach = reader.int64().toBigInt();
                    break;
                case /* optional int64 impressions */ 221:
                    message.impressions = reader.int64().toBigInt();
                    break;
                case /* optional double interaction_rate */ 222:
                    message.interactionRate = reader.double();
                    break;
                case /* optional int64 interactions */ 223:
                    message.interactions = reader.int64().toBigInt();
                    break;
                case /* repeated google.ads.googleads.v11.enums.InteractionEventTypeEnum.InteractionEventType interaction_event_types */ 100:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.interactionEventTypes.push(reader.int32());
                    else
                        message.interactionEventTypes.push(reader.int32());
                    break;
                case /* optional double invalid_click_rate */ 224:
                    message.invalidClickRate = reader.double();
                    break;
                case /* optional int64 invalid_clicks */ 225:
                    message.invalidClicks = reader.int64().toBigInt();
                    break;
                case /* optional int64 message_chats */ 226:
                    message.messageChats = reader.int64().toBigInt();
                    break;
                case /* optional int64 message_impressions */ 227:
                    message.messageImpressions = reader.int64().toBigInt();
                    break;
                case /* optional double message_chat_rate */ 228:
                    message.messageChatRate = reader.double();
                    break;
                case /* optional double mobile_friendly_clicks_percentage */ 229:
                    message.mobileFriendlyClicksPercentage = reader.double();
                    break;
                case /* optional double optimization_score_uplift */ 247:
                    message.optimizationScoreUplift = reader.double();
                    break;
                case /* optional string optimization_score_url */ 248:
                    message.optimizationScoreUrl = reader.string();
                    break;
                case /* optional int64 organic_clicks */ 230:
                    message.organicClicks = reader.int64().toBigInt();
                    break;
                case /* optional double organic_clicks_per_query */ 231:
                    message.organicClicksPerQuery = reader.double();
                    break;
                case /* optional int64 organic_impressions */ 232:
                    message.organicImpressions = reader.int64().toBigInt();
                    break;
                case /* optional double organic_impressions_per_query */ 233:
                    message.organicImpressionsPerQuery = reader.double();
                    break;
                case /* optional int64 organic_queries */ 234:
                    message.organicQueries = reader.int64().toBigInt();
                    break;
                case /* optional double percent_new_visitors */ 235:
                    message.percentNewVisitors = reader.double();
                    break;
                case /* optional int64 phone_calls */ 236:
                    message.phoneCalls = reader.int64().toBigInt();
                    break;
                case /* optional int64 phone_impressions */ 237:
                    message.phoneImpressions = reader.int64().toBigInt();
                    break;
                case /* optional double phone_through_rate */ 238:
                    message.phoneThroughRate = reader.double();
                    break;
                case /* optional double relative_ctr */ 239:
                    message.relativeCtr = reader.double();
                    break;
                case /* optional double search_absolute_top_impression_share */ 136:
                    message.searchAbsoluteTopImpressionShare = reader.double();
                    break;
                case /* optional double search_budget_lost_absolute_top_impression_share */ 137:
                    message.searchBudgetLostAbsoluteTopImpressionShare = reader.double();
                    break;
                case /* optional double search_budget_lost_impression_share */ 138:
                    message.searchBudgetLostImpressionShare = reader.double();
                    break;
                case /* optional double search_budget_lost_top_impression_share */ 139:
                    message.searchBudgetLostTopImpressionShare = reader.double();
                    break;
                case /* optional double search_click_share */ 140:
                    message.searchClickShare = reader.double();
                    break;
                case /* optional double search_exact_match_impression_share */ 141:
                    message.searchExactMatchImpressionShare = reader.double();
                    break;
                case /* optional double search_impression_share */ 142:
                    message.searchImpressionShare = reader.double();
                    break;
                case /* optional double search_rank_lost_absolute_top_impression_share */ 143:
                    message.searchRankLostAbsoluteTopImpressionShare = reader.double();
                    break;
                case /* optional double search_rank_lost_impression_share */ 144:
                    message.searchRankLostImpressionShare = reader.double();
                    break;
                case /* optional double search_rank_lost_top_impression_share */ 145:
                    message.searchRankLostTopImpressionShare = reader.double();
                    break;
                case /* optional double search_top_impression_share */ 146:
                    message.searchTopImpressionShare = reader.double();
                    break;
                case /* optional int64 speed_score */ 147:
                    message.speedScore = reader.int64().toBigInt();
                    break;
                case /* optional double top_impression_percentage */ 148:
                    message.topImpressionPercentage = reader.double();
                    break;
                case /* optional double valid_accelerated_mobile_pages_clicks_percentage */ 149:
                    message.validAcceleratedMobilePagesClicksPercentage = reader.double();
                    break;
                case /* optional double value_per_all_conversions */ 150:
                    message.valuePerAllConversions = reader.double();
                    break;
                case /* optional double value_per_all_conversions_by_conversion_date */ 244:
                    message.valuePerAllConversionsByConversionDate = reader.double();
                    break;
                case /* optional double value_per_conversion */ 151:
                    message.valuePerConversion = reader.double();
                    break;
                case /* optional double value_per_conversions_by_conversion_date */ 245:
                    message.valuePerConversionsByConversionDate = reader.double();
                    break;
                case /* optional double value_per_current_model_attributed_conversion */ 152:
                    message.valuePerCurrentModelAttributedConversion = reader.double();
                    break;
                case /* optional double video_quartile_p100_rate */ 132:
                    message.videoQuartileP100Rate = reader.double();
                    break;
                case /* optional double video_quartile_p25_rate */ 133:
                    message.videoQuartileP25Rate = reader.double();
                    break;
                case /* optional double video_quartile_p50_rate */ 134:
                    message.videoQuartileP50Rate = reader.double();
                    break;
                case /* optional double video_quartile_p75_rate */ 135:
                    message.videoQuartileP75Rate = reader.double();
                    break;
                case /* optional double video_view_rate */ 153:
                    message.videoViewRate = reader.double();
                    break;
                case /* optional int64 video_views */ 154:
                    message.videoViews = reader.int64().toBigInt();
                    break;
                case /* optional int64 view_through_conversions */ 155:
                    message.viewThroughConversions = reader.int64().toBigInt();
                    break;
                case /* int64 sk_ad_network_conversions */ 246:
                    message.skAdNetworkConversions = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Metrics, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional double absolute_top_impression_percentage = 183; */
        if (message.absoluteTopImpressionPercentage !== undefined)
            writer.tag(183, WireType.Bit64).double(message.absoluteTopImpressionPercentage);
        /* optional double active_view_cpm = 184; */
        if (message.activeViewCpm !== undefined)
            writer.tag(184, WireType.Bit64).double(message.activeViewCpm);
        /* optional double active_view_ctr = 185; */
        if (message.activeViewCtr !== undefined)
            writer.tag(185, WireType.Bit64).double(message.activeViewCtr);
        /* optional int64 active_view_impressions = 186; */
        if (message.activeViewImpressions !== undefined)
            writer.tag(186, WireType.Varint).int64(message.activeViewImpressions);
        /* optional double active_view_measurability = 187; */
        if (message.activeViewMeasurability !== undefined)
            writer.tag(187, WireType.Bit64).double(message.activeViewMeasurability);
        /* optional int64 active_view_measurable_cost_micros = 188; */
        if (message.activeViewMeasurableCostMicros !== undefined)
            writer.tag(188, WireType.Varint).int64(message.activeViewMeasurableCostMicros);
        /* optional int64 active_view_measurable_impressions = 189; */
        if (message.activeViewMeasurableImpressions !== undefined)
            writer.tag(189, WireType.Varint).int64(message.activeViewMeasurableImpressions);
        /* optional double active_view_viewability = 190; */
        if (message.activeViewViewability !== undefined)
            writer.tag(190, WireType.Bit64).double(message.activeViewViewability);
        /* optional double all_conversions_from_interactions_rate = 191; */
        if (message.allConversionsFromInteractionsRate !== undefined)
            writer.tag(191, WireType.Bit64).double(message.allConversionsFromInteractionsRate);
        /* optional double all_conversions_value = 192; */
        if (message.allConversionsValue !== undefined)
            writer.tag(192, WireType.Bit64).double(message.allConversionsValue);
        /* double all_conversions_value_by_conversion_date = 240; */
        if (message.allConversionsValueByConversionDate !== 0)
            writer.tag(240, WireType.Bit64).double(message.allConversionsValueByConversionDate);
        /* optional double all_conversions = 193; */
        if (message.allConversions !== undefined)
            writer.tag(193, WireType.Bit64).double(message.allConversions);
        /* double all_conversions_by_conversion_date = 241; */
        if (message.allConversionsByConversionDate !== 0)
            writer.tag(241, WireType.Bit64).double(message.allConversionsByConversionDate);
        /* optional double all_conversions_value_per_cost = 194; */
        if (message.allConversionsValuePerCost !== undefined)
            writer.tag(194, WireType.Bit64).double(message.allConversionsValuePerCost);
        /* optional double all_conversions_from_click_to_call = 195; */
        if (message.allConversionsFromClickToCall !== undefined)
            writer.tag(195, WireType.Bit64).double(message.allConversionsFromClickToCall);
        /* optional double all_conversions_from_directions = 196; */
        if (message.allConversionsFromDirections !== undefined)
            writer.tag(196, WireType.Bit64).double(message.allConversionsFromDirections);
        /* optional double all_conversions_from_interactions_value_per_interaction = 197; */
        if (message.allConversionsFromInteractionsValuePerInteraction !== undefined)
            writer.tag(197, WireType.Bit64).double(message.allConversionsFromInteractionsValuePerInteraction);
        /* optional double all_conversions_from_menu = 198; */
        if (message.allConversionsFromMenu !== undefined)
            writer.tag(198, WireType.Bit64).double(message.allConversionsFromMenu);
        /* optional double all_conversions_from_order = 199; */
        if (message.allConversionsFromOrder !== undefined)
            writer.tag(199, WireType.Bit64).double(message.allConversionsFromOrder);
        /* optional double all_conversions_from_other_engagement = 200; */
        if (message.allConversionsFromOtherEngagement !== undefined)
            writer.tag(200, WireType.Bit64).double(message.allConversionsFromOtherEngagement);
        /* optional double all_conversions_from_store_visit = 201; */
        if (message.allConversionsFromStoreVisit !== undefined)
            writer.tag(201, WireType.Bit64).double(message.allConversionsFromStoreVisit);
        /* optional double all_conversions_from_store_website = 202; */
        if (message.allConversionsFromStoreWebsite !== undefined)
            writer.tag(202, WireType.Bit64).double(message.allConversionsFromStoreWebsite);
        /* optional double auction_insight_search_absolute_top_impression_percentage = 258; */
        if (message.auctionInsightSearchAbsoluteTopImpressionPercentage !== undefined)
            writer.tag(258, WireType.Bit64).double(message.auctionInsightSearchAbsoluteTopImpressionPercentage);
        /* optional double auction_insight_search_impression_share = 259; */
        if (message.auctionInsightSearchImpressionShare !== undefined)
            writer.tag(259, WireType.Bit64).double(message.auctionInsightSearchImpressionShare);
        /* optional double auction_insight_search_outranking_share = 260; */
        if (message.auctionInsightSearchOutrankingShare !== undefined)
            writer.tag(260, WireType.Bit64).double(message.auctionInsightSearchOutrankingShare);
        /* optional double auction_insight_search_overlap_rate = 261; */
        if (message.auctionInsightSearchOverlapRate !== undefined)
            writer.tag(261, WireType.Bit64).double(message.auctionInsightSearchOverlapRate);
        /* optional double auction_insight_search_position_above_rate = 262; */
        if (message.auctionInsightSearchPositionAboveRate !== undefined)
            writer.tag(262, WireType.Bit64).double(message.auctionInsightSearchPositionAboveRate);
        /* optional double auction_insight_search_top_impression_percentage = 263; */
        if (message.auctionInsightSearchTopImpressionPercentage !== undefined)
            writer.tag(263, WireType.Bit64).double(message.auctionInsightSearchTopImpressionPercentage);
        /* optional double average_cost = 203; */
        if (message.averageCost !== undefined)
            writer.tag(203, WireType.Bit64).double(message.averageCost);
        /* optional double average_cpc = 204; */
        if (message.averageCpc !== undefined)
            writer.tag(204, WireType.Bit64).double(message.averageCpc);
        /* optional double average_cpe = 205; */
        if (message.averageCpe !== undefined)
            writer.tag(205, WireType.Bit64).double(message.averageCpe);
        /* optional double average_cpm = 206; */
        if (message.averageCpm !== undefined)
            writer.tag(206, WireType.Bit64).double(message.averageCpm);
        /* optional double average_cpv = 207; */
        if (message.averageCpv !== undefined)
            writer.tag(207, WireType.Bit64).double(message.averageCpv);
        /* optional double average_page_views = 208; */
        if (message.averagePageViews !== undefined)
            writer.tag(208, WireType.Bit64).double(message.averagePageViews);
        /* optional double average_time_on_site = 209; */
        if (message.averageTimeOnSite !== undefined)
            writer.tag(209, WireType.Bit64).double(message.averageTimeOnSite);
        /* optional double benchmark_average_max_cpc = 210; */
        if (message.benchmarkAverageMaxCpc !== undefined)
            writer.tag(210, WireType.Bit64).double(message.benchmarkAverageMaxCpc);
        /* optional double biddable_app_install_conversions = 254; */
        if (message.biddableAppInstallConversions !== undefined)
            writer.tag(254, WireType.Bit64).double(message.biddableAppInstallConversions);
        /* optional double biddable_app_post_install_conversions = 255; */
        if (message.biddableAppPostInstallConversions !== undefined)
            writer.tag(255, WireType.Bit64).double(message.biddableAppPostInstallConversions);
        /* optional double benchmark_ctr = 211; */
        if (message.benchmarkCtr !== undefined)
            writer.tag(211, WireType.Bit64).double(message.benchmarkCtr);
        /* optional double bounce_rate = 212; */
        if (message.bounceRate !== undefined)
            writer.tag(212, WireType.Bit64).double(message.bounceRate);
        /* optional int64 clicks = 131; */
        if (message.clicks !== undefined)
            writer.tag(131, WireType.Varint).int64(message.clicks);
        /* optional int64 combined_clicks = 156; */
        if (message.combinedClicks !== undefined)
            writer.tag(156, WireType.Varint).int64(message.combinedClicks);
        /* optional double combined_clicks_per_query = 157; */
        if (message.combinedClicksPerQuery !== undefined)
            writer.tag(157, WireType.Bit64).double(message.combinedClicksPerQuery);
        /* optional int64 combined_queries = 158; */
        if (message.combinedQueries !== undefined)
            writer.tag(158, WireType.Varint).int64(message.combinedQueries);
        /* optional double content_budget_lost_impression_share = 159; */
        if (message.contentBudgetLostImpressionShare !== undefined)
            writer.tag(159, WireType.Bit64).double(message.contentBudgetLostImpressionShare);
        /* optional double content_impression_share = 160; */
        if (message.contentImpressionShare !== undefined)
            writer.tag(160, WireType.Bit64).double(message.contentImpressionShare);
        /* optional string conversion_last_received_request_date_time = 161; */
        if (message.conversionLastReceivedRequestDateTime !== undefined)
            writer.tag(161, WireType.LengthDelimited).string(message.conversionLastReceivedRequestDateTime);
        /* optional string conversion_last_conversion_date = 162; */
        if (message.conversionLastConversionDate !== undefined)
            writer.tag(162, WireType.LengthDelimited).string(message.conversionLastConversionDate);
        /* optional double content_rank_lost_impression_share = 163; */
        if (message.contentRankLostImpressionShare !== undefined)
            writer.tag(163, WireType.Bit64).double(message.contentRankLostImpressionShare);
        /* optional double conversions_from_interactions_rate = 164; */
        if (message.conversionsFromInteractionsRate !== undefined)
            writer.tag(164, WireType.Bit64).double(message.conversionsFromInteractionsRate);
        /* optional double conversions_value = 165; */
        if (message.conversionsValue !== undefined)
            writer.tag(165, WireType.Bit64).double(message.conversionsValue);
        /* double conversions_value_by_conversion_date = 242; */
        if (message.conversionsValueByConversionDate !== 0)
            writer.tag(242, WireType.Bit64).double(message.conversionsValueByConversionDate);
        /* optional double conversions_value_per_cost = 166; */
        if (message.conversionsValuePerCost !== undefined)
            writer.tag(166, WireType.Bit64).double(message.conversionsValuePerCost);
        /* optional double conversions_from_interactions_value_per_interaction = 167; */
        if (message.conversionsFromInteractionsValuePerInteraction !== undefined)
            writer.tag(167, WireType.Bit64).double(message.conversionsFromInteractionsValuePerInteraction);
        /* optional double conversions = 168; */
        if (message.conversions !== undefined)
            writer.tag(168, WireType.Bit64).double(message.conversions);
        /* double conversions_by_conversion_date = 243; */
        if (message.conversionsByConversionDate !== 0)
            writer.tag(243, WireType.Bit64).double(message.conversionsByConversionDate);
        /* optional int64 cost_micros = 169; */
        if (message.costMicros !== undefined)
            writer.tag(169, WireType.Varint).int64(message.costMicros);
        /* optional double cost_per_all_conversions = 170; */
        if (message.costPerAllConversions !== undefined)
            writer.tag(170, WireType.Bit64).double(message.costPerAllConversions);
        /* optional double cost_per_conversion = 171; */
        if (message.costPerConversion !== undefined)
            writer.tag(171, WireType.Bit64).double(message.costPerConversion);
        /* optional double cost_per_current_model_attributed_conversion = 172; */
        if (message.costPerCurrentModelAttributedConversion !== undefined)
            writer.tag(172, WireType.Bit64).double(message.costPerCurrentModelAttributedConversion);
        /* optional double cross_device_conversions = 173; */
        if (message.crossDeviceConversions !== undefined)
            writer.tag(173, WireType.Bit64).double(message.crossDeviceConversions);
        /* optional double ctr = 174; */
        if (message.ctr !== undefined)
            writer.tag(174, WireType.Bit64).double(message.ctr);
        /* optional double current_model_attributed_conversions = 175; */
        if (message.currentModelAttributedConversions !== undefined)
            writer.tag(175, WireType.Bit64).double(message.currentModelAttributedConversions);
        /* optional double current_model_attributed_conversions_from_interactions_rate = 176; */
        if (message.currentModelAttributedConversionsFromInteractionsRate !== undefined)
            writer.tag(176, WireType.Bit64).double(message.currentModelAttributedConversionsFromInteractionsRate);
        /* optional double current_model_attributed_conversions_from_interactions_value_per_interaction = 177; */
        if (message.currentModelAttributedConversionsFromInteractionsValuePerInteraction !== undefined)
            writer.tag(177, WireType.Bit64).double(message.currentModelAttributedConversionsFromInteractionsValuePerInteraction);
        /* optional double current_model_attributed_conversions_value = 178; */
        if (message.currentModelAttributedConversionsValue !== undefined)
            writer.tag(178, WireType.Bit64).double(message.currentModelAttributedConversionsValue);
        /* optional double current_model_attributed_conversions_value_per_cost = 179; */
        if (message.currentModelAttributedConversionsValuePerCost !== undefined)
            writer.tag(179, WireType.Bit64).double(message.currentModelAttributedConversionsValuePerCost);
        /* optional double engagement_rate = 180; */
        if (message.engagementRate !== undefined)
            writer.tag(180, WireType.Bit64).double(message.engagementRate);
        /* optional int64 engagements = 181; */
        if (message.engagements !== undefined)
            writer.tag(181, WireType.Varint).int64(message.engagements);
        /* optional double hotel_average_lead_value_micros = 213; */
        if (message.hotelAverageLeadValueMicros !== undefined)
            writer.tag(213, WireType.Bit64).double(message.hotelAverageLeadValueMicros);
        /* optional int64 hotel_commission_rate_micros = 256; */
        if (message.hotelCommissionRateMicros !== undefined)
            writer.tag(256, WireType.Varint).int64(message.hotelCommissionRateMicros);
        /* optional double hotel_expected_commission_cost = 257; */
        if (message.hotelExpectedCommissionCost !== undefined)
            writer.tag(257, WireType.Bit64).double(message.hotelExpectedCommissionCost);
        /* optional double hotel_price_difference_percentage = 214; */
        if (message.hotelPriceDifferencePercentage !== undefined)
            writer.tag(214, WireType.Bit64).double(message.hotelPriceDifferencePercentage);
        /* optional int64 hotel_eligible_impressions = 215; */
        if (message.hotelEligibleImpressions !== undefined)
            writer.tag(215, WireType.Varint).int64(message.hotelEligibleImpressions);
        /* google.ads.googleads.v11.enums.QualityScoreBucketEnum.QualityScoreBucket historical_creative_quality_score = 80; */
        if (message.historicalCreativeQualityScore !== 0)
            writer.tag(80, WireType.Varint).int32(message.historicalCreativeQualityScore);
        /* google.ads.googleads.v11.enums.QualityScoreBucketEnum.QualityScoreBucket historical_landing_page_quality_score = 81; */
        if (message.historicalLandingPageQualityScore !== 0)
            writer.tag(81, WireType.Varint).int32(message.historicalLandingPageQualityScore);
        /* optional int64 historical_quality_score = 216; */
        if (message.historicalQualityScore !== undefined)
            writer.tag(216, WireType.Varint).int64(message.historicalQualityScore);
        /* google.ads.googleads.v11.enums.QualityScoreBucketEnum.QualityScoreBucket historical_search_predicted_ctr = 83; */
        if (message.historicalSearchPredictedCtr !== 0)
            writer.tag(83, WireType.Varint).int32(message.historicalSearchPredictedCtr);
        /* optional int64 gmail_forwards = 217; */
        if (message.gmailForwards !== undefined)
            writer.tag(217, WireType.Varint).int64(message.gmailForwards);
        /* optional int64 gmail_saves = 218; */
        if (message.gmailSaves !== undefined)
            writer.tag(218, WireType.Varint).int64(message.gmailSaves);
        /* optional int64 gmail_secondary_clicks = 219; */
        if (message.gmailSecondaryClicks !== undefined)
            writer.tag(219, WireType.Varint).int64(message.gmailSecondaryClicks);
        /* optional int64 impressions_from_store_reach = 220; */
        if (message.impressionsFromStoreReach !== undefined)
            writer.tag(220, WireType.Varint).int64(message.impressionsFromStoreReach);
        /* optional int64 impressions = 221; */
        if (message.impressions !== undefined)
            writer.tag(221, WireType.Varint).int64(message.impressions);
        /* optional double interaction_rate = 222; */
        if (message.interactionRate !== undefined)
            writer.tag(222, WireType.Bit64).double(message.interactionRate);
        /* optional int64 interactions = 223; */
        if (message.interactions !== undefined)
            writer.tag(223, WireType.Varint).int64(message.interactions);
        /* repeated google.ads.googleads.v11.enums.InteractionEventTypeEnum.InteractionEventType interaction_event_types = 100; */
        if (message.interactionEventTypes.length) {
            writer.tag(100, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.interactionEventTypes.length; i++)
                writer.int32(message.interactionEventTypes[i]);
            writer.join();
        }
        /* optional double invalid_click_rate = 224; */
        if (message.invalidClickRate !== undefined)
            writer.tag(224, WireType.Bit64).double(message.invalidClickRate);
        /* optional int64 invalid_clicks = 225; */
        if (message.invalidClicks !== undefined)
            writer.tag(225, WireType.Varint).int64(message.invalidClicks);
        /* optional int64 message_chats = 226; */
        if (message.messageChats !== undefined)
            writer.tag(226, WireType.Varint).int64(message.messageChats);
        /* optional int64 message_impressions = 227; */
        if (message.messageImpressions !== undefined)
            writer.tag(227, WireType.Varint).int64(message.messageImpressions);
        /* optional double message_chat_rate = 228; */
        if (message.messageChatRate !== undefined)
            writer.tag(228, WireType.Bit64).double(message.messageChatRate);
        /* optional double mobile_friendly_clicks_percentage = 229; */
        if (message.mobileFriendlyClicksPercentage !== undefined)
            writer.tag(229, WireType.Bit64).double(message.mobileFriendlyClicksPercentage);
        /* optional double optimization_score_uplift = 247; */
        if (message.optimizationScoreUplift !== undefined)
            writer.tag(247, WireType.Bit64).double(message.optimizationScoreUplift);
        /* optional string optimization_score_url = 248; */
        if (message.optimizationScoreUrl !== undefined)
            writer.tag(248, WireType.LengthDelimited).string(message.optimizationScoreUrl);
        /* optional int64 organic_clicks = 230; */
        if (message.organicClicks !== undefined)
            writer.tag(230, WireType.Varint).int64(message.organicClicks);
        /* optional double organic_clicks_per_query = 231; */
        if (message.organicClicksPerQuery !== undefined)
            writer.tag(231, WireType.Bit64).double(message.organicClicksPerQuery);
        /* optional int64 organic_impressions = 232; */
        if (message.organicImpressions !== undefined)
            writer.tag(232, WireType.Varint).int64(message.organicImpressions);
        /* optional double organic_impressions_per_query = 233; */
        if (message.organicImpressionsPerQuery !== undefined)
            writer.tag(233, WireType.Bit64).double(message.organicImpressionsPerQuery);
        /* optional int64 organic_queries = 234; */
        if (message.organicQueries !== undefined)
            writer.tag(234, WireType.Varint).int64(message.organicQueries);
        /* optional double percent_new_visitors = 235; */
        if (message.percentNewVisitors !== undefined)
            writer.tag(235, WireType.Bit64).double(message.percentNewVisitors);
        /* optional int64 phone_calls = 236; */
        if (message.phoneCalls !== undefined)
            writer.tag(236, WireType.Varint).int64(message.phoneCalls);
        /* optional int64 phone_impressions = 237; */
        if (message.phoneImpressions !== undefined)
            writer.tag(237, WireType.Varint).int64(message.phoneImpressions);
        /* optional double phone_through_rate = 238; */
        if (message.phoneThroughRate !== undefined)
            writer.tag(238, WireType.Bit64).double(message.phoneThroughRate);
        /* optional double relative_ctr = 239; */
        if (message.relativeCtr !== undefined)
            writer.tag(239, WireType.Bit64).double(message.relativeCtr);
        /* optional double search_absolute_top_impression_share = 136; */
        if (message.searchAbsoluteTopImpressionShare !== undefined)
            writer.tag(136, WireType.Bit64).double(message.searchAbsoluteTopImpressionShare);
        /* optional double search_budget_lost_absolute_top_impression_share = 137; */
        if (message.searchBudgetLostAbsoluteTopImpressionShare !== undefined)
            writer.tag(137, WireType.Bit64).double(message.searchBudgetLostAbsoluteTopImpressionShare);
        /* optional double search_budget_lost_impression_share = 138; */
        if (message.searchBudgetLostImpressionShare !== undefined)
            writer.tag(138, WireType.Bit64).double(message.searchBudgetLostImpressionShare);
        /* optional double search_budget_lost_top_impression_share = 139; */
        if (message.searchBudgetLostTopImpressionShare !== undefined)
            writer.tag(139, WireType.Bit64).double(message.searchBudgetLostTopImpressionShare);
        /* optional double search_click_share = 140; */
        if (message.searchClickShare !== undefined)
            writer.tag(140, WireType.Bit64).double(message.searchClickShare);
        /* optional double search_exact_match_impression_share = 141; */
        if (message.searchExactMatchImpressionShare !== undefined)
            writer.tag(141, WireType.Bit64).double(message.searchExactMatchImpressionShare);
        /* optional double search_impression_share = 142; */
        if (message.searchImpressionShare !== undefined)
            writer.tag(142, WireType.Bit64).double(message.searchImpressionShare);
        /* optional double search_rank_lost_absolute_top_impression_share = 143; */
        if (message.searchRankLostAbsoluteTopImpressionShare !== undefined)
            writer.tag(143, WireType.Bit64).double(message.searchRankLostAbsoluteTopImpressionShare);
        /* optional double search_rank_lost_impression_share = 144; */
        if (message.searchRankLostImpressionShare !== undefined)
            writer.tag(144, WireType.Bit64).double(message.searchRankLostImpressionShare);
        /* optional double search_rank_lost_top_impression_share = 145; */
        if (message.searchRankLostTopImpressionShare !== undefined)
            writer.tag(145, WireType.Bit64).double(message.searchRankLostTopImpressionShare);
        /* optional double search_top_impression_share = 146; */
        if (message.searchTopImpressionShare !== undefined)
            writer.tag(146, WireType.Bit64).double(message.searchTopImpressionShare);
        /* optional int64 speed_score = 147; */
        if (message.speedScore !== undefined)
            writer.tag(147, WireType.Varint).int64(message.speedScore);
        /* optional double top_impression_percentage = 148; */
        if (message.topImpressionPercentage !== undefined)
            writer.tag(148, WireType.Bit64).double(message.topImpressionPercentage);
        /* optional double valid_accelerated_mobile_pages_clicks_percentage = 149; */
        if (message.validAcceleratedMobilePagesClicksPercentage !== undefined)
            writer.tag(149, WireType.Bit64).double(message.validAcceleratedMobilePagesClicksPercentage);
        /* optional double value_per_all_conversions = 150; */
        if (message.valuePerAllConversions !== undefined)
            writer.tag(150, WireType.Bit64).double(message.valuePerAllConversions);
        /* optional double value_per_all_conversions_by_conversion_date = 244; */
        if (message.valuePerAllConversionsByConversionDate !== undefined)
            writer.tag(244, WireType.Bit64).double(message.valuePerAllConversionsByConversionDate);
        /* optional double value_per_conversion = 151; */
        if (message.valuePerConversion !== undefined)
            writer.tag(151, WireType.Bit64).double(message.valuePerConversion);
        /* optional double value_per_conversions_by_conversion_date = 245; */
        if (message.valuePerConversionsByConversionDate !== undefined)
            writer.tag(245, WireType.Bit64).double(message.valuePerConversionsByConversionDate);
        /* optional double value_per_current_model_attributed_conversion = 152; */
        if (message.valuePerCurrentModelAttributedConversion !== undefined)
            writer.tag(152, WireType.Bit64).double(message.valuePerCurrentModelAttributedConversion);
        /* optional double video_quartile_p100_rate = 132; */
        if (message.videoQuartileP100Rate !== undefined)
            writer.tag(132, WireType.Bit64).double(message.videoQuartileP100Rate);
        /* optional double video_quartile_p25_rate = 133; */
        if (message.videoQuartileP25Rate !== undefined)
            writer.tag(133, WireType.Bit64).double(message.videoQuartileP25Rate);
        /* optional double video_quartile_p50_rate = 134; */
        if (message.videoQuartileP50Rate !== undefined)
            writer.tag(134, WireType.Bit64).double(message.videoQuartileP50Rate);
        /* optional double video_quartile_p75_rate = 135; */
        if (message.videoQuartileP75Rate !== undefined)
            writer.tag(135, WireType.Bit64).double(message.videoQuartileP75Rate);
        /* optional double video_view_rate = 153; */
        if (message.videoViewRate !== undefined)
            writer.tag(153, WireType.Bit64).double(message.videoViewRate);
        /* optional int64 video_views = 154; */
        if (message.videoViews !== undefined)
            writer.tag(154, WireType.Varint).int64(message.videoViews);
        /* optional int64 view_through_conversions = 155; */
        if (message.viewThroughConversions !== undefined)
            writer.tag(155, WireType.Varint).int64(message.viewThroughConversions);
        /* int64 sk_ad_network_conversions = 246; */
        if (message.skAdNetworkConversions !== 0n)
            writer.tag(246, WireType.Varint).int64(message.skAdNetworkConversions);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.common.Metrics
 */
export const Metrics = new Metrics$Type();
