// @generated by protobuf-ts 2.8.1
// @generated from protobuf file "ads/common/click_location.proto" (package "google.ads.googleads.v11.common", syntax proto3)
// tslint:disable
//
// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
// Proto file describing a ClickLocation.

/**
 * Location criteria associated with a click.
 *
 * @generated from protobuf message google.ads.googleads.v11.common.ClickLocation
 */
export interface ClickLocation {
    /**
     * The city location criterion associated with the impression.
     *
     * @generated from protobuf field: optional string city = 6;
     */
    city?: string;
    /**
     * The country location criterion associated with the impression.
     *
     * @generated from protobuf field: optional string country = 7;
     */
    country?: string;
    /**
     * The metro location criterion associated with the impression.
     *
     * @generated from protobuf field: optional string metro = 8;
     */
    metro?: string;
    /**
     * The most specific location criterion associated with the impression.
     *
     * @generated from protobuf field: optional string most_specific = 9;
     */
    mostSpecific?: string;
    /**
     * The region location criterion associated with the impression.
     *
     * @generated from protobuf field: optional string region = 10;
     */
    region?: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class ClickLocation$Type extends MessageType<ClickLocation> {
    constructor() {
        super("google.ads.googleads.v11.common.ClickLocation", [
            { no: 6, name: "city", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "country", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "metro", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "most_specific", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "region", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ClickLocation>): ClickLocation {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ClickLocation>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ClickLocation): ClickLocation {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string city */ 6:
                    message.city = reader.string();
                    break;
                case /* optional string country */ 7:
                    message.country = reader.string();
                    break;
                case /* optional string metro */ 8:
                    message.metro = reader.string();
                    break;
                case /* optional string most_specific */ 9:
                    message.mostSpecific = reader.string();
                    break;
                case /* optional string region */ 10:
                    message.region = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ClickLocation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string city = 6; */
        if (message.city !== undefined)
            writer.tag(6, WireType.LengthDelimited).string(message.city);
        /* optional string country = 7; */
        if (message.country !== undefined)
            writer.tag(7, WireType.LengthDelimited).string(message.country);
        /* optional string metro = 8; */
        if (message.metro !== undefined)
            writer.tag(8, WireType.LengthDelimited).string(message.metro);
        /* optional string most_specific = 9; */
        if (message.mostSpecific !== undefined)
            writer.tag(9, WireType.LengthDelimited).string(message.mostSpecific);
        /* optional string region = 10; */
        if (message.region !== undefined)
            writer.tag(10, WireType.LengthDelimited).string(message.region);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.common.ClickLocation
 */
export const ClickLocation = new ClickLocation$Type();
