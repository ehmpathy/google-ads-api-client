// @generated by protobuf-ts 2.8.1
// @generated from protobuf file "ads/common/keyword_plan_common.proto" (package "google.ads.googleads.v11.common", syntax proto3)
// tslint:disable
//
// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { KeywordPlanConceptGroupTypeEnum_KeywordPlanConceptGroupType } from "../enums/keyword_plan_concept_group_type";
import { DeviceEnum_Device } from "../enums/device";
import { KeywordPlanAggregateMetricTypeEnum_KeywordPlanAggregateMetricType } from "../enums/keyword_plan_aggregate_metric_type";
import { MonthOfYearEnum_MonthOfYear } from "../enums/month_of_year";
import { YearMonthRange } from "./dates";
import { KeywordPlanCompetitionLevelEnum_KeywordPlanCompetitionLevel } from "../enums/keyword_plan_competition_level";
// Proto file describing Keyword Planner messages.

/**
 * Historical metrics specific to the targeting options selected.
 * Targeting options include geographies, network, etc.
 * Refer to https://support.google.com/google-ads/answer/3022575 for more
 * details.
 *
 * @generated from protobuf message google.ads.googleads.v11.common.KeywordPlanHistoricalMetrics
 */
export interface KeywordPlanHistoricalMetrics {
    /**
     * Approximate number of monthly searches on this query averaged
     * for the past 12 months.
     *
     * @generated from protobuf field: optional int64 avg_monthly_searches = 7;
     */
    avgMonthlySearches?: bigint;
    /**
     * Approximate number of searches on this query for the past twelve months.
     *
     * @generated from protobuf field: repeated google.ads.googleads.v11.common.MonthlySearchVolume monthly_search_volumes = 6;
     */
    monthlySearchVolumes: MonthlySearchVolume[];
    /**
     * The competition level for the query.
     *
     * @generated from protobuf field: google.ads.googleads.v11.enums.KeywordPlanCompetitionLevelEnum.KeywordPlanCompetitionLevel competition = 2;
     */
    competition: KeywordPlanCompetitionLevelEnum_KeywordPlanCompetitionLevel;
    /**
     * The competition index for the query in the range [0, 100].
     * Shows how competitive ad placement is for a keyword.
     * The level of competition from 0-100 is determined by the number of ad slots
     * filled divided by the total number of ad slots available. If not enough
     * data is available, null is returned.
     *
     * @generated from protobuf field: optional int64 competition_index = 8;
     */
    competitionIndex?: bigint;
    /**
     * Top of page bid low range (20th percentile) in micros for the keyword.
     *
     * @generated from protobuf field: optional int64 low_top_of_page_bid_micros = 9;
     */
    lowTopOfPageBidMicros?: bigint;
    /**
     * Top of page bid high range (80th percentile) in micros for the keyword.
     *
     * @generated from protobuf field: optional int64 high_top_of_page_bid_micros = 10;
     */
    highTopOfPageBidMicros?: bigint;
    /**
     * Average Cost Per Click in micros for the keyword.
     *
     * @generated from protobuf field: optional int64 average_cpc_micros = 11;
     */
    averageCpcMicros?: bigint;
}
/**
 * Historical metrics options.
 *
 * @generated from protobuf message google.ads.googleads.v11.common.HistoricalMetricsOptions
 */
export interface HistoricalMetricsOptions {
    /**
     * The year month range for historical metrics. If not specified the searches
     * will be returned for past 12 months.
     * Searches data is available for the past 4 years. If the search volume is
     * not available for the entire year_month_range provided, the subset of the
     * year month range for which search volume is available will be returned.
     *
     * @generated from protobuf field: optional google.ads.googleads.v11.common.YearMonthRange year_month_range = 1;
     */
    yearMonthRange?: YearMonthRange;
    /**
     * Indicates whether to include average cost per click value.
     * Average CPC is a legacy value that will be removed and replaced in the
     * future, and as such we are including it as an optioanl value so clients
     * only use it when strictly necessary and to better track clients that use
     * this value.
     *
     * @generated from protobuf field: bool include_average_cpc = 2;
     */
    includeAverageCpc: boolean;
}
/**
 * Monthly search volume.
 *
 * @generated from protobuf message google.ads.googleads.v11.common.MonthlySearchVolume
 */
export interface MonthlySearchVolume {
    /**
     * The year of the search volume (for example, 2020).
     *
     * @generated from protobuf field: optional int64 year = 4;
     */
    year?: bigint;
    /**
     * The month of the search volume.
     *
     * @generated from protobuf field: google.ads.googleads.v11.enums.MonthOfYearEnum.MonthOfYear month = 2;
     */
    month: MonthOfYearEnum_MonthOfYear;
    /**
     * Approximate number of searches for the month.
     * A null value indicates the search volume is unavailable for
     * that month.
     *
     * @generated from protobuf field: optional int64 monthly_searches = 5;
     */
    monthlySearches?: bigint;
}
/**
 * The aggregate metrics specification of the request.
 *
 * @generated from protobuf message google.ads.googleads.v11.common.KeywordPlanAggregateMetrics
 */
export interface KeywordPlanAggregateMetrics {
    /**
     * The list of aggregate metrics to fetch data.
     *
     * @generated from protobuf field: repeated google.ads.googleads.v11.enums.KeywordPlanAggregateMetricTypeEnum.KeywordPlanAggregateMetricType aggregate_metric_types = 1;
     */
    aggregateMetricTypes: KeywordPlanAggregateMetricTypeEnum_KeywordPlanAggregateMetricType[];
}
/**
 * The aggregated historical metrics for keyword plan keywords.
 *
 * @generated from protobuf message google.ads.googleads.v11.common.KeywordPlanAggregateMetricResults
 */
export interface KeywordPlanAggregateMetricResults {
    /**
     * The aggregate searches for all the keywords segmented by device
     * for the specified time.
     * Supports the following device types: MOBILE, TABLET, DESKTOP.
     *
     * This is only set when KeywordPlanAggregateMetricTypeEnum.DEVICE is set
     * in the KeywordPlanAggregateMetrics field in the request.
     *
     * @generated from protobuf field: repeated google.ads.googleads.v11.common.KeywordPlanDeviceSearches device_searches = 1;
     */
    deviceSearches: KeywordPlanDeviceSearches[];
}
/**
 * The total searches for the device type during the specified time period.
 *
 * @generated from protobuf message google.ads.googleads.v11.common.KeywordPlanDeviceSearches
 */
export interface KeywordPlanDeviceSearches {
    /**
     * The device type.
     *
     * @generated from protobuf field: google.ads.googleads.v11.enums.DeviceEnum.Device device = 1;
     */
    device: DeviceEnum_Device;
    /**
     * The total searches for the device.
     *
     * @generated from protobuf field: optional int64 search_count = 2;
     */
    searchCount?: bigint;
}
/**
 * The Annotations for the Keyword plan keywords.
 *
 * @generated from protobuf message google.ads.googleads.v11.common.KeywordAnnotations
 */
export interface KeywordAnnotations {
    /**
     * The list of concepts for the keyword.
     *
     * @generated from protobuf field: repeated google.ads.googleads.v11.common.KeywordConcept concepts = 1;
     */
    concepts: KeywordConcept[];
}
/**
 * The concept for the keyword.
 *
 * @generated from protobuf message google.ads.googleads.v11.common.KeywordConcept
 */
export interface KeywordConcept {
    /**
     * The concept name for the keyword in the concept_group.
     *
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * The concept group of the concept details.
     *
     * @generated from protobuf field: google.ads.googleads.v11.common.ConceptGroup concept_group = 2;
     */
    conceptGroup?: ConceptGroup;
}
/**
 * The concept group for the keyword concept.
 *
 * @generated from protobuf message google.ads.googleads.v11.common.ConceptGroup
 */
export interface ConceptGroup {
    /**
     * The concept group name.
     *
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * The concept group type.
     *
     * @generated from protobuf field: google.ads.googleads.v11.enums.KeywordPlanConceptGroupTypeEnum.KeywordPlanConceptGroupType type = 2;
     */
    type: KeywordPlanConceptGroupTypeEnum_KeywordPlanConceptGroupType;
}
// @generated message type with reflection information, may provide speed optimized methods
class KeywordPlanHistoricalMetrics$Type extends MessageType<KeywordPlanHistoricalMetrics> {
    constructor() {
        super("google.ads.googleads.v11.common.KeywordPlanHistoricalMetrics", [
            { no: 7, name: "avg_monthly_searches", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "monthly_search_volumes", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MonthlySearchVolume },
            { no: 2, name: "competition", kind: "enum", T: () => ["google.ads.googleads.v11.enums.KeywordPlanCompetitionLevelEnum.KeywordPlanCompetitionLevel", KeywordPlanCompetitionLevelEnum_KeywordPlanCompetitionLevel] },
            { no: 8, name: "competition_index", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 9, name: "low_top_of_page_bid_micros", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 10, name: "high_top_of_page_bid_micros", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 11, name: "average_cpc_micros", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<KeywordPlanHistoricalMetrics>): KeywordPlanHistoricalMetrics {
        const message = { monthlySearchVolumes: [], competition: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<KeywordPlanHistoricalMetrics>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: KeywordPlanHistoricalMetrics): KeywordPlanHistoricalMetrics {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int64 avg_monthly_searches */ 7:
                    message.avgMonthlySearches = reader.int64().toBigInt();
                    break;
                case /* repeated google.ads.googleads.v11.common.MonthlySearchVolume monthly_search_volumes */ 6:
                    message.monthlySearchVolumes.push(MonthlySearchVolume.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* google.ads.googleads.v11.enums.KeywordPlanCompetitionLevelEnum.KeywordPlanCompetitionLevel competition */ 2:
                    message.competition = reader.int32();
                    break;
                case /* optional int64 competition_index */ 8:
                    message.competitionIndex = reader.int64().toBigInt();
                    break;
                case /* optional int64 low_top_of_page_bid_micros */ 9:
                    message.lowTopOfPageBidMicros = reader.int64().toBigInt();
                    break;
                case /* optional int64 high_top_of_page_bid_micros */ 10:
                    message.highTopOfPageBidMicros = reader.int64().toBigInt();
                    break;
                case /* optional int64 average_cpc_micros */ 11:
                    message.averageCpcMicros = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: KeywordPlanHistoricalMetrics, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int64 avg_monthly_searches = 7; */
        if (message.avgMonthlySearches !== undefined)
            writer.tag(7, WireType.Varint).int64(message.avgMonthlySearches);
        /* repeated google.ads.googleads.v11.common.MonthlySearchVolume monthly_search_volumes = 6; */
        for (let i = 0; i < message.monthlySearchVolumes.length; i++)
            MonthlySearchVolume.internalBinaryWrite(message.monthlySearchVolumes[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* google.ads.googleads.v11.enums.KeywordPlanCompetitionLevelEnum.KeywordPlanCompetitionLevel competition = 2; */
        if (message.competition !== 0)
            writer.tag(2, WireType.Varint).int32(message.competition);
        /* optional int64 competition_index = 8; */
        if (message.competitionIndex !== undefined)
            writer.tag(8, WireType.Varint).int64(message.competitionIndex);
        /* optional int64 low_top_of_page_bid_micros = 9; */
        if (message.lowTopOfPageBidMicros !== undefined)
            writer.tag(9, WireType.Varint).int64(message.lowTopOfPageBidMicros);
        /* optional int64 high_top_of_page_bid_micros = 10; */
        if (message.highTopOfPageBidMicros !== undefined)
            writer.tag(10, WireType.Varint).int64(message.highTopOfPageBidMicros);
        /* optional int64 average_cpc_micros = 11; */
        if (message.averageCpcMicros !== undefined)
            writer.tag(11, WireType.Varint).int64(message.averageCpcMicros);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.common.KeywordPlanHistoricalMetrics
 */
export const KeywordPlanHistoricalMetrics = new KeywordPlanHistoricalMetrics$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HistoricalMetricsOptions$Type extends MessageType<HistoricalMetricsOptions> {
    constructor() {
        super("google.ads.googleads.v11.common.HistoricalMetricsOptions", [
            { no: 1, name: "year_month_range", kind: "message", T: () => YearMonthRange },
            { no: 2, name: "include_average_cpc", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<HistoricalMetricsOptions>): HistoricalMetricsOptions {
        const message = { includeAverageCpc: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HistoricalMetricsOptions>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HistoricalMetricsOptions): HistoricalMetricsOptions {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional google.ads.googleads.v11.common.YearMonthRange year_month_range */ 1:
                    message.yearMonthRange = YearMonthRange.internalBinaryRead(reader, reader.uint32(), options, message.yearMonthRange);
                    break;
                case /* bool include_average_cpc */ 2:
                    message.includeAverageCpc = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HistoricalMetricsOptions, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional google.ads.googleads.v11.common.YearMonthRange year_month_range = 1; */
        if (message.yearMonthRange)
            YearMonthRange.internalBinaryWrite(message.yearMonthRange, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bool include_average_cpc = 2; */
        if (message.includeAverageCpc !== false)
            writer.tag(2, WireType.Varint).bool(message.includeAverageCpc);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.common.HistoricalMetricsOptions
 */
export const HistoricalMetricsOptions = new HistoricalMetricsOptions$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MonthlySearchVolume$Type extends MessageType<MonthlySearchVolume> {
    constructor() {
        super("google.ads.googleads.v11.common.MonthlySearchVolume", [
            { no: 4, name: "year", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "month", kind: "enum", T: () => ["google.ads.googleads.v11.enums.MonthOfYearEnum.MonthOfYear", MonthOfYearEnum_MonthOfYear] },
            { no: 5, name: "monthly_searches", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<MonthlySearchVolume>): MonthlySearchVolume {
        const message = { month: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MonthlySearchVolume>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MonthlySearchVolume): MonthlySearchVolume {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int64 year */ 4:
                    message.year = reader.int64().toBigInt();
                    break;
                case /* google.ads.googleads.v11.enums.MonthOfYearEnum.MonthOfYear month */ 2:
                    message.month = reader.int32();
                    break;
                case /* optional int64 monthly_searches */ 5:
                    message.monthlySearches = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MonthlySearchVolume, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int64 year = 4; */
        if (message.year !== undefined)
            writer.tag(4, WireType.Varint).int64(message.year);
        /* google.ads.googleads.v11.enums.MonthOfYearEnum.MonthOfYear month = 2; */
        if (message.month !== 0)
            writer.tag(2, WireType.Varint).int32(message.month);
        /* optional int64 monthly_searches = 5; */
        if (message.monthlySearches !== undefined)
            writer.tag(5, WireType.Varint).int64(message.monthlySearches);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.common.MonthlySearchVolume
 */
export const MonthlySearchVolume = new MonthlySearchVolume$Type();
// @generated message type with reflection information, may provide speed optimized methods
class KeywordPlanAggregateMetrics$Type extends MessageType<KeywordPlanAggregateMetrics> {
    constructor() {
        super("google.ads.googleads.v11.common.KeywordPlanAggregateMetrics", [
            { no: 1, name: "aggregate_metric_types", kind: "enum", repeat: 1 /*RepeatType.PACKED*/, T: () => ["google.ads.googleads.v11.enums.KeywordPlanAggregateMetricTypeEnum.KeywordPlanAggregateMetricType", KeywordPlanAggregateMetricTypeEnum_KeywordPlanAggregateMetricType] }
        ]);
    }
    create(value?: PartialMessage<KeywordPlanAggregateMetrics>): KeywordPlanAggregateMetrics {
        const message = { aggregateMetricTypes: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<KeywordPlanAggregateMetrics>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: KeywordPlanAggregateMetrics): KeywordPlanAggregateMetrics {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated google.ads.googleads.v11.enums.KeywordPlanAggregateMetricTypeEnum.KeywordPlanAggregateMetricType aggregate_metric_types */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.aggregateMetricTypes.push(reader.int32());
                    else
                        message.aggregateMetricTypes.push(reader.int32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: KeywordPlanAggregateMetrics, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated google.ads.googleads.v11.enums.KeywordPlanAggregateMetricTypeEnum.KeywordPlanAggregateMetricType aggregate_metric_types = 1; */
        if (message.aggregateMetricTypes.length) {
            writer.tag(1, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.aggregateMetricTypes.length; i++)
                writer.int32(message.aggregateMetricTypes[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.common.KeywordPlanAggregateMetrics
 */
export const KeywordPlanAggregateMetrics = new KeywordPlanAggregateMetrics$Type();
// @generated message type with reflection information, may provide speed optimized methods
class KeywordPlanAggregateMetricResults$Type extends MessageType<KeywordPlanAggregateMetricResults> {
    constructor() {
        super("google.ads.googleads.v11.common.KeywordPlanAggregateMetricResults", [
            { no: 1, name: "device_searches", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => KeywordPlanDeviceSearches }
        ]);
    }
    create(value?: PartialMessage<KeywordPlanAggregateMetricResults>): KeywordPlanAggregateMetricResults {
        const message = { deviceSearches: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<KeywordPlanAggregateMetricResults>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: KeywordPlanAggregateMetricResults): KeywordPlanAggregateMetricResults {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated google.ads.googleads.v11.common.KeywordPlanDeviceSearches device_searches */ 1:
                    message.deviceSearches.push(KeywordPlanDeviceSearches.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: KeywordPlanAggregateMetricResults, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated google.ads.googleads.v11.common.KeywordPlanDeviceSearches device_searches = 1; */
        for (let i = 0; i < message.deviceSearches.length; i++)
            KeywordPlanDeviceSearches.internalBinaryWrite(message.deviceSearches[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.common.KeywordPlanAggregateMetricResults
 */
export const KeywordPlanAggregateMetricResults = new KeywordPlanAggregateMetricResults$Type();
// @generated message type with reflection information, may provide speed optimized methods
class KeywordPlanDeviceSearches$Type extends MessageType<KeywordPlanDeviceSearches> {
    constructor() {
        super("google.ads.googleads.v11.common.KeywordPlanDeviceSearches", [
            { no: 1, name: "device", kind: "enum", T: () => ["google.ads.googleads.v11.enums.DeviceEnum.Device", DeviceEnum_Device] },
            { no: 2, name: "search_count", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<KeywordPlanDeviceSearches>): KeywordPlanDeviceSearches {
        const message = { device: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<KeywordPlanDeviceSearches>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: KeywordPlanDeviceSearches): KeywordPlanDeviceSearches {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.ads.googleads.v11.enums.DeviceEnum.Device device */ 1:
                    message.device = reader.int32();
                    break;
                case /* optional int64 search_count */ 2:
                    message.searchCount = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: KeywordPlanDeviceSearches, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.ads.googleads.v11.enums.DeviceEnum.Device device = 1; */
        if (message.device !== 0)
            writer.tag(1, WireType.Varint).int32(message.device);
        /* optional int64 search_count = 2; */
        if (message.searchCount !== undefined)
            writer.tag(2, WireType.Varint).int64(message.searchCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.common.KeywordPlanDeviceSearches
 */
export const KeywordPlanDeviceSearches = new KeywordPlanDeviceSearches$Type();
// @generated message type with reflection information, may provide speed optimized methods
class KeywordAnnotations$Type extends MessageType<KeywordAnnotations> {
    constructor() {
        super("google.ads.googleads.v11.common.KeywordAnnotations", [
            { no: 1, name: "concepts", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => KeywordConcept }
        ]);
    }
    create(value?: PartialMessage<KeywordAnnotations>): KeywordAnnotations {
        const message = { concepts: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<KeywordAnnotations>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: KeywordAnnotations): KeywordAnnotations {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated google.ads.googleads.v11.common.KeywordConcept concepts */ 1:
                    message.concepts.push(KeywordConcept.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: KeywordAnnotations, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated google.ads.googleads.v11.common.KeywordConcept concepts = 1; */
        for (let i = 0; i < message.concepts.length; i++)
            KeywordConcept.internalBinaryWrite(message.concepts[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.common.KeywordAnnotations
 */
export const KeywordAnnotations = new KeywordAnnotations$Type();
// @generated message type with reflection information, may provide speed optimized methods
class KeywordConcept$Type extends MessageType<KeywordConcept> {
    constructor() {
        super("google.ads.googleads.v11.common.KeywordConcept", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "concept_group", kind: "message", T: () => ConceptGroup }
        ]);
    }
    create(value?: PartialMessage<KeywordConcept>): KeywordConcept {
        const message = { name: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<KeywordConcept>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: KeywordConcept): KeywordConcept {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* google.ads.googleads.v11.common.ConceptGroup concept_group */ 2:
                    message.conceptGroup = ConceptGroup.internalBinaryRead(reader, reader.uint32(), options, message.conceptGroup);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: KeywordConcept, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* google.ads.googleads.v11.common.ConceptGroup concept_group = 2; */
        if (message.conceptGroup)
            ConceptGroup.internalBinaryWrite(message.conceptGroup, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.common.KeywordConcept
 */
export const KeywordConcept = new KeywordConcept$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ConceptGroup$Type extends MessageType<ConceptGroup> {
    constructor() {
        super("google.ads.googleads.v11.common.ConceptGroup", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "type", kind: "enum", T: () => ["google.ads.googleads.v11.enums.KeywordPlanConceptGroupTypeEnum.KeywordPlanConceptGroupType", KeywordPlanConceptGroupTypeEnum_KeywordPlanConceptGroupType] }
        ]);
    }
    create(value?: PartialMessage<ConceptGroup>): ConceptGroup {
        const message = { name: "", type: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ConceptGroup>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ConceptGroup): ConceptGroup {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* google.ads.googleads.v11.enums.KeywordPlanConceptGroupTypeEnum.KeywordPlanConceptGroupType type */ 2:
                    message.type = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ConceptGroup, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* google.ads.googleads.v11.enums.KeywordPlanConceptGroupTypeEnum.KeywordPlanConceptGroupType type = 2; */
        if (message.type !== 0)
            writer.tag(2, WireType.Varint).int32(message.type);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.common.ConceptGroup
 */
export const ConceptGroup = new ConceptGroup$Type();
