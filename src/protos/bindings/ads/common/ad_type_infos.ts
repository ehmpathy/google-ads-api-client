// @generated by protobuf-ts 2.8.1
// @generated from protobuf file "ads/common/ad_type_infos.proto" (package "google.ads.googleads.v11.common", syntax proto3)
// tslint:disable
//
// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { AdDiscoveryCarouselCardAsset } from "./ad_asset";
import { CallConversionReportingStateEnum_CallConversionReportingState } from "../enums/call_conversion_reporting_state";
import { DisplayUploadProductTypeEnum_DisplayUploadProductType } from "../enums/display_upload_product_type";
import { LegacyAppInstallAdAppStoreEnum_LegacyAppInstallAdAppStore } from "../enums/legacy_app_install_ad_app_store";
import { AdMediaBundleAsset } from "./ad_asset";
import { DisplayAdFormatSettingEnum_DisplayAdFormatSetting } from "../enums/display_ad_format_setting";
import { AdTextAsset } from "./ad_asset";
import { AdVideoAsset } from "./ad_asset";
import { VideoThumbnailEnum_VideoThumbnail } from "../enums/video_thumbnail";
import { AdImageAsset } from "./ad_asset";
import { MimeTypeEnum_MimeType } from "../enums/mime_type";
// Proto file containing info messages for specific ad types.

/**
 * A text ad.
 *
 * @generated from protobuf message google.ads.googleads.v11.common.TextAdInfo
 */
export interface TextAdInfo {
    /**
     * The headline of the ad.
     *
     * @generated from protobuf field: optional string headline = 4;
     */
    headline?: string;
    /**
     * The first line of the ad's description.
     *
     * @generated from protobuf field: optional string description1 = 5;
     */
    description1?: string;
    /**
     * The second line of the ad's description.
     *
     * @generated from protobuf field: optional string description2 = 6;
     */
    description2?: string;
}
/**
 * An expanded text ad.
 *
 * @generated from protobuf message google.ads.googleads.v11.common.ExpandedTextAdInfo
 */
export interface ExpandedTextAdInfo {
    /**
     * The first part of the ad's headline.
     *
     * @generated from protobuf field: optional string headline_part1 = 8;
     */
    headlinePart1?: string;
    /**
     * The second part of the ad's headline.
     *
     * @generated from protobuf field: optional string headline_part2 = 9;
     */
    headlinePart2?: string;
    /**
     * The third part of the ad's headline.
     *
     * @generated from protobuf field: optional string headline_part3 = 10;
     */
    headlinePart3?: string;
    /**
     * The description of the ad.
     *
     * @generated from protobuf field: optional string description = 11;
     */
    description?: string;
    /**
     * The second description of the ad.
     *
     * @generated from protobuf field: optional string description2 = 12;
     */
    description2?: string;
    /**
     * The text that can appear alongside the ad's displayed URL.
     *
     * @generated from protobuf field: optional string path1 = 13;
     */
    path1?: string;
    /**
     * Additional text that can appear alongside the ad's displayed URL.
     *
     * @generated from protobuf field: optional string path2 = 14;
     */
    path2?: string;
}
/**
 * An expanded dynamic search ad.
 *
 * @generated from protobuf message google.ads.googleads.v11.common.ExpandedDynamicSearchAdInfo
 */
export interface ExpandedDynamicSearchAdInfo {
    /**
     * The description of the ad.
     *
     * @generated from protobuf field: optional string description = 3;
     */
    description?: string;
    /**
     * The second description of the ad.
     *
     * @generated from protobuf field: optional string description2 = 4;
     */
    description2?: string;
}
/**
 * A hotel ad.
 *
 * @generated from protobuf message google.ads.googleads.v11.common.HotelAdInfo
 */
export interface HotelAdInfo {
}
/**
 * A Smart Shopping ad.
 *
 * @generated from protobuf message google.ads.googleads.v11.common.ShoppingSmartAdInfo
 */
export interface ShoppingSmartAdInfo {
}
/**
 * A standard Shopping ad.
 *
 * @generated from protobuf message google.ads.googleads.v11.common.ShoppingProductAdInfo
 */
export interface ShoppingProductAdInfo {
}
/**
 * A Shopping Comparison Listing ad.
 *
 * @generated from protobuf message google.ads.googleads.v11.common.ShoppingComparisonListingAdInfo
 */
export interface ShoppingComparisonListingAdInfo {
    /**
     * Headline of the ad. This field is required. Allowed length is between 25
     * and 45 characters.
     *
     * @generated from protobuf field: optional string headline = 2;
     */
    headline?: string;
}
/**
 * A Gmail ad.
 *
 * @generated from protobuf message google.ads.googleads.v11.common.GmailAdInfo
 */
export interface GmailAdInfo {
    /**
     * The Gmail teaser.
     *
     * @generated from protobuf field: google.ads.googleads.v11.common.GmailTeaser teaser = 1;
     */
    teaser?: GmailTeaser;
    /**
     * The MediaFile resource name of the header image. Valid image types are GIF,
     * JPEG and PNG. The minimum size is 300x100 pixels and the aspect ratio must
     * be between 3:1 and 5:1 (+-1%).
     *
     * @generated from protobuf field: optional string header_image = 10;
     */
    headerImage?: string;
    /**
     * The MediaFile resource name of the marketing image. Valid image types are
     * GIF, JPEG and PNG. The image must either be landscape with a minimum size
     * of 600x314 pixels and aspect ratio of 600:314 (+-1%) or square with a
     * minimum size of 300x300 pixels and aspect ratio of 1:1 (+-1%)
     *
     * @generated from protobuf field: optional string marketing_image = 11;
     */
    marketingImage?: string;
    /**
     * Headline of the marketing image.
     *
     * @generated from protobuf field: optional string marketing_image_headline = 12;
     */
    marketingImageHeadline?: string;
    /**
     * Description of the marketing image.
     *
     * @generated from protobuf field: optional string marketing_image_description = 13;
     */
    marketingImageDescription?: string;
    /**
     * Display-call-to-action of the marketing image.
     *
     * @generated from protobuf field: google.ads.googleads.v11.common.DisplayCallToAction marketing_image_display_call_to_action = 6;
     */
    marketingImageDisplayCallToAction?: DisplayCallToAction;
    /**
     * Product images. Up to 15 images are supported.
     *
     * @generated from protobuf field: repeated google.ads.googleads.v11.common.ProductImage product_images = 7;
     */
    productImages: ProductImage[];
    /**
     * Product videos. Up to 7 videos are supported. At least one product video
     * or a marketing image must be specified.
     *
     * @generated from protobuf field: repeated google.ads.googleads.v11.common.ProductVideo product_videos = 8;
     */
    productVideos: ProductVideo[];
}
/**
 * Gmail teaser data. The teaser is a small header that acts as an invitation
 * to view the rest of the ad (the body).
 *
 * @generated from protobuf message google.ads.googleads.v11.common.GmailTeaser
 */
export interface GmailTeaser {
    /**
     * Headline of the teaser.
     *
     * @generated from protobuf field: optional string headline = 5;
     */
    headline?: string;
    /**
     * Description of the teaser.
     *
     * @generated from protobuf field: optional string description = 6;
     */
    description?: string;
    /**
     * Business name of the advertiser.
     *
     * @generated from protobuf field: optional string business_name = 7;
     */
    businessName?: string;
    /**
     * The MediaFile resource name of the logo image. Valid image types are GIF,
     * JPEG and PNG. The minimum size is 144x144 pixels and the aspect ratio must
     * be 1:1 (+-1%).
     *
     * @generated from protobuf field: optional string logo_image = 8;
     */
    logoImage?: string;
}
/**
 * Data for display call to action. The call to action is a piece of the ad
 * that prompts the user to do something. Like clicking a link or making a phone
 * call.
 *
 * @generated from protobuf message google.ads.googleads.v11.common.DisplayCallToAction
 */
export interface DisplayCallToAction {
    /**
     * Text for the display-call-to-action.
     *
     * @generated from protobuf field: optional string text = 5;
     */
    text?: string;
    /**
     * Text color for the display-call-to-action in hexadecimal, for example,
     * # ffffff for white.
     *
     * @generated from protobuf field: optional string text_color = 6;
     */
    textColor?: string;
    /**
     * Identifies the URL collection in the `ad.url_collections` field. If not
     * set, the URL defaults to `final_url`.
     *
     * @generated from protobuf field: optional string url_collection_id = 7;
     */
    urlCollectionId?: string;
}
/**
 * Product image specific data.
 *
 * @generated from protobuf message google.ads.googleads.v11.common.ProductImage
 */
export interface ProductImage {
    /**
     * The MediaFile resource name of the product image. Valid image types are
     * GIF, JPEG and PNG. The minimum size is 300x300 pixels and the aspect ratio
     * must be 1:1 (+-1%).
     *
     * @generated from protobuf field: optional string product_image = 4;
     */
    productImage?: string;
    /**
     * Description of the product.
     *
     * @generated from protobuf field: optional string description = 5;
     */
    description?: string;
    /**
     * Display-call-to-action of the product image.
     *
     * @generated from protobuf field: google.ads.googleads.v11.common.DisplayCallToAction display_call_to_action = 3;
     */
    displayCallToAction?: DisplayCallToAction;
}
/**
 * Product video specific data.
 *
 * @generated from protobuf message google.ads.googleads.v11.common.ProductVideo
 */
export interface ProductVideo {
    /**
     * The MediaFile resource name of a video which must be hosted on YouTube.
     *
     * @generated from protobuf field: optional string product_video = 2;
     */
    productVideo?: string;
}
/**
 * An image ad.
 *
 * @generated from protobuf message google.ads.googleads.v11.common.ImageAdInfo
 */
export interface ImageAdInfo {
    /**
     * Width in pixels of the full size image.
     *
     * @generated from protobuf field: optional int64 pixel_width = 15;
     */
    pixelWidth?: bigint;
    /**
     * Height in pixels of the full size image.
     *
     * @generated from protobuf field: optional int64 pixel_height = 16;
     */
    pixelHeight?: bigint;
    /**
     * URL of the full size image.
     *
     * @generated from protobuf field: optional string image_url = 17;
     */
    imageUrl?: string;
    /**
     * Width in pixels of the preview size image.
     *
     * @generated from protobuf field: optional int64 preview_pixel_width = 18;
     */
    previewPixelWidth?: bigint;
    /**
     * Height in pixels of the preview size image.
     *
     * @generated from protobuf field: optional int64 preview_pixel_height = 19;
     */
    previewPixelHeight?: bigint;
    /**
     * URL of the preview size image.
     *
     * @generated from protobuf field: optional string preview_image_url = 20;
     */
    previewImageUrl?: string;
    /**
     * The mime type of the image.
     *
     * @generated from protobuf field: google.ads.googleads.v11.enums.MimeTypeEnum.MimeType mime_type = 10;
     */
    mimeType: MimeTypeEnum_MimeType;
    /**
     * The name of the image. If the image was created from a MediaFile, this is
     * the MediaFile's name. If the image was created from bytes, this is empty.
     *
     * @generated from protobuf field: optional string name = 21;
     */
    name?: string;
    /**
     * @generated from protobuf oneof: image
     */
    image: {
        oneofKind: "mediaFile";
        /**
         * The MediaFile resource to use for the image.
         *
         * @generated from protobuf field: string media_file = 12;
         */
        mediaFile: string;
    } | {
        oneofKind: "data";
        /**
         * Raw image data as bytes.
         *
         * @generated from protobuf field: bytes data = 13;
         */
        data: Uint8Array;
    } | {
        oneofKind: "adIdToCopyImageFrom";
        /**
         * An ad ID to copy the image from.
         *
         * @generated from protobuf field: int64 ad_id_to_copy_image_from = 14;
         */
        adIdToCopyImageFrom: bigint;
    } | {
        oneofKind: undefined;
    };
}
/**
 * Representation of video bumper in-stream ad format (very short in-stream
 * non-skippable video ad).
 *
 * @generated from protobuf message google.ads.googleads.v11.common.VideoBumperInStreamAdInfo
 */
export interface VideoBumperInStreamAdInfo {
    /**
     * The image assets of the companion banner used with the ad.
     *
     * @generated from protobuf field: google.ads.googleads.v11.common.AdImageAsset companion_banner = 3;
     */
    companionBanner?: AdImageAsset;
}
/**
 * Representation of video non-skippable in-stream ad format (15 second
 * in-stream non-skippable video ad).
 *
 * @generated from protobuf message google.ads.googleads.v11.common.VideoNonSkippableInStreamAdInfo
 */
export interface VideoNonSkippableInStreamAdInfo {
    /**
     * The image assets of the companion banner used with the ad.
     *
     * @generated from protobuf field: google.ads.googleads.v11.common.AdImageAsset companion_banner = 5;
     */
    companionBanner?: AdImageAsset;
    /**
     * Label on the "Call To Action" button taking the user to the video ad's
     * final URL.
     *
     * @generated from protobuf field: string action_button_label = 3;
     */
    actionButtonLabel: string;
    /**
     * Additional text displayed with the "Call To Action" button to give
     * context and encourage clicking on the button.
     *
     * @generated from protobuf field: string action_headline = 4;
     */
    actionHeadline: string;
}
/**
 * Representation of video TrueView in-stream ad format (ad shown during video
 * playback, often at beginning, which displays a skip button a few seconds into
 * the video).
 *
 * @generated from protobuf message google.ads.googleads.v11.common.VideoTrueViewInStreamAdInfo
 */
export interface VideoTrueViewInStreamAdInfo {
    /**
     * Label on the CTA (call-to-action) button taking the user to the video ad's
     * final URL.
     * Required for TrueView for action campaigns, optional otherwise.
     *
     * @generated from protobuf field: string action_button_label = 4;
     */
    actionButtonLabel: string;
    /**
     * Additional text displayed with the CTA (call-to-action) button to give
     * context and encourage clicking on the button.
     *
     * @generated from protobuf field: string action_headline = 5;
     */
    actionHeadline: string;
    /**
     * The image assets of the companion banner used with the ad.
     *
     * @generated from protobuf field: google.ads.googleads.v11.common.AdImageAsset companion_banner = 7;
     */
    companionBanner?: AdImageAsset;
}
/**
 * Representation of video out-stream ad format (ad shown alongside a feed
 * with automatic playback, without sound).
 *
 * @generated from protobuf message google.ads.googleads.v11.common.VideoOutstreamAdInfo
 */
export interface VideoOutstreamAdInfo {
    /**
     * The headline of the ad.
     *
     * @generated from protobuf field: string headline = 3;
     */
    headline: string;
    /**
     * The description line.
     *
     * @generated from protobuf field: string description = 4;
     */
    description: string;
}
/**
 * Representation of In-feed video ad format.
 *
 * @generated from protobuf message google.ads.googleads.v11.common.InFeedVideoAdInfo
 */
export interface InFeedVideoAdInfo {
    /**
     * The headline of the ad.
     *
     * @generated from protobuf field: string headline = 1;
     */
    headline: string;
    /**
     * First text line for the ad.
     *
     * @generated from protobuf field: string description1 = 2;
     */
    description1: string;
    /**
     * Second text line for the ad.
     *
     * @generated from protobuf field: string description2 = 3;
     */
    description2: string;
    /**
     * Video thumbnail image to use.
     *
     * @generated from protobuf field: google.ads.googleads.v11.enums.VideoThumbnailEnum.VideoThumbnail thumbnail = 4;
     */
    thumbnail: VideoThumbnailEnum_VideoThumbnail;
}
/**
 * A video ad.
 *
 * @generated from protobuf message google.ads.googleads.v11.common.VideoAdInfo
 */
export interface VideoAdInfo {
    /**
     * The YouTube video assets used for the ad.
     *
     * @generated from protobuf field: google.ads.googleads.v11.common.AdVideoAsset video = 8;
     */
    video?: AdVideoAsset;
    /**
     * @generated from protobuf oneof: format
     */
    format: {
        oneofKind: "inStream";
        /**
         * Video TrueView in-stream ad format.
         *
         * @generated from protobuf field: google.ads.googleads.v11.common.VideoTrueViewInStreamAdInfo in_stream = 2;
         */
        inStream: VideoTrueViewInStreamAdInfo;
    } | {
        oneofKind: "bumper";
        /**
         * Video bumper in-stream ad format.
         *
         * @generated from protobuf field: google.ads.googleads.v11.common.VideoBumperInStreamAdInfo bumper = 3;
         */
        bumper: VideoBumperInStreamAdInfo;
    } | {
        oneofKind: "outStream";
        /**
         * Video out-stream ad format.
         *
         * @generated from protobuf field: google.ads.googleads.v11.common.VideoOutstreamAdInfo out_stream = 4;
         */
        outStream: VideoOutstreamAdInfo;
    } | {
        oneofKind: "nonSkippable";
        /**
         * Video non-skippable in-stream ad format.
         *
         * @generated from protobuf field: google.ads.googleads.v11.common.VideoNonSkippableInStreamAdInfo non_skippable = 5;
         */
        nonSkippable: VideoNonSkippableInStreamAdInfo;
    } | {
        oneofKind: "inFeed";
        /**
         * In-feed video ad format.
         *
         * @generated from protobuf field: google.ads.googleads.v11.common.InFeedVideoAdInfo in_feed = 9;
         */
        inFeed: InFeedVideoAdInfo;
    } | {
        oneofKind: undefined;
    };
}
/**
 * A video responsive ad.
 *
 * @generated from protobuf message google.ads.googleads.v11.common.VideoResponsiveAdInfo
 */
export interface VideoResponsiveAdInfo {
    /**
     * List of text assets used for the short headline, for example, the "Call To
     * Action" banner. Currently, only a single value for the short headline is
     * supported.
     *
     * @generated from protobuf field: repeated google.ads.googleads.v11.common.AdTextAsset headlines = 1;
     */
    headlines: AdTextAsset[];
    /**
     * List of text assets used for the long headline.
     * Currently, only a single value for the long headline is supported.
     *
     * @generated from protobuf field: repeated google.ads.googleads.v11.common.AdTextAsset long_headlines = 2;
     */
    longHeadlines: AdTextAsset[];
    /**
     * List of text assets used for the description.
     * Currently, only a single value for the description is supported.
     *
     * @generated from protobuf field: repeated google.ads.googleads.v11.common.AdTextAsset descriptions = 3;
     */
    descriptions: AdTextAsset[];
    /**
     * List of text assets used for the button, for example, the "Call To Action"
     * button. Currently, only a single value for the button is supported.
     *
     * @generated from protobuf field: repeated google.ads.googleads.v11.common.AdTextAsset call_to_actions = 4;
     */
    callToActions: AdTextAsset[];
    /**
     * List of YouTube video assets used for the ad.
     * Currently, only a single value for the YouTube video asset is supported.
     *
     * @generated from protobuf field: repeated google.ads.googleads.v11.common.AdVideoAsset videos = 5;
     */
    videos: AdVideoAsset[];
    /**
     * List of image assets used for the companion banner.
     * Currently, only a single value for the companion banner asset is supported.
     *
     * @generated from protobuf field: repeated google.ads.googleads.v11.common.AdImageAsset companion_banners = 6;
     */
    companionBanners: AdImageAsset[];
    /**
     * First part of text that appears in the ad with the displayed URL.
     *
     * @generated from protobuf field: string breadcrumb1 = 7;
     */
    breadcrumb1: string;
    /**
     * Second part of text that appears in the ad with the displayed URL.
     *
     * @generated from protobuf field: string breadcrumb2 = 8;
     */
    breadcrumb2: string;
}
/**
 * A responsive search ad.
 *
 * Responsive search ads let you create an ad that adapts to show more text, and
 * more relevant messages, to your customers. Enter multiple headlines and
 * descriptions when creating a responsive search ad, and over time, Google Ads
 * will automatically test different combinations and learn which combinations
 * perform best. By adapting your ad's content to more closely match potential
 * customers' search terms, responsive search ads may improve your campaign's
 * performance.
 *
 * More information at https://support.google.com/google-ads/answer/7684791
 *
 * @generated from protobuf message google.ads.googleads.v11.common.ResponsiveSearchAdInfo
 */
export interface ResponsiveSearchAdInfo {
    /**
     * List of text assets for headlines. When the ad serves the headlines will
     * be selected from this list.
     *
     * @generated from protobuf field: repeated google.ads.googleads.v11.common.AdTextAsset headlines = 1;
     */
    headlines: AdTextAsset[];
    /**
     * List of text assets for descriptions. When the ad serves the descriptions
     * will be selected from this list.
     *
     * @generated from protobuf field: repeated google.ads.googleads.v11.common.AdTextAsset descriptions = 2;
     */
    descriptions: AdTextAsset[];
    /**
     * First part of text that can be appended to the URL in the ad.
     *
     * @generated from protobuf field: optional string path1 = 5;
     */
    path1?: string;
    /**
     * Second part of text that can be appended to the URL in the ad. This field
     * can only be set when `path1` is also set.
     *
     * @generated from protobuf field: optional string path2 = 6;
     */
    path2?: string;
}
/**
 * A legacy responsive display ad. Ads of this type are labeled 'Responsive ads'
 * in the Google Ads UI.
 *
 * @generated from protobuf message google.ads.googleads.v11.common.LegacyResponsiveDisplayAdInfo
 */
export interface LegacyResponsiveDisplayAdInfo {
    /**
     * The short version of the ad's headline.
     *
     * @generated from protobuf field: optional string short_headline = 16;
     */
    shortHeadline?: string;
    /**
     * The long version of the ad's headline.
     *
     * @generated from protobuf field: optional string long_headline = 17;
     */
    longHeadline?: string;
    /**
     * The description of the ad.
     *
     * @generated from protobuf field: optional string description = 18;
     */
    description?: string;
    /**
     * The business name in the ad.
     *
     * @generated from protobuf field: optional string business_name = 19;
     */
    businessName?: string;
    /**
     * Advertiser's consent to allow flexible color. When true, the ad may be
     * served with different color if necessary. When false, the ad will be served
     * with the specified colors or a neutral color.
     * The default value is `true`.
     * Must be true if `main_color` and `accent_color` are not set.
     *
     * @generated from protobuf field: optional bool allow_flexible_color = 20;
     */
    allowFlexibleColor?: boolean;
    /**
     * The accent color of the ad in hexadecimal, for example, #ffffff for white.
     * If one of `main_color` and `accent_color` is set, the other is required as
     * well.
     *
     * @generated from protobuf field: optional string accent_color = 21;
     */
    accentColor?: string;
    /**
     * The main color of the ad in hexadecimal, for example, #ffffff for white.
     * If one of `main_color` and `accent_color` is set, the other is required as
     * well.
     *
     * @generated from protobuf field: optional string main_color = 22;
     */
    mainColor?: string;
    /**
     * The call-to-action text for the ad.
     *
     * @generated from protobuf field: optional string call_to_action_text = 23;
     */
    callToActionText?: string;
    /**
     * The MediaFile resource name of the logo image used in the ad.
     *
     * @generated from protobuf field: optional string logo_image = 24;
     */
    logoImage?: string;
    /**
     * The MediaFile resource name of the square logo image used in the ad.
     *
     * @generated from protobuf field: optional string square_logo_image = 25;
     */
    squareLogoImage?: string;
    /**
     * The MediaFile resource name of the marketing image used in the ad.
     *
     * @generated from protobuf field: optional string marketing_image = 26;
     */
    marketingImage?: string;
    /**
     * The MediaFile resource name of the square marketing image used in the ad.
     *
     * @generated from protobuf field: optional string square_marketing_image = 27;
     */
    squareMarketingImage?: string;
    /**
     * Specifies which format the ad will be served in. Default is ALL_FORMATS.
     *
     * @generated from protobuf field: google.ads.googleads.v11.enums.DisplayAdFormatSettingEnum.DisplayAdFormatSetting format_setting = 13;
     */
    formatSetting: DisplayAdFormatSettingEnum_DisplayAdFormatSetting;
    /**
     * Prefix before price. For example, 'as low as'.
     *
     * @generated from protobuf field: optional string price_prefix = 28;
     */
    pricePrefix?: string;
    /**
     * Promotion text used for dynamic formats of responsive ads. For example
     * 'Free two-day shipping'.
     *
     * @generated from protobuf field: optional string promo_text = 29;
     */
    promoText?: string;
}
/**
 * An app ad.
 *
 * @generated from protobuf message google.ads.googleads.v11.common.AppAdInfo
 */
export interface AppAdInfo {
    /**
     * Mandatory ad text.
     *
     * @generated from protobuf field: google.ads.googleads.v11.common.AdTextAsset mandatory_ad_text = 1;
     */
    mandatoryAdText?: AdTextAsset;
    /**
     * List of text assets for headlines. When the ad serves the headlines will
     * be selected from this list.
     *
     * @generated from protobuf field: repeated google.ads.googleads.v11.common.AdTextAsset headlines = 2;
     */
    headlines: AdTextAsset[];
    /**
     * List of text assets for descriptions. When the ad serves the descriptions
     * will be selected from this list.
     *
     * @generated from protobuf field: repeated google.ads.googleads.v11.common.AdTextAsset descriptions = 3;
     */
    descriptions: AdTextAsset[];
    /**
     * List of image assets that may be displayed with the ad.
     *
     * @generated from protobuf field: repeated google.ads.googleads.v11.common.AdImageAsset images = 4;
     */
    images: AdImageAsset[];
    /**
     * List of YouTube video assets that may be displayed with the ad.
     *
     * @generated from protobuf field: repeated google.ads.googleads.v11.common.AdVideoAsset youtube_videos = 5;
     */
    youtubeVideos: AdVideoAsset[];
    /**
     * List of media bundle assets that may be used with the ad.
     *
     * @generated from protobuf field: repeated google.ads.googleads.v11.common.AdMediaBundleAsset html5_media_bundles = 6;
     */
    html5MediaBundles: AdMediaBundleAsset[];
}
/**
 * App engagement ads allow you to write text encouraging a specific action in
 * the app, like checking in, making a purchase, or booking a flight.
 * They allow you to send users to a specific part of your app where they can
 * find what they're looking for easier and faster.
 *
 * @generated from protobuf message google.ads.googleads.v11.common.AppEngagementAdInfo
 */
export interface AppEngagementAdInfo {
    /**
     * List of text assets for headlines. When the ad serves the headlines will
     * be selected from this list.
     *
     * @generated from protobuf field: repeated google.ads.googleads.v11.common.AdTextAsset headlines = 1;
     */
    headlines: AdTextAsset[];
    /**
     * List of text assets for descriptions. When the ad serves the descriptions
     * will be selected from this list.
     *
     * @generated from protobuf field: repeated google.ads.googleads.v11.common.AdTextAsset descriptions = 2;
     */
    descriptions: AdTextAsset[];
    /**
     * List of image assets that may be displayed with the ad.
     *
     * @generated from protobuf field: repeated google.ads.googleads.v11.common.AdImageAsset images = 3;
     */
    images: AdImageAsset[];
    /**
     * List of video assets that may be displayed with the ad.
     *
     * @generated from protobuf field: repeated google.ads.googleads.v11.common.AdVideoAsset videos = 4;
     */
    videos: AdVideoAsset[];
}
/**
 * App pre-registration ads link to your app or game listing on Google Play, and
 * can run on Google Play, on YouTube (in-stream only), and within other apps
 * and mobile websites on the Display Network. It will help capture people's
 * interest in your app or game and generate an early install base for your app
 * or game before a launch.
 *
 * @generated from protobuf message google.ads.googleads.v11.common.AppPreRegistrationAdInfo
 */
export interface AppPreRegistrationAdInfo {
    /**
     * List of text assets for headlines. When the ad serves the headlines will
     * be selected from this list.
     *
     * @generated from protobuf field: repeated google.ads.googleads.v11.common.AdTextAsset headlines = 1;
     */
    headlines: AdTextAsset[];
    /**
     * List of text assets for descriptions. When the ad serves the descriptions
     * will be selected from this list.
     *
     * @generated from protobuf field: repeated google.ads.googleads.v11.common.AdTextAsset descriptions = 2;
     */
    descriptions: AdTextAsset[];
    /**
     * List of image asset IDs whose images may be displayed with the ad.
     *
     * @generated from protobuf field: repeated google.ads.googleads.v11.common.AdImageAsset images = 3;
     */
    images: AdImageAsset[];
    /**
     * List of YouTube video asset IDs whose videos may be displayed with the ad.
     *
     * @generated from protobuf field: repeated google.ads.googleads.v11.common.AdVideoAsset youtube_videos = 4;
     */
    youtubeVideos: AdVideoAsset[];
}
/**
 * A legacy app install ad that only can be used by a few select customers.
 *
 * @generated from protobuf message google.ads.googleads.v11.common.LegacyAppInstallAdInfo
 */
export interface LegacyAppInstallAdInfo {
    /**
     * The ID of the mobile app.
     *
     * @generated from protobuf field: optional string app_id = 6;
     */
    appId?: string;
    /**
     * The app store the mobile app is available in.
     *
     * @generated from protobuf field: google.ads.googleads.v11.enums.LegacyAppInstallAdAppStoreEnum.LegacyAppInstallAdAppStore app_store = 2;
     */
    appStore: LegacyAppInstallAdAppStoreEnum_LegacyAppInstallAdAppStore;
    /**
     * The headline of the ad.
     *
     * @generated from protobuf field: optional string headline = 7;
     */
    headline?: string;
    /**
     * The first description line of the ad.
     *
     * @generated from protobuf field: optional string description1 = 8;
     */
    description1?: string;
    /**
     * The second description line of the ad.
     *
     * @generated from protobuf field: optional string description2 = 9;
     */
    description2?: string;
}
/**
 * A responsive display ad.
 *
 * @generated from protobuf message google.ads.googleads.v11.common.ResponsiveDisplayAdInfo
 */
export interface ResponsiveDisplayAdInfo {
    /**
     * Marketing images to be used in the ad. Valid image types are GIF,
     * JPEG, and PNG. The minimum size is 600x314 and the aspect ratio must
     * be 1.91:1 (+-1%). At least one `marketing_image` is required. Combined
     * with `square_marketing_images`, the maximum is 15.
     *
     * @generated from protobuf field: repeated google.ads.googleads.v11.common.AdImageAsset marketing_images = 1;
     */
    marketingImages: AdImageAsset[];
    /**
     * Square marketing images to be used in the ad. Valid image types are GIF,
     * JPEG, and PNG. The minimum size is 300x300 and the aspect ratio must
     * be 1:1 (+-1%). At least one square `marketing_image` is required. Combined
     * with `marketing_images`, the maximum is 15.
     *
     * @generated from protobuf field: repeated google.ads.googleads.v11.common.AdImageAsset square_marketing_images = 2;
     */
    squareMarketingImages: AdImageAsset[];
    /**
     * Logo images to be used in the ad. Valid image types are GIF,
     * JPEG, and PNG. The minimum size is 512x128 and the aspect ratio must
     * be 4:1 (+-1%). Combined with `square_logo_images`, the maximum is 5.
     *
     * @generated from protobuf field: repeated google.ads.googleads.v11.common.AdImageAsset logo_images = 3;
     */
    logoImages: AdImageAsset[];
    /**
     * Square logo images to be used in the ad. Valid image types are GIF,
     * JPEG, and PNG. The minimum size is 128x128 and the aspect ratio must
     * be 1:1 (+-1%). Combined with `square_logo_images`, the maximum is 5.
     *
     * @generated from protobuf field: repeated google.ads.googleads.v11.common.AdImageAsset square_logo_images = 4;
     */
    squareLogoImages: AdImageAsset[];
    /**
     * Short format headlines for the ad. The maximum length is 30 characters.
     * At least 1 and max 5 headlines can be specified.
     *
     * @generated from protobuf field: repeated google.ads.googleads.v11.common.AdTextAsset headlines = 5;
     */
    headlines: AdTextAsset[];
    /**
     * A required long format headline. The maximum length is 90 characters.
     *
     * @generated from protobuf field: google.ads.googleads.v11.common.AdTextAsset long_headline = 6;
     */
    longHeadline?: AdTextAsset;
    /**
     * Descriptive texts for the ad. The maximum length is 90 characters. At
     * least 1 and max 5 headlines can be specified.
     *
     * @generated from protobuf field: repeated google.ads.googleads.v11.common.AdTextAsset descriptions = 7;
     */
    descriptions: AdTextAsset[];
    /**
     * Optional YouTube videos for the ad. A maximum of 5 videos can be specified.
     *
     * @generated from protobuf field: repeated google.ads.googleads.v11.common.AdVideoAsset youtube_videos = 8;
     */
    youtubeVideos: AdVideoAsset[];
    /**
     * The advertiser/brand name. Maximum display width is 25.
     *
     * @generated from protobuf field: optional string business_name = 17;
     */
    businessName?: string;
    /**
     * The main color of the ad in hexadecimal, for example, #ffffff for white.
     * If one of `main_color` and `accent_color` is set, the other is required as
     * well.
     *
     * @generated from protobuf field: optional string main_color = 18;
     */
    mainColor?: string;
    /**
     * The accent color of the ad in hexadecimal, for example, #ffffff for white.
     * If one of `main_color` and `accent_color` is set, the other is required as
     * well.
     *
     * @generated from protobuf field: optional string accent_color = 19;
     */
    accentColor?: string;
    /**
     * Advertiser's consent to allow flexible color. When true, the ad may be
     * served with different color if necessary. When false, the ad will be served
     * with the specified colors or a neutral color.
     * The default value is `true`.
     * Must be true if `main_color` and `accent_color` are not set.
     *
     * @generated from protobuf field: optional bool allow_flexible_color = 20;
     */
    allowFlexibleColor?: boolean;
    /**
     * The call-to-action text for the ad. Maximum display width is 30.
     *
     * @generated from protobuf field: optional string call_to_action_text = 21;
     */
    callToActionText?: string;
    /**
     * Prefix before price. For example, 'as low as'.
     *
     * @generated from protobuf field: optional string price_prefix = 22;
     */
    pricePrefix?: string;
    /**
     * Promotion text used for dynamic formats of responsive ads. For example
     * 'Free two-day shipping'.
     *
     * @generated from protobuf field: optional string promo_text = 23;
     */
    promoText?: string;
    /**
     * Specifies which format the ad will be served in. Default is ALL_FORMATS.
     *
     * @generated from protobuf field: google.ads.googleads.v11.enums.DisplayAdFormatSettingEnum.DisplayAdFormatSetting format_setting = 16;
     */
    formatSetting: DisplayAdFormatSettingEnum_DisplayAdFormatSetting;
    /**
     * Specification for various creative controls.
     *
     * @generated from protobuf field: google.ads.googleads.v11.common.ResponsiveDisplayAdControlSpec control_spec = 24;
     */
    controlSpec?: ResponsiveDisplayAdControlSpec;
}
/**
 * A local ad.
 *
 * @generated from protobuf message google.ads.googleads.v11.common.LocalAdInfo
 */
export interface LocalAdInfo {
    /**
     * List of text assets for headlines. When the ad serves the headlines will
     * be selected from this list. At least 1 and at most 5 headlines must be
     * specified.
     *
     * @generated from protobuf field: repeated google.ads.googleads.v11.common.AdTextAsset headlines = 1;
     */
    headlines: AdTextAsset[];
    /**
     * List of text assets for descriptions. When the ad serves the descriptions
     * will be selected from this list. At least 1 and at most 5 descriptions must
     * be specified.
     *
     * @generated from protobuf field: repeated google.ads.googleads.v11.common.AdTextAsset descriptions = 2;
     */
    descriptions: AdTextAsset[];
    /**
     * List of text assets for call-to-actions. When the ad serves the
     * call-to-actions will be selected from this list. Call-to-actions are
     * optional and at most 5 can be specified.
     *
     * @generated from protobuf field: repeated google.ads.googleads.v11.common.AdTextAsset call_to_actions = 3;
     */
    callToActions: AdTextAsset[];
    /**
     * List of marketing image assets that may be displayed with the ad. The
     * images must be 314x600 pixels or 320x320 pixels. At least 1 and at most
     * 20 image assets must be specified.
     *
     * @generated from protobuf field: repeated google.ads.googleads.v11.common.AdImageAsset marketing_images = 4;
     */
    marketingImages: AdImageAsset[];
    /**
     * List of logo image assets that may be displayed with the ad. The images
     * must be 128x128 pixels and not larger than 120KB. At least 1 and at most 5
     * image assets must be specified.
     *
     * @generated from protobuf field: repeated google.ads.googleads.v11.common.AdImageAsset logo_images = 5;
     */
    logoImages: AdImageAsset[];
    /**
     * List of YouTube video assets that may be displayed with the ad. Videos
     * are optional and at most 20 can be specified.
     *
     * @generated from protobuf field: repeated google.ads.googleads.v11.common.AdVideoAsset videos = 6;
     */
    videos: AdVideoAsset[];
    /**
     * First part of optional text that can be appended to the URL in the ad.
     *
     * @generated from protobuf field: optional string path1 = 9;
     */
    path1?: string;
    /**
     * Second part of optional text that can be appended to the URL in the ad.
     * This field can only be set when `path1` is also set.
     *
     * @generated from protobuf field: optional string path2 = 10;
     */
    path2?: string;
}
/**
 * A generic type of display ad. The exact ad format is controlled by the
 * `display_upload_product_type` field, which determines what kinds of data
 * need to be included with the ad.
 *
 * @generated from protobuf message google.ads.googleads.v11.common.DisplayUploadAdInfo
 */
export interface DisplayUploadAdInfo {
    /**
     * The product type of this ad. See comments on the enum for details.
     *
     * @generated from protobuf field: google.ads.googleads.v11.enums.DisplayUploadProductTypeEnum.DisplayUploadProductType display_upload_product_type = 1;
     */
    displayUploadProductType: DisplayUploadProductTypeEnum_DisplayUploadProductType;
    /**
     * @generated from protobuf oneof: media_asset
     */
    mediaAsset: {
        oneofKind: "mediaBundle";
        /**
         * A media bundle asset to be used in the ad. For information about the
         * media bundle for HTML5_UPLOAD_AD, see
         * https://support.google.com/google-ads/answer/1722096
         * Media bundles that are part of dynamic product types use a special format
         * that needs to be created through the Google Web Designer. See
         * https://support.google.com/webdesigner/answer/7543898 for more
         * information.
         *
         * @generated from protobuf field: google.ads.googleads.v11.common.AdMediaBundleAsset media_bundle = 2;
         */
        mediaBundle: AdMediaBundleAsset;
    } | {
        oneofKind: undefined;
    };
}
/**
 * Specification for various creative controls for a responsive display ad.
 *
 * @generated from protobuf message google.ads.googleads.v11.common.ResponsiveDisplayAdControlSpec
 */
export interface ResponsiveDisplayAdControlSpec {
    /**
     * Whether the advertiser has opted into the asset enhancements feature.
     *
     * @generated from protobuf field: bool enable_asset_enhancements = 1;
     */
    enableAssetEnhancements: boolean;
    /**
     * Whether the advertiser has opted into auto-gen video feature.
     *
     * @generated from protobuf field: bool enable_autogen_video = 2;
     */
    enableAutogenVideo: boolean;
}
/**
 * A Smart campaign ad.
 *
 * @generated from protobuf message google.ads.googleads.v11.common.SmartCampaignAdInfo
 */
export interface SmartCampaignAdInfo {
    /**
     * List of text assets, each of which corresponds to a headline when the ad
     * serves. This list consists of a minimum of 3 and up to 15 text assets.
     *
     * @generated from protobuf field: repeated google.ads.googleads.v11.common.AdTextAsset headlines = 1;
     */
    headlines: AdTextAsset[];
    /**
     * List of text assets, each of which corresponds to a description when the ad
     * serves. This list consists of a minimum of 2 and up to 4 text assets.
     *
     * @generated from protobuf field: repeated google.ads.googleads.v11.common.AdTextAsset descriptions = 2;
     */
    descriptions: AdTextAsset[];
}
/**
 * A call ad.
 *
 * @generated from protobuf message google.ads.googleads.v11.common.CallAdInfo
 */
export interface CallAdInfo {
    /**
     * The country code in the ad.
     *
     * @generated from protobuf field: string country_code = 1;
     */
    countryCode: string;
    /**
     * The phone number in the ad.
     *
     * @generated from protobuf field: string phone_number = 2;
     */
    phoneNumber: string;
    /**
     * The business name in the ad.
     *
     * @generated from protobuf field: string business_name = 3;
     */
    businessName: string;
    /**
     * First headline in the ad.
     *
     * @generated from protobuf field: string headline1 = 11;
     */
    headline1: string;
    /**
     * Second headline in the ad.
     *
     * @generated from protobuf field: string headline2 = 12;
     */
    headline2: string;
    /**
     * The first line of the ad's description.
     *
     * @generated from protobuf field: string description1 = 4;
     */
    description1: string;
    /**
     * The second line of the ad's description.
     *
     * @generated from protobuf field: string description2 = 5;
     */
    description2: string;
    /**
     * Whether to enable call tracking for the creative. Enabling call
     * tracking also enables call conversions.
     *
     * @generated from protobuf field: bool call_tracked = 6;
     */
    callTracked: boolean;
    /**
     * Whether to disable call conversion for the creative.
     * If set to `true`, disables call conversions even when `call_tracked` is
     * `true`.
     * If `call_tracked` is `false`, this field is ignored.
     *
     * @generated from protobuf field: bool disable_call_conversion = 7;
     */
    disableCallConversion: boolean;
    /**
     * The URL to be used for phone number verification.
     *
     * @generated from protobuf field: string phone_number_verification_url = 8;
     */
    phoneNumberVerificationUrl: string;
    /**
     * The conversion action to attribute a call conversion to. If not set a
     * default conversion action is used. This field only has effect if
     * `call_tracked` is set to `true`. Otherwise this field is ignored.
     *
     * @generated from protobuf field: string conversion_action = 9;
     */
    conversionAction: string;
    /**
     * The call conversion behavior of this call ad. It can use its own call
     * conversion setting, inherit the account level setting, or be disabled.
     *
     * @generated from protobuf field: google.ads.googleads.v11.enums.CallConversionReportingStateEnum.CallConversionReportingState conversion_reporting_state = 10;
     */
    conversionReportingState: CallConversionReportingStateEnum_CallConversionReportingState;
    /**
     * First part of text that can be appended to the URL in the ad. Optional.
     *
     * @generated from protobuf field: string path1 = 13;
     */
    path1: string;
    /**
     * Second part of text that can be appended to the URL in the ad. This field
     * can only be set when `path1` is also set. Optional.
     *
     * @generated from protobuf field: string path2 = 14;
     */
    path2: string;
}
/**
 * A discovery multi asset ad.
 *
 * @generated from protobuf message google.ads.googleads.v11.common.DiscoveryMultiAssetAdInfo
 */
export interface DiscoveryMultiAssetAdInfo {
    /**
     * Marketing image assets to be used in the ad. Valid image types are GIF,
     * JPEG, and PNG. The minimum size is 600x314 and the aspect ratio must
     * be 1.91:1 (+-1%). Required if square_marketing_images is
     * not present. Combined with `square_marketing_images` and
     * `portrait_marketing_images` the maximum is 20.
     *
     * @generated from protobuf field: repeated google.ads.googleads.v11.common.AdImageAsset marketing_images = 1;
     */
    marketingImages: AdImageAsset[];
    /**
     * Square marketing image assets to be used in the ad. Valid image types are
     * GIF, JPEG, and PNG. The minimum size is 300x300 and the aspect ratio must
     * be 1:1 (+-1%). Required if marketing_images is not present.  Combined with
     * `marketing_images` and `portrait_marketing_images` the maximum is 20.
     *
     * @generated from protobuf field: repeated google.ads.googleads.v11.common.AdImageAsset square_marketing_images = 2;
     */
    squareMarketingImages: AdImageAsset[];
    /**
     * Portrait marketing image assets to be used in the ad. Valid image types are
     * GIF, JPEG, and PNG. The minimum size is 480x600 and the aspect ratio must
     * be 4:5 (+-1%).  Combined with `marketing_images` and
     * `square_marketing_images` the maximum is 20.
     *
     * @generated from protobuf field: repeated google.ads.googleads.v11.common.AdImageAsset portrait_marketing_images = 3;
     */
    portraitMarketingImages: AdImageAsset[];
    /**
     * Logo image assets to be used in the ad. Valid image types are GIF,
     * JPEG, and PNG. The minimum size is 128x128 and the aspect ratio must be
     * 1:1(+-1%). At least 1 and max 5 logo images can be specified.
     *
     * @generated from protobuf field: repeated google.ads.googleads.v11.common.AdImageAsset logo_images = 4;
     */
    logoImages: AdImageAsset[];
    /**
     * Headline text asset of the ad. Maximum display width is 30. At least 1 and
     * max 5 headlines can be specified.
     *
     * @generated from protobuf field: repeated google.ads.googleads.v11.common.AdTextAsset headlines = 5;
     */
    headlines: AdTextAsset[];
    /**
     * The descriptive text of the ad. Maximum display width is 90. At least 1 and
     * max 5 descriptions can be specified.
     *
     * @generated from protobuf field: repeated google.ads.googleads.v11.common.AdTextAsset descriptions = 6;
     */
    descriptions: AdTextAsset[];
    /**
     * The Advertiser/brand name. Maximum display width is 25. Required.
     *
     * @generated from protobuf field: optional string business_name = 7;
     */
    businessName?: string;
    /**
     * Call to action text.
     *
     * @generated from protobuf field: optional string call_to_action_text = 8;
     */
    callToActionText?: string;
    /**
     * Boolean option that indicates if this ad must be served with lead form.
     *
     * @generated from protobuf field: optional bool lead_form_only = 9;
     */
    leadFormOnly?: boolean;
}
/**
 * A discovery carousel ad.
 *
 * @generated from protobuf message google.ads.googleads.v11.common.DiscoveryCarouselAdInfo
 */
export interface DiscoveryCarouselAdInfo {
    /**
     * Required. The Advertiser/brand name.
     *
     * @generated from protobuf field: string business_name = 1;
     */
    businessName: string;
    /**
     * Required. Logo image to be used in the ad.  The minimum size is 128x128 and the
     * aspect ratio must be 1:1(+-1%).
     *
     * @generated from protobuf field: google.ads.googleads.v11.common.AdImageAsset logo_image = 2;
     */
    logoImage?: AdImageAsset;
    /**
     * Required. Headline of the ad.
     *
     * @generated from protobuf field: google.ads.googleads.v11.common.AdTextAsset headline = 3;
     */
    headline?: AdTextAsset;
    /**
     * Required. The descriptive text of the ad.
     *
     * @generated from protobuf field: google.ads.googleads.v11.common.AdTextAsset description = 4;
     */
    description?: AdTextAsset;
    /**
     * Call to action text.
     *
     * @generated from protobuf field: string call_to_action_text = 5;
     */
    callToActionText: string;
    /**
     * Required. Carousel cards that will display with the ad. Min 2 max 10.
     *
     * @generated from protobuf field: repeated google.ads.googleads.v11.common.AdDiscoveryCarouselCardAsset carousel_cards = 6;
     */
    carouselCards: AdDiscoveryCarouselCardAsset[];
}
// @generated message type with reflection information, may provide speed optimized methods
class TextAdInfo$Type extends MessageType<TextAdInfo> {
    constructor() {
        super("google.ads.googleads.v11.common.TextAdInfo", [
            { no: 4, name: "headline", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "description1", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "description2", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TextAdInfo>): TextAdInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TextAdInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TextAdInfo): TextAdInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string headline */ 4:
                    message.headline = reader.string();
                    break;
                case /* optional string description1 */ 5:
                    message.description1 = reader.string();
                    break;
                case /* optional string description2 */ 6:
                    message.description2 = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TextAdInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string headline = 4; */
        if (message.headline !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.headline);
        /* optional string description1 = 5; */
        if (message.description1 !== undefined)
            writer.tag(5, WireType.LengthDelimited).string(message.description1);
        /* optional string description2 = 6; */
        if (message.description2 !== undefined)
            writer.tag(6, WireType.LengthDelimited).string(message.description2);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.common.TextAdInfo
 */
export const TextAdInfo = new TextAdInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExpandedTextAdInfo$Type extends MessageType<ExpandedTextAdInfo> {
    constructor() {
        super("google.ads.googleads.v11.common.ExpandedTextAdInfo", [
            { no: 8, name: "headline_part1", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "headline_part2", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "headline_part3", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "description", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "description2", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "path1", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 14, name: "path2", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ExpandedTextAdInfo>): ExpandedTextAdInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ExpandedTextAdInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExpandedTextAdInfo): ExpandedTextAdInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string headline_part1 */ 8:
                    message.headlinePart1 = reader.string();
                    break;
                case /* optional string headline_part2 */ 9:
                    message.headlinePart2 = reader.string();
                    break;
                case /* optional string headline_part3 */ 10:
                    message.headlinePart3 = reader.string();
                    break;
                case /* optional string description */ 11:
                    message.description = reader.string();
                    break;
                case /* optional string description2 */ 12:
                    message.description2 = reader.string();
                    break;
                case /* optional string path1 */ 13:
                    message.path1 = reader.string();
                    break;
                case /* optional string path2 */ 14:
                    message.path2 = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExpandedTextAdInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string headline_part1 = 8; */
        if (message.headlinePart1 !== undefined)
            writer.tag(8, WireType.LengthDelimited).string(message.headlinePart1);
        /* optional string headline_part2 = 9; */
        if (message.headlinePart2 !== undefined)
            writer.tag(9, WireType.LengthDelimited).string(message.headlinePart2);
        /* optional string headline_part3 = 10; */
        if (message.headlinePart3 !== undefined)
            writer.tag(10, WireType.LengthDelimited).string(message.headlinePart3);
        /* optional string description = 11; */
        if (message.description !== undefined)
            writer.tag(11, WireType.LengthDelimited).string(message.description);
        /* optional string description2 = 12; */
        if (message.description2 !== undefined)
            writer.tag(12, WireType.LengthDelimited).string(message.description2);
        /* optional string path1 = 13; */
        if (message.path1 !== undefined)
            writer.tag(13, WireType.LengthDelimited).string(message.path1);
        /* optional string path2 = 14; */
        if (message.path2 !== undefined)
            writer.tag(14, WireType.LengthDelimited).string(message.path2);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.common.ExpandedTextAdInfo
 */
export const ExpandedTextAdInfo = new ExpandedTextAdInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExpandedDynamicSearchAdInfo$Type extends MessageType<ExpandedDynamicSearchAdInfo> {
    constructor() {
        super("google.ads.googleads.v11.common.ExpandedDynamicSearchAdInfo", [
            { no: 3, name: "description", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "description2", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ExpandedDynamicSearchAdInfo>): ExpandedDynamicSearchAdInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ExpandedDynamicSearchAdInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExpandedDynamicSearchAdInfo): ExpandedDynamicSearchAdInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string description */ 3:
                    message.description = reader.string();
                    break;
                case /* optional string description2 */ 4:
                    message.description2 = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExpandedDynamicSearchAdInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string description = 3; */
        if (message.description !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.description);
        /* optional string description2 = 4; */
        if (message.description2 !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.description2);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.common.ExpandedDynamicSearchAdInfo
 */
export const ExpandedDynamicSearchAdInfo = new ExpandedDynamicSearchAdInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HotelAdInfo$Type extends MessageType<HotelAdInfo> {
    constructor() {
        super("google.ads.googleads.v11.common.HotelAdInfo", []);
    }
    create(value?: PartialMessage<HotelAdInfo>): HotelAdInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HotelAdInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HotelAdInfo): HotelAdInfo {
        return target ?? this.create();
    }
    internalBinaryWrite(message: HotelAdInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.common.HotelAdInfo
 */
export const HotelAdInfo = new HotelAdInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ShoppingSmartAdInfo$Type extends MessageType<ShoppingSmartAdInfo> {
    constructor() {
        super("google.ads.googleads.v11.common.ShoppingSmartAdInfo", []);
    }
    create(value?: PartialMessage<ShoppingSmartAdInfo>): ShoppingSmartAdInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ShoppingSmartAdInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ShoppingSmartAdInfo): ShoppingSmartAdInfo {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ShoppingSmartAdInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.common.ShoppingSmartAdInfo
 */
export const ShoppingSmartAdInfo = new ShoppingSmartAdInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ShoppingProductAdInfo$Type extends MessageType<ShoppingProductAdInfo> {
    constructor() {
        super("google.ads.googleads.v11.common.ShoppingProductAdInfo", []);
    }
    create(value?: PartialMessage<ShoppingProductAdInfo>): ShoppingProductAdInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ShoppingProductAdInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ShoppingProductAdInfo): ShoppingProductAdInfo {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ShoppingProductAdInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.common.ShoppingProductAdInfo
 */
export const ShoppingProductAdInfo = new ShoppingProductAdInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ShoppingComparisonListingAdInfo$Type extends MessageType<ShoppingComparisonListingAdInfo> {
    constructor() {
        super("google.ads.googleads.v11.common.ShoppingComparisonListingAdInfo", [
            { no: 2, name: "headline", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ShoppingComparisonListingAdInfo>): ShoppingComparisonListingAdInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ShoppingComparisonListingAdInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ShoppingComparisonListingAdInfo): ShoppingComparisonListingAdInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string headline */ 2:
                    message.headline = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ShoppingComparisonListingAdInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string headline = 2; */
        if (message.headline !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.headline);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.common.ShoppingComparisonListingAdInfo
 */
export const ShoppingComparisonListingAdInfo = new ShoppingComparisonListingAdInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GmailAdInfo$Type extends MessageType<GmailAdInfo> {
    constructor() {
        super("google.ads.googleads.v11.common.GmailAdInfo", [
            { no: 1, name: "teaser", kind: "message", T: () => GmailTeaser },
            { no: 10, name: "header_image", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "marketing_image", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "marketing_image_headline", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "marketing_image_description", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "marketing_image_display_call_to_action", kind: "message", T: () => DisplayCallToAction },
            { no: 7, name: "product_images", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ProductImage },
            { no: 8, name: "product_videos", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ProductVideo }
        ]);
    }
    create(value?: PartialMessage<GmailAdInfo>): GmailAdInfo {
        const message = { productImages: [], productVideos: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GmailAdInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GmailAdInfo): GmailAdInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.ads.googleads.v11.common.GmailTeaser teaser */ 1:
                    message.teaser = GmailTeaser.internalBinaryRead(reader, reader.uint32(), options, message.teaser);
                    break;
                case /* optional string header_image */ 10:
                    message.headerImage = reader.string();
                    break;
                case /* optional string marketing_image */ 11:
                    message.marketingImage = reader.string();
                    break;
                case /* optional string marketing_image_headline */ 12:
                    message.marketingImageHeadline = reader.string();
                    break;
                case /* optional string marketing_image_description */ 13:
                    message.marketingImageDescription = reader.string();
                    break;
                case /* google.ads.googleads.v11.common.DisplayCallToAction marketing_image_display_call_to_action */ 6:
                    message.marketingImageDisplayCallToAction = DisplayCallToAction.internalBinaryRead(reader, reader.uint32(), options, message.marketingImageDisplayCallToAction);
                    break;
                case /* repeated google.ads.googleads.v11.common.ProductImage product_images */ 7:
                    message.productImages.push(ProductImage.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated google.ads.googleads.v11.common.ProductVideo product_videos */ 8:
                    message.productVideos.push(ProductVideo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GmailAdInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.ads.googleads.v11.common.GmailTeaser teaser = 1; */
        if (message.teaser)
            GmailTeaser.internalBinaryWrite(message.teaser, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional string header_image = 10; */
        if (message.headerImage !== undefined)
            writer.tag(10, WireType.LengthDelimited).string(message.headerImage);
        /* optional string marketing_image = 11; */
        if (message.marketingImage !== undefined)
            writer.tag(11, WireType.LengthDelimited).string(message.marketingImage);
        /* optional string marketing_image_headline = 12; */
        if (message.marketingImageHeadline !== undefined)
            writer.tag(12, WireType.LengthDelimited).string(message.marketingImageHeadline);
        /* optional string marketing_image_description = 13; */
        if (message.marketingImageDescription !== undefined)
            writer.tag(13, WireType.LengthDelimited).string(message.marketingImageDescription);
        /* google.ads.googleads.v11.common.DisplayCallToAction marketing_image_display_call_to_action = 6; */
        if (message.marketingImageDisplayCallToAction)
            DisplayCallToAction.internalBinaryWrite(message.marketingImageDisplayCallToAction, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* repeated google.ads.googleads.v11.common.ProductImage product_images = 7; */
        for (let i = 0; i < message.productImages.length; i++)
            ProductImage.internalBinaryWrite(message.productImages[i], writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* repeated google.ads.googleads.v11.common.ProductVideo product_videos = 8; */
        for (let i = 0; i < message.productVideos.length; i++)
            ProductVideo.internalBinaryWrite(message.productVideos[i], writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.common.GmailAdInfo
 */
export const GmailAdInfo = new GmailAdInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GmailTeaser$Type extends MessageType<GmailTeaser> {
    constructor() {
        super("google.ads.googleads.v11.common.GmailTeaser", [
            { no: 5, name: "headline", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "description", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "business_name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "logo_image", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GmailTeaser>): GmailTeaser {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GmailTeaser>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GmailTeaser): GmailTeaser {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string headline */ 5:
                    message.headline = reader.string();
                    break;
                case /* optional string description */ 6:
                    message.description = reader.string();
                    break;
                case /* optional string business_name */ 7:
                    message.businessName = reader.string();
                    break;
                case /* optional string logo_image */ 8:
                    message.logoImage = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GmailTeaser, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string headline = 5; */
        if (message.headline !== undefined)
            writer.tag(5, WireType.LengthDelimited).string(message.headline);
        /* optional string description = 6; */
        if (message.description !== undefined)
            writer.tag(6, WireType.LengthDelimited).string(message.description);
        /* optional string business_name = 7; */
        if (message.businessName !== undefined)
            writer.tag(7, WireType.LengthDelimited).string(message.businessName);
        /* optional string logo_image = 8; */
        if (message.logoImage !== undefined)
            writer.tag(8, WireType.LengthDelimited).string(message.logoImage);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.common.GmailTeaser
 */
export const GmailTeaser = new GmailTeaser$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DisplayCallToAction$Type extends MessageType<DisplayCallToAction> {
    constructor() {
        super("google.ads.googleads.v11.common.DisplayCallToAction", [
            { no: 5, name: "text", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "text_color", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "url_collection_id", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DisplayCallToAction>): DisplayCallToAction {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DisplayCallToAction>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DisplayCallToAction): DisplayCallToAction {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string text */ 5:
                    message.text = reader.string();
                    break;
                case /* optional string text_color */ 6:
                    message.textColor = reader.string();
                    break;
                case /* optional string url_collection_id */ 7:
                    message.urlCollectionId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DisplayCallToAction, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string text = 5; */
        if (message.text !== undefined)
            writer.tag(5, WireType.LengthDelimited).string(message.text);
        /* optional string text_color = 6; */
        if (message.textColor !== undefined)
            writer.tag(6, WireType.LengthDelimited).string(message.textColor);
        /* optional string url_collection_id = 7; */
        if (message.urlCollectionId !== undefined)
            writer.tag(7, WireType.LengthDelimited).string(message.urlCollectionId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.common.DisplayCallToAction
 */
export const DisplayCallToAction = new DisplayCallToAction$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ProductImage$Type extends MessageType<ProductImage> {
    constructor() {
        super("google.ads.googleads.v11.common.ProductImage", [
            { no: 4, name: "product_image", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "description", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "display_call_to_action", kind: "message", T: () => DisplayCallToAction }
        ]);
    }
    create(value?: PartialMessage<ProductImage>): ProductImage {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ProductImage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProductImage): ProductImage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string product_image */ 4:
                    message.productImage = reader.string();
                    break;
                case /* optional string description */ 5:
                    message.description = reader.string();
                    break;
                case /* google.ads.googleads.v11.common.DisplayCallToAction display_call_to_action */ 3:
                    message.displayCallToAction = DisplayCallToAction.internalBinaryRead(reader, reader.uint32(), options, message.displayCallToAction);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ProductImage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string product_image = 4; */
        if (message.productImage !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.productImage);
        /* optional string description = 5; */
        if (message.description !== undefined)
            writer.tag(5, WireType.LengthDelimited).string(message.description);
        /* google.ads.googleads.v11.common.DisplayCallToAction display_call_to_action = 3; */
        if (message.displayCallToAction)
            DisplayCallToAction.internalBinaryWrite(message.displayCallToAction, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.common.ProductImage
 */
export const ProductImage = new ProductImage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ProductVideo$Type extends MessageType<ProductVideo> {
    constructor() {
        super("google.ads.googleads.v11.common.ProductVideo", [
            { no: 2, name: "product_video", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ProductVideo>): ProductVideo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ProductVideo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProductVideo): ProductVideo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string product_video */ 2:
                    message.productVideo = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ProductVideo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string product_video = 2; */
        if (message.productVideo !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.productVideo);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.common.ProductVideo
 */
export const ProductVideo = new ProductVideo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ImageAdInfo$Type extends MessageType<ImageAdInfo> {
    constructor() {
        super("google.ads.googleads.v11.common.ImageAdInfo", [
            { no: 15, name: "pixel_width", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 16, name: "pixel_height", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 17, name: "image_url", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 18, name: "preview_pixel_width", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 19, name: "preview_pixel_height", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 20, name: "preview_image_url", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "mime_type", kind: "enum", T: () => ["google.ads.googleads.v11.enums.MimeTypeEnum.MimeType", MimeTypeEnum_MimeType] },
            { no: 21, name: "name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "media_file", kind: "scalar", oneof: "image", T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "data", kind: "scalar", oneof: "image", T: 12 /*ScalarType.BYTES*/ },
            { no: 14, name: "ad_id_to_copy_image_from", kind: "scalar", oneof: "image", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<ImageAdInfo>): ImageAdInfo {
        const message = { mimeType: 0, image: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ImageAdInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ImageAdInfo): ImageAdInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int64 pixel_width */ 15:
                    message.pixelWidth = reader.int64().toBigInt();
                    break;
                case /* optional int64 pixel_height */ 16:
                    message.pixelHeight = reader.int64().toBigInt();
                    break;
                case /* optional string image_url */ 17:
                    message.imageUrl = reader.string();
                    break;
                case /* optional int64 preview_pixel_width */ 18:
                    message.previewPixelWidth = reader.int64().toBigInt();
                    break;
                case /* optional int64 preview_pixel_height */ 19:
                    message.previewPixelHeight = reader.int64().toBigInt();
                    break;
                case /* optional string preview_image_url */ 20:
                    message.previewImageUrl = reader.string();
                    break;
                case /* google.ads.googleads.v11.enums.MimeTypeEnum.MimeType mime_type */ 10:
                    message.mimeType = reader.int32();
                    break;
                case /* optional string name */ 21:
                    message.name = reader.string();
                    break;
                case /* string media_file */ 12:
                    message.image = {
                        oneofKind: "mediaFile",
                        mediaFile: reader.string()
                    };
                    break;
                case /* bytes data */ 13:
                    message.image = {
                        oneofKind: "data",
                        data: reader.bytes()
                    };
                    break;
                case /* int64 ad_id_to_copy_image_from */ 14:
                    message.image = {
                        oneofKind: "adIdToCopyImageFrom",
                        adIdToCopyImageFrom: reader.int64().toBigInt()
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ImageAdInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int64 pixel_width = 15; */
        if (message.pixelWidth !== undefined)
            writer.tag(15, WireType.Varint).int64(message.pixelWidth);
        /* optional int64 pixel_height = 16; */
        if (message.pixelHeight !== undefined)
            writer.tag(16, WireType.Varint).int64(message.pixelHeight);
        /* optional string image_url = 17; */
        if (message.imageUrl !== undefined)
            writer.tag(17, WireType.LengthDelimited).string(message.imageUrl);
        /* optional int64 preview_pixel_width = 18; */
        if (message.previewPixelWidth !== undefined)
            writer.tag(18, WireType.Varint).int64(message.previewPixelWidth);
        /* optional int64 preview_pixel_height = 19; */
        if (message.previewPixelHeight !== undefined)
            writer.tag(19, WireType.Varint).int64(message.previewPixelHeight);
        /* optional string preview_image_url = 20; */
        if (message.previewImageUrl !== undefined)
            writer.tag(20, WireType.LengthDelimited).string(message.previewImageUrl);
        /* google.ads.googleads.v11.enums.MimeTypeEnum.MimeType mime_type = 10; */
        if (message.mimeType !== 0)
            writer.tag(10, WireType.Varint).int32(message.mimeType);
        /* optional string name = 21; */
        if (message.name !== undefined)
            writer.tag(21, WireType.LengthDelimited).string(message.name);
        /* string media_file = 12; */
        if (message.image.oneofKind === "mediaFile")
            writer.tag(12, WireType.LengthDelimited).string(message.image.mediaFile);
        /* bytes data = 13; */
        if (message.image.oneofKind === "data")
            writer.tag(13, WireType.LengthDelimited).bytes(message.image.data);
        /* int64 ad_id_to_copy_image_from = 14; */
        if (message.image.oneofKind === "adIdToCopyImageFrom")
            writer.tag(14, WireType.Varint).int64(message.image.adIdToCopyImageFrom);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.common.ImageAdInfo
 */
export const ImageAdInfo = new ImageAdInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VideoBumperInStreamAdInfo$Type extends MessageType<VideoBumperInStreamAdInfo> {
    constructor() {
        super("google.ads.googleads.v11.common.VideoBumperInStreamAdInfo", [
            { no: 3, name: "companion_banner", kind: "message", T: () => AdImageAsset }
        ]);
    }
    create(value?: PartialMessage<VideoBumperInStreamAdInfo>): VideoBumperInStreamAdInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VideoBumperInStreamAdInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VideoBumperInStreamAdInfo): VideoBumperInStreamAdInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.ads.googleads.v11.common.AdImageAsset companion_banner */ 3:
                    message.companionBanner = AdImageAsset.internalBinaryRead(reader, reader.uint32(), options, message.companionBanner);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VideoBumperInStreamAdInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.ads.googleads.v11.common.AdImageAsset companion_banner = 3; */
        if (message.companionBanner)
            AdImageAsset.internalBinaryWrite(message.companionBanner, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.common.VideoBumperInStreamAdInfo
 */
export const VideoBumperInStreamAdInfo = new VideoBumperInStreamAdInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VideoNonSkippableInStreamAdInfo$Type extends MessageType<VideoNonSkippableInStreamAdInfo> {
    constructor() {
        super("google.ads.googleads.v11.common.VideoNonSkippableInStreamAdInfo", [
            { no: 5, name: "companion_banner", kind: "message", T: () => AdImageAsset },
            { no: 3, name: "action_button_label", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "action_headline", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<VideoNonSkippableInStreamAdInfo>): VideoNonSkippableInStreamAdInfo {
        const message = { actionButtonLabel: "", actionHeadline: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VideoNonSkippableInStreamAdInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VideoNonSkippableInStreamAdInfo): VideoNonSkippableInStreamAdInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.ads.googleads.v11.common.AdImageAsset companion_banner */ 5:
                    message.companionBanner = AdImageAsset.internalBinaryRead(reader, reader.uint32(), options, message.companionBanner);
                    break;
                case /* string action_button_label */ 3:
                    message.actionButtonLabel = reader.string();
                    break;
                case /* string action_headline */ 4:
                    message.actionHeadline = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VideoNonSkippableInStreamAdInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.ads.googleads.v11.common.AdImageAsset companion_banner = 5; */
        if (message.companionBanner)
            AdImageAsset.internalBinaryWrite(message.companionBanner, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* string action_button_label = 3; */
        if (message.actionButtonLabel !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.actionButtonLabel);
        /* string action_headline = 4; */
        if (message.actionHeadline !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.actionHeadline);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.common.VideoNonSkippableInStreamAdInfo
 */
export const VideoNonSkippableInStreamAdInfo = new VideoNonSkippableInStreamAdInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VideoTrueViewInStreamAdInfo$Type extends MessageType<VideoTrueViewInStreamAdInfo> {
    constructor() {
        super("google.ads.googleads.v11.common.VideoTrueViewInStreamAdInfo", [
            { no: 4, name: "action_button_label", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "action_headline", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "companion_banner", kind: "message", T: () => AdImageAsset }
        ]);
    }
    create(value?: PartialMessage<VideoTrueViewInStreamAdInfo>): VideoTrueViewInStreamAdInfo {
        const message = { actionButtonLabel: "", actionHeadline: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VideoTrueViewInStreamAdInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VideoTrueViewInStreamAdInfo): VideoTrueViewInStreamAdInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string action_button_label */ 4:
                    message.actionButtonLabel = reader.string();
                    break;
                case /* string action_headline */ 5:
                    message.actionHeadline = reader.string();
                    break;
                case /* google.ads.googleads.v11.common.AdImageAsset companion_banner */ 7:
                    message.companionBanner = AdImageAsset.internalBinaryRead(reader, reader.uint32(), options, message.companionBanner);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VideoTrueViewInStreamAdInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string action_button_label = 4; */
        if (message.actionButtonLabel !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.actionButtonLabel);
        /* string action_headline = 5; */
        if (message.actionHeadline !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.actionHeadline);
        /* google.ads.googleads.v11.common.AdImageAsset companion_banner = 7; */
        if (message.companionBanner)
            AdImageAsset.internalBinaryWrite(message.companionBanner, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.common.VideoTrueViewInStreamAdInfo
 */
export const VideoTrueViewInStreamAdInfo = new VideoTrueViewInStreamAdInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VideoOutstreamAdInfo$Type extends MessageType<VideoOutstreamAdInfo> {
    constructor() {
        super("google.ads.googleads.v11.common.VideoOutstreamAdInfo", [
            { no: 3, name: "headline", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<VideoOutstreamAdInfo>): VideoOutstreamAdInfo {
        const message = { headline: "", description: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VideoOutstreamAdInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VideoOutstreamAdInfo): VideoOutstreamAdInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string headline */ 3:
                    message.headline = reader.string();
                    break;
                case /* string description */ 4:
                    message.description = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VideoOutstreamAdInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string headline = 3; */
        if (message.headline !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.headline);
        /* string description = 4; */
        if (message.description !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.description);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.common.VideoOutstreamAdInfo
 */
export const VideoOutstreamAdInfo = new VideoOutstreamAdInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InFeedVideoAdInfo$Type extends MessageType<InFeedVideoAdInfo> {
    constructor() {
        super("google.ads.googleads.v11.common.InFeedVideoAdInfo", [
            { no: 1, name: "headline", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "description1", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "description2", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "thumbnail", kind: "enum", T: () => ["google.ads.googleads.v11.enums.VideoThumbnailEnum.VideoThumbnail", VideoThumbnailEnum_VideoThumbnail] }
        ]);
    }
    create(value?: PartialMessage<InFeedVideoAdInfo>): InFeedVideoAdInfo {
        const message = { headline: "", description1: "", description2: "", thumbnail: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<InFeedVideoAdInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InFeedVideoAdInfo): InFeedVideoAdInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string headline */ 1:
                    message.headline = reader.string();
                    break;
                case /* string description1 */ 2:
                    message.description1 = reader.string();
                    break;
                case /* string description2 */ 3:
                    message.description2 = reader.string();
                    break;
                case /* google.ads.googleads.v11.enums.VideoThumbnailEnum.VideoThumbnail thumbnail */ 4:
                    message.thumbnail = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InFeedVideoAdInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string headline = 1; */
        if (message.headline !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.headline);
        /* string description1 = 2; */
        if (message.description1 !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.description1);
        /* string description2 = 3; */
        if (message.description2 !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.description2);
        /* google.ads.googleads.v11.enums.VideoThumbnailEnum.VideoThumbnail thumbnail = 4; */
        if (message.thumbnail !== 0)
            writer.tag(4, WireType.Varint).int32(message.thumbnail);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.common.InFeedVideoAdInfo
 */
export const InFeedVideoAdInfo = new InFeedVideoAdInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VideoAdInfo$Type extends MessageType<VideoAdInfo> {
    constructor() {
        super("google.ads.googleads.v11.common.VideoAdInfo", [
            { no: 8, name: "video", kind: "message", T: () => AdVideoAsset },
            { no: 2, name: "in_stream", kind: "message", oneof: "format", T: () => VideoTrueViewInStreamAdInfo },
            { no: 3, name: "bumper", kind: "message", oneof: "format", T: () => VideoBumperInStreamAdInfo },
            { no: 4, name: "out_stream", kind: "message", oneof: "format", T: () => VideoOutstreamAdInfo },
            { no: 5, name: "non_skippable", kind: "message", oneof: "format", T: () => VideoNonSkippableInStreamAdInfo },
            { no: 9, name: "in_feed", kind: "message", oneof: "format", T: () => InFeedVideoAdInfo }
        ]);
    }
    create(value?: PartialMessage<VideoAdInfo>): VideoAdInfo {
        const message = { format: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VideoAdInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VideoAdInfo): VideoAdInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.ads.googleads.v11.common.AdVideoAsset video */ 8:
                    message.video = AdVideoAsset.internalBinaryRead(reader, reader.uint32(), options, message.video);
                    break;
                case /* google.ads.googleads.v11.common.VideoTrueViewInStreamAdInfo in_stream */ 2:
                    message.format = {
                        oneofKind: "inStream",
                        inStream: VideoTrueViewInStreamAdInfo.internalBinaryRead(reader, reader.uint32(), options, (message.format as any).inStream)
                    };
                    break;
                case /* google.ads.googleads.v11.common.VideoBumperInStreamAdInfo bumper */ 3:
                    message.format = {
                        oneofKind: "bumper",
                        bumper: VideoBumperInStreamAdInfo.internalBinaryRead(reader, reader.uint32(), options, (message.format as any).bumper)
                    };
                    break;
                case /* google.ads.googleads.v11.common.VideoOutstreamAdInfo out_stream */ 4:
                    message.format = {
                        oneofKind: "outStream",
                        outStream: VideoOutstreamAdInfo.internalBinaryRead(reader, reader.uint32(), options, (message.format as any).outStream)
                    };
                    break;
                case /* google.ads.googleads.v11.common.VideoNonSkippableInStreamAdInfo non_skippable */ 5:
                    message.format = {
                        oneofKind: "nonSkippable",
                        nonSkippable: VideoNonSkippableInStreamAdInfo.internalBinaryRead(reader, reader.uint32(), options, (message.format as any).nonSkippable)
                    };
                    break;
                case /* google.ads.googleads.v11.common.InFeedVideoAdInfo in_feed */ 9:
                    message.format = {
                        oneofKind: "inFeed",
                        inFeed: InFeedVideoAdInfo.internalBinaryRead(reader, reader.uint32(), options, (message.format as any).inFeed)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VideoAdInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.ads.googleads.v11.common.AdVideoAsset video = 8; */
        if (message.video)
            AdVideoAsset.internalBinaryWrite(message.video, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* google.ads.googleads.v11.common.VideoTrueViewInStreamAdInfo in_stream = 2; */
        if (message.format.oneofKind === "inStream")
            VideoTrueViewInStreamAdInfo.internalBinaryWrite(message.format.inStream, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* google.ads.googleads.v11.common.VideoBumperInStreamAdInfo bumper = 3; */
        if (message.format.oneofKind === "bumper")
            VideoBumperInStreamAdInfo.internalBinaryWrite(message.format.bumper, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* google.ads.googleads.v11.common.VideoOutstreamAdInfo out_stream = 4; */
        if (message.format.oneofKind === "outStream")
            VideoOutstreamAdInfo.internalBinaryWrite(message.format.outStream, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* google.ads.googleads.v11.common.VideoNonSkippableInStreamAdInfo non_skippable = 5; */
        if (message.format.oneofKind === "nonSkippable")
            VideoNonSkippableInStreamAdInfo.internalBinaryWrite(message.format.nonSkippable, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* google.ads.googleads.v11.common.InFeedVideoAdInfo in_feed = 9; */
        if (message.format.oneofKind === "inFeed")
            InFeedVideoAdInfo.internalBinaryWrite(message.format.inFeed, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.common.VideoAdInfo
 */
export const VideoAdInfo = new VideoAdInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VideoResponsiveAdInfo$Type extends MessageType<VideoResponsiveAdInfo> {
    constructor() {
        super("google.ads.googleads.v11.common.VideoResponsiveAdInfo", [
            { no: 1, name: "headlines", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => AdTextAsset },
            { no: 2, name: "long_headlines", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => AdTextAsset },
            { no: 3, name: "descriptions", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => AdTextAsset },
            { no: 4, name: "call_to_actions", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => AdTextAsset },
            { no: 5, name: "videos", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => AdVideoAsset },
            { no: 6, name: "companion_banners", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => AdImageAsset },
            { no: 7, name: "breadcrumb1", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "breadcrumb2", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<VideoResponsiveAdInfo>): VideoResponsiveAdInfo {
        const message = { headlines: [], longHeadlines: [], descriptions: [], callToActions: [], videos: [], companionBanners: [], breadcrumb1: "", breadcrumb2: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VideoResponsiveAdInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VideoResponsiveAdInfo): VideoResponsiveAdInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated google.ads.googleads.v11.common.AdTextAsset headlines */ 1:
                    message.headlines.push(AdTextAsset.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated google.ads.googleads.v11.common.AdTextAsset long_headlines */ 2:
                    message.longHeadlines.push(AdTextAsset.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated google.ads.googleads.v11.common.AdTextAsset descriptions */ 3:
                    message.descriptions.push(AdTextAsset.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated google.ads.googleads.v11.common.AdTextAsset call_to_actions */ 4:
                    message.callToActions.push(AdTextAsset.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated google.ads.googleads.v11.common.AdVideoAsset videos */ 5:
                    message.videos.push(AdVideoAsset.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated google.ads.googleads.v11.common.AdImageAsset companion_banners */ 6:
                    message.companionBanners.push(AdImageAsset.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string breadcrumb1 */ 7:
                    message.breadcrumb1 = reader.string();
                    break;
                case /* string breadcrumb2 */ 8:
                    message.breadcrumb2 = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VideoResponsiveAdInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated google.ads.googleads.v11.common.AdTextAsset headlines = 1; */
        for (let i = 0; i < message.headlines.length; i++)
            AdTextAsset.internalBinaryWrite(message.headlines[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated google.ads.googleads.v11.common.AdTextAsset long_headlines = 2; */
        for (let i = 0; i < message.longHeadlines.length; i++)
            AdTextAsset.internalBinaryWrite(message.longHeadlines[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated google.ads.googleads.v11.common.AdTextAsset descriptions = 3; */
        for (let i = 0; i < message.descriptions.length; i++)
            AdTextAsset.internalBinaryWrite(message.descriptions[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated google.ads.googleads.v11.common.AdTextAsset call_to_actions = 4; */
        for (let i = 0; i < message.callToActions.length; i++)
            AdTextAsset.internalBinaryWrite(message.callToActions[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* repeated google.ads.googleads.v11.common.AdVideoAsset videos = 5; */
        for (let i = 0; i < message.videos.length; i++)
            AdVideoAsset.internalBinaryWrite(message.videos[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* repeated google.ads.googleads.v11.common.AdImageAsset companion_banners = 6; */
        for (let i = 0; i < message.companionBanners.length; i++)
            AdImageAsset.internalBinaryWrite(message.companionBanners[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* string breadcrumb1 = 7; */
        if (message.breadcrumb1 !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.breadcrumb1);
        /* string breadcrumb2 = 8; */
        if (message.breadcrumb2 !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.breadcrumb2);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.common.VideoResponsiveAdInfo
 */
export const VideoResponsiveAdInfo = new VideoResponsiveAdInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResponsiveSearchAdInfo$Type extends MessageType<ResponsiveSearchAdInfo> {
    constructor() {
        super("google.ads.googleads.v11.common.ResponsiveSearchAdInfo", [
            { no: 1, name: "headlines", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => AdTextAsset },
            { no: 2, name: "descriptions", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => AdTextAsset },
            { no: 5, name: "path1", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "path2", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ResponsiveSearchAdInfo>): ResponsiveSearchAdInfo {
        const message = { headlines: [], descriptions: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ResponsiveSearchAdInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResponsiveSearchAdInfo): ResponsiveSearchAdInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated google.ads.googleads.v11.common.AdTextAsset headlines */ 1:
                    message.headlines.push(AdTextAsset.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated google.ads.googleads.v11.common.AdTextAsset descriptions */ 2:
                    message.descriptions.push(AdTextAsset.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional string path1 */ 5:
                    message.path1 = reader.string();
                    break;
                case /* optional string path2 */ 6:
                    message.path2 = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResponsiveSearchAdInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated google.ads.googleads.v11.common.AdTextAsset headlines = 1; */
        for (let i = 0; i < message.headlines.length; i++)
            AdTextAsset.internalBinaryWrite(message.headlines[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated google.ads.googleads.v11.common.AdTextAsset descriptions = 2; */
        for (let i = 0; i < message.descriptions.length; i++)
            AdTextAsset.internalBinaryWrite(message.descriptions[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* optional string path1 = 5; */
        if (message.path1 !== undefined)
            writer.tag(5, WireType.LengthDelimited).string(message.path1);
        /* optional string path2 = 6; */
        if (message.path2 !== undefined)
            writer.tag(6, WireType.LengthDelimited).string(message.path2);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.common.ResponsiveSearchAdInfo
 */
export const ResponsiveSearchAdInfo = new ResponsiveSearchAdInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LegacyResponsiveDisplayAdInfo$Type extends MessageType<LegacyResponsiveDisplayAdInfo> {
    constructor() {
        super("google.ads.googleads.v11.common.LegacyResponsiveDisplayAdInfo", [
            { no: 16, name: "short_headline", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 17, name: "long_headline", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 18, name: "description", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 19, name: "business_name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 20, name: "allow_flexible_color", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 21, name: "accent_color", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 22, name: "main_color", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 23, name: "call_to_action_text", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 24, name: "logo_image", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 25, name: "square_logo_image", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 26, name: "marketing_image", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 27, name: "square_marketing_image", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "format_setting", kind: "enum", T: () => ["google.ads.googleads.v11.enums.DisplayAdFormatSettingEnum.DisplayAdFormatSetting", DisplayAdFormatSettingEnum_DisplayAdFormatSetting] },
            { no: 28, name: "price_prefix", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 29, name: "promo_text", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LegacyResponsiveDisplayAdInfo>): LegacyResponsiveDisplayAdInfo {
        const message = { formatSetting: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LegacyResponsiveDisplayAdInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LegacyResponsiveDisplayAdInfo): LegacyResponsiveDisplayAdInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string short_headline */ 16:
                    message.shortHeadline = reader.string();
                    break;
                case /* optional string long_headline */ 17:
                    message.longHeadline = reader.string();
                    break;
                case /* optional string description */ 18:
                    message.description = reader.string();
                    break;
                case /* optional string business_name */ 19:
                    message.businessName = reader.string();
                    break;
                case /* optional bool allow_flexible_color */ 20:
                    message.allowFlexibleColor = reader.bool();
                    break;
                case /* optional string accent_color */ 21:
                    message.accentColor = reader.string();
                    break;
                case /* optional string main_color */ 22:
                    message.mainColor = reader.string();
                    break;
                case /* optional string call_to_action_text */ 23:
                    message.callToActionText = reader.string();
                    break;
                case /* optional string logo_image */ 24:
                    message.logoImage = reader.string();
                    break;
                case /* optional string square_logo_image */ 25:
                    message.squareLogoImage = reader.string();
                    break;
                case /* optional string marketing_image */ 26:
                    message.marketingImage = reader.string();
                    break;
                case /* optional string square_marketing_image */ 27:
                    message.squareMarketingImage = reader.string();
                    break;
                case /* google.ads.googleads.v11.enums.DisplayAdFormatSettingEnum.DisplayAdFormatSetting format_setting */ 13:
                    message.formatSetting = reader.int32();
                    break;
                case /* optional string price_prefix */ 28:
                    message.pricePrefix = reader.string();
                    break;
                case /* optional string promo_text */ 29:
                    message.promoText = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LegacyResponsiveDisplayAdInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string short_headline = 16; */
        if (message.shortHeadline !== undefined)
            writer.tag(16, WireType.LengthDelimited).string(message.shortHeadline);
        /* optional string long_headline = 17; */
        if (message.longHeadline !== undefined)
            writer.tag(17, WireType.LengthDelimited).string(message.longHeadline);
        /* optional string description = 18; */
        if (message.description !== undefined)
            writer.tag(18, WireType.LengthDelimited).string(message.description);
        /* optional string business_name = 19; */
        if (message.businessName !== undefined)
            writer.tag(19, WireType.LengthDelimited).string(message.businessName);
        /* optional bool allow_flexible_color = 20; */
        if (message.allowFlexibleColor !== undefined)
            writer.tag(20, WireType.Varint).bool(message.allowFlexibleColor);
        /* optional string accent_color = 21; */
        if (message.accentColor !== undefined)
            writer.tag(21, WireType.LengthDelimited).string(message.accentColor);
        /* optional string main_color = 22; */
        if (message.mainColor !== undefined)
            writer.tag(22, WireType.LengthDelimited).string(message.mainColor);
        /* optional string call_to_action_text = 23; */
        if (message.callToActionText !== undefined)
            writer.tag(23, WireType.LengthDelimited).string(message.callToActionText);
        /* optional string logo_image = 24; */
        if (message.logoImage !== undefined)
            writer.tag(24, WireType.LengthDelimited).string(message.logoImage);
        /* optional string square_logo_image = 25; */
        if (message.squareLogoImage !== undefined)
            writer.tag(25, WireType.LengthDelimited).string(message.squareLogoImage);
        /* optional string marketing_image = 26; */
        if (message.marketingImage !== undefined)
            writer.tag(26, WireType.LengthDelimited).string(message.marketingImage);
        /* optional string square_marketing_image = 27; */
        if (message.squareMarketingImage !== undefined)
            writer.tag(27, WireType.LengthDelimited).string(message.squareMarketingImage);
        /* google.ads.googleads.v11.enums.DisplayAdFormatSettingEnum.DisplayAdFormatSetting format_setting = 13; */
        if (message.formatSetting !== 0)
            writer.tag(13, WireType.Varint).int32(message.formatSetting);
        /* optional string price_prefix = 28; */
        if (message.pricePrefix !== undefined)
            writer.tag(28, WireType.LengthDelimited).string(message.pricePrefix);
        /* optional string promo_text = 29; */
        if (message.promoText !== undefined)
            writer.tag(29, WireType.LengthDelimited).string(message.promoText);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.common.LegacyResponsiveDisplayAdInfo
 */
export const LegacyResponsiveDisplayAdInfo = new LegacyResponsiveDisplayAdInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AppAdInfo$Type extends MessageType<AppAdInfo> {
    constructor() {
        super("google.ads.googleads.v11.common.AppAdInfo", [
            { no: 1, name: "mandatory_ad_text", kind: "message", T: () => AdTextAsset },
            { no: 2, name: "headlines", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => AdTextAsset },
            { no: 3, name: "descriptions", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => AdTextAsset },
            { no: 4, name: "images", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => AdImageAsset },
            { no: 5, name: "youtube_videos", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => AdVideoAsset },
            { no: 6, name: "html5_media_bundles", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => AdMediaBundleAsset }
        ]);
    }
    create(value?: PartialMessage<AppAdInfo>): AppAdInfo {
        const message = { headlines: [], descriptions: [], images: [], youtubeVideos: [], html5MediaBundles: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AppAdInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AppAdInfo): AppAdInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.ads.googleads.v11.common.AdTextAsset mandatory_ad_text */ 1:
                    message.mandatoryAdText = AdTextAsset.internalBinaryRead(reader, reader.uint32(), options, message.mandatoryAdText);
                    break;
                case /* repeated google.ads.googleads.v11.common.AdTextAsset headlines */ 2:
                    message.headlines.push(AdTextAsset.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated google.ads.googleads.v11.common.AdTextAsset descriptions */ 3:
                    message.descriptions.push(AdTextAsset.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated google.ads.googleads.v11.common.AdImageAsset images */ 4:
                    message.images.push(AdImageAsset.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated google.ads.googleads.v11.common.AdVideoAsset youtube_videos */ 5:
                    message.youtubeVideos.push(AdVideoAsset.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated google.ads.googleads.v11.common.AdMediaBundleAsset html5_media_bundles */ 6:
                    message.html5MediaBundles.push(AdMediaBundleAsset.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AppAdInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.ads.googleads.v11.common.AdTextAsset mandatory_ad_text = 1; */
        if (message.mandatoryAdText)
            AdTextAsset.internalBinaryWrite(message.mandatoryAdText, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated google.ads.googleads.v11.common.AdTextAsset headlines = 2; */
        for (let i = 0; i < message.headlines.length; i++)
            AdTextAsset.internalBinaryWrite(message.headlines[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated google.ads.googleads.v11.common.AdTextAsset descriptions = 3; */
        for (let i = 0; i < message.descriptions.length; i++)
            AdTextAsset.internalBinaryWrite(message.descriptions[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated google.ads.googleads.v11.common.AdImageAsset images = 4; */
        for (let i = 0; i < message.images.length; i++)
            AdImageAsset.internalBinaryWrite(message.images[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* repeated google.ads.googleads.v11.common.AdVideoAsset youtube_videos = 5; */
        for (let i = 0; i < message.youtubeVideos.length; i++)
            AdVideoAsset.internalBinaryWrite(message.youtubeVideos[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* repeated google.ads.googleads.v11.common.AdMediaBundleAsset html5_media_bundles = 6; */
        for (let i = 0; i < message.html5MediaBundles.length; i++)
            AdMediaBundleAsset.internalBinaryWrite(message.html5MediaBundles[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.common.AppAdInfo
 */
export const AppAdInfo = new AppAdInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AppEngagementAdInfo$Type extends MessageType<AppEngagementAdInfo> {
    constructor() {
        super("google.ads.googleads.v11.common.AppEngagementAdInfo", [
            { no: 1, name: "headlines", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => AdTextAsset },
            { no: 2, name: "descriptions", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => AdTextAsset },
            { no: 3, name: "images", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => AdImageAsset },
            { no: 4, name: "videos", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => AdVideoAsset }
        ]);
    }
    create(value?: PartialMessage<AppEngagementAdInfo>): AppEngagementAdInfo {
        const message = { headlines: [], descriptions: [], images: [], videos: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AppEngagementAdInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AppEngagementAdInfo): AppEngagementAdInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated google.ads.googleads.v11.common.AdTextAsset headlines */ 1:
                    message.headlines.push(AdTextAsset.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated google.ads.googleads.v11.common.AdTextAsset descriptions */ 2:
                    message.descriptions.push(AdTextAsset.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated google.ads.googleads.v11.common.AdImageAsset images */ 3:
                    message.images.push(AdImageAsset.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated google.ads.googleads.v11.common.AdVideoAsset videos */ 4:
                    message.videos.push(AdVideoAsset.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AppEngagementAdInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated google.ads.googleads.v11.common.AdTextAsset headlines = 1; */
        for (let i = 0; i < message.headlines.length; i++)
            AdTextAsset.internalBinaryWrite(message.headlines[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated google.ads.googleads.v11.common.AdTextAsset descriptions = 2; */
        for (let i = 0; i < message.descriptions.length; i++)
            AdTextAsset.internalBinaryWrite(message.descriptions[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated google.ads.googleads.v11.common.AdImageAsset images = 3; */
        for (let i = 0; i < message.images.length; i++)
            AdImageAsset.internalBinaryWrite(message.images[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated google.ads.googleads.v11.common.AdVideoAsset videos = 4; */
        for (let i = 0; i < message.videos.length; i++)
            AdVideoAsset.internalBinaryWrite(message.videos[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.common.AppEngagementAdInfo
 */
export const AppEngagementAdInfo = new AppEngagementAdInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AppPreRegistrationAdInfo$Type extends MessageType<AppPreRegistrationAdInfo> {
    constructor() {
        super("google.ads.googleads.v11.common.AppPreRegistrationAdInfo", [
            { no: 1, name: "headlines", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => AdTextAsset },
            { no: 2, name: "descriptions", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => AdTextAsset },
            { no: 3, name: "images", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => AdImageAsset },
            { no: 4, name: "youtube_videos", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => AdVideoAsset }
        ]);
    }
    create(value?: PartialMessage<AppPreRegistrationAdInfo>): AppPreRegistrationAdInfo {
        const message = { headlines: [], descriptions: [], images: [], youtubeVideos: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AppPreRegistrationAdInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AppPreRegistrationAdInfo): AppPreRegistrationAdInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated google.ads.googleads.v11.common.AdTextAsset headlines */ 1:
                    message.headlines.push(AdTextAsset.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated google.ads.googleads.v11.common.AdTextAsset descriptions */ 2:
                    message.descriptions.push(AdTextAsset.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated google.ads.googleads.v11.common.AdImageAsset images */ 3:
                    message.images.push(AdImageAsset.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated google.ads.googleads.v11.common.AdVideoAsset youtube_videos */ 4:
                    message.youtubeVideos.push(AdVideoAsset.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AppPreRegistrationAdInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated google.ads.googleads.v11.common.AdTextAsset headlines = 1; */
        for (let i = 0; i < message.headlines.length; i++)
            AdTextAsset.internalBinaryWrite(message.headlines[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated google.ads.googleads.v11.common.AdTextAsset descriptions = 2; */
        for (let i = 0; i < message.descriptions.length; i++)
            AdTextAsset.internalBinaryWrite(message.descriptions[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated google.ads.googleads.v11.common.AdImageAsset images = 3; */
        for (let i = 0; i < message.images.length; i++)
            AdImageAsset.internalBinaryWrite(message.images[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated google.ads.googleads.v11.common.AdVideoAsset youtube_videos = 4; */
        for (let i = 0; i < message.youtubeVideos.length; i++)
            AdVideoAsset.internalBinaryWrite(message.youtubeVideos[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.common.AppPreRegistrationAdInfo
 */
export const AppPreRegistrationAdInfo = new AppPreRegistrationAdInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LegacyAppInstallAdInfo$Type extends MessageType<LegacyAppInstallAdInfo> {
    constructor() {
        super("google.ads.googleads.v11.common.LegacyAppInstallAdInfo", [
            { no: 6, name: "app_id", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "app_store", kind: "enum", T: () => ["google.ads.googleads.v11.enums.LegacyAppInstallAdAppStoreEnum.LegacyAppInstallAdAppStore", LegacyAppInstallAdAppStoreEnum_LegacyAppInstallAdAppStore] },
            { no: 7, name: "headline", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "description1", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "description2", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LegacyAppInstallAdInfo>): LegacyAppInstallAdInfo {
        const message = { appStore: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LegacyAppInstallAdInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LegacyAppInstallAdInfo): LegacyAppInstallAdInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string app_id */ 6:
                    message.appId = reader.string();
                    break;
                case /* google.ads.googleads.v11.enums.LegacyAppInstallAdAppStoreEnum.LegacyAppInstallAdAppStore app_store */ 2:
                    message.appStore = reader.int32();
                    break;
                case /* optional string headline */ 7:
                    message.headline = reader.string();
                    break;
                case /* optional string description1 */ 8:
                    message.description1 = reader.string();
                    break;
                case /* optional string description2 */ 9:
                    message.description2 = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LegacyAppInstallAdInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string app_id = 6; */
        if (message.appId !== undefined)
            writer.tag(6, WireType.LengthDelimited).string(message.appId);
        /* google.ads.googleads.v11.enums.LegacyAppInstallAdAppStoreEnum.LegacyAppInstallAdAppStore app_store = 2; */
        if (message.appStore !== 0)
            writer.tag(2, WireType.Varint).int32(message.appStore);
        /* optional string headline = 7; */
        if (message.headline !== undefined)
            writer.tag(7, WireType.LengthDelimited).string(message.headline);
        /* optional string description1 = 8; */
        if (message.description1 !== undefined)
            writer.tag(8, WireType.LengthDelimited).string(message.description1);
        /* optional string description2 = 9; */
        if (message.description2 !== undefined)
            writer.tag(9, WireType.LengthDelimited).string(message.description2);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.common.LegacyAppInstallAdInfo
 */
export const LegacyAppInstallAdInfo = new LegacyAppInstallAdInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResponsiveDisplayAdInfo$Type extends MessageType<ResponsiveDisplayAdInfo> {
    constructor() {
        super("google.ads.googleads.v11.common.ResponsiveDisplayAdInfo", [
            { no: 1, name: "marketing_images", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => AdImageAsset },
            { no: 2, name: "square_marketing_images", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => AdImageAsset },
            { no: 3, name: "logo_images", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => AdImageAsset },
            { no: 4, name: "square_logo_images", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => AdImageAsset },
            { no: 5, name: "headlines", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => AdTextAsset },
            { no: 6, name: "long_headline", kind: "message", T: () => AdTextAsset },
            { no: 7, name: "descriptions", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => AdTextAsset },
            { no: 8, name: "youtube_videos", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => AdVideoAsset },
            { no: 17, name: "business_name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 18, name: "main_color", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 19, name: "accent_color", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 20, name: "allow_flexible_color", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 21, name: "call_to_action_text", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 22, name: "price_prefix", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 23, name: "promo_text", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 16, name: "format_setting", kind: "enum", T: () => ["google.ads.googleads.v11.enums.DisplayAdFormatSettingEnum.DisplayAdFormatSetting", DisplayAdFormatSettingEnum_DisplayAdFormatSetting] },
            { no: 24, name: "control_spec", kind: "message", T: () => ResponsiveDisplayAdControlSpec }
        ]);
    }
    create(value?: PartialMessage<ResponsiveDisplayAdInfo>): ResponsiveDisplayAdInfo {
        const message = { marketingImages: [], squareMarketingImages: [], logoImages: [], squareLogoImages: [], headlines: [], descriptions: [], youtubeVideos: [], formatSetting: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ResponsiveDisplayAdInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResponsiveDisplayAdInfo): ResponsiveDisplayAdInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated google.ads.googleads.v11.common.AdImageAsset marketing_images */ 1:
                    message.marketingImages.push(AdImageAsset.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated google.ads.googleads.v11.common.AdImageAsset square_marketing_images */ 2:
                    message.squareMarketingImages.push(AdImageAsset.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated google.ads.googleads.v11.common.AdImageAsset logo_images */ 3:
                    message.logoImages.push(AdImageAsset.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated google.ads.googleads.v11.common.AdImageAsset square_logo_images */ 4:
                    message.squareLogoImages.push(AdImageAsset.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated google.ads.googleads.v11.common.AdTextAsset headlines */ 5:
                    message.headlines.push(AdTextAsset.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* google.ads.googleads.v11.common.AdTextAsset long_headline */ 6:
                    message.longHeadline = AdTextAsset.internalBinaryRead(reader, reader.uint32(), options, message.longHeadline);
                    break;
                case /* repeated google.ads.googleads.v11.common.AdTextAsset descriptions */ 7:
                    message.descriptions.push(AdTextAsset.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated google.ads.googleads.v11.common.AdVideoAsset youtube_videos */ 8:
                    message.youtubeVideos.push(AdVideoAsset.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional string business_name */ 17:
                    message.businessName = reader.string();
                    break;
                case /* optional string main_color */ 18:
                    message.mainColor = reader.string();
                    break;
                case /* optional string accent_color */ 19:
                    message.accentColor = reader.string();
                    break;
                case /* optional bool allow_flexible_color */ 20:
                    message.allowFlexibleColor = reader.bool();
                    break;
                case /* optional string call_to_action_text */ 21:
                    message.callToActionText = reader.string();
                    break;
                case /* optional string price_prefix */ 22:
                    message.pricePrefix = reader.string();
                    break;
                case /* optional string promo_text */ 23:
                    message.promoText = reader.string();
                    break;
                case /* google.ads.googleads.v11.enums.DisplayAdFormatSettingEnum.DisplayAdFormatSetting format_setting */ 16:
                    message.formatSetting = reader.int32();
                    break;
                case /* google.ads.googleads.v11.common.ResponsiveDisplayAdControlSpec control_spec */ 24:
                    message.controlSpec = ResponsiveDisplayAdControlSpec.internalBinaryRead(reader, reader.uint32(), options, message.controlSpec);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResponsiveDisplayAdInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated google.ads.googleads.v11.common.AdImageAsset marketing_images = 1; */
        for (let i = 0; i < message.marketingImages.length; i++)
            AdImageAsset.internalBinaryWrite(message.marketingImages[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated google.ads.googleads.v11.common.AdImageAsset square_marketing_images = 2; */
        for (let i = 0; i < message.squareMarketingImages.length; i++)
            AdImageAsset.internalBinaryWrite(message.squareMarketingImages[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated google.ads.googleads.v11.common.AdImageAsset logo_images = 3; */
        for (let i = 0; i < message.logoImages.length; i++)
            AdImageAsset.internalBinaryWrite(message.logoImages[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated google.ads.googleads.v11.common.AdImageAsset square_logo_images = 4; */
        for (let i = 0; i < message.squareLogoImages.length; i++)
            AdImageAsset.internalBinaryWrite(message.squareLogoImages[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* repeated google.ads.googleads.v11.common.AdTextAsset headlines = 5; */
        for (let i = 0; i < message.headlines.length; i++)
            AdTextAsset.internalBinaryWrite(message.headlines[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* google.ads.googleads.v11.common.AdTextAsset long_headline = 6; */
        if (message.longHeadline)
            AdTextAsset.internalBinaryWrite(message.longHeadline, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* repeated google.ads.googleads.v11.common.AdTextAsset descriptions = 7; */
        for (let i = 0; i < message.descriptions.length; i++)
            AdTextAsset.internalBinaryWrite(message.descriptions[i], writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* repeated google.ads.googleads.v11.common.AdVideoAsset youtube_videos = 8; */
        for (let i = 0; i < message.youtubeVideos.length; i++)
            AdVideoAsset.internalBinaryWrite(message.youtubeVideos[i], writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* optional string business_name = 17; */
        if (message.businessName !== undefined)
            writer.tag(17, WireType.LengthDelimited).string(message.businessName);
        /* optional string main_color = 18; */
        if (message.mainColor !== undefined)
            writer.tag(18, WireType.LengthDelimited).string(message.mainColor);
        /* optional string accent_color = 19; */
        if (message.accentColor !== undefined)
            writer.tag(19, WireType.LengthDelimited).string(message.accentColor);
        /* optional bool allow_flexible_color = 20; */
        if (message.allowFlexibleColor !== undefined)
            writer.tag(20, WireType.Varint).bool(message.allowFlexibleColor);
        /* optional string call_to_action_text = 21; */
        if (message.callToActionText !== undefined)
            writer.tag(21, WireType.LengthDelimited).string(message.callToActionText);
        /* optional string price_prefix = 22; */
        if (message.pricePrefix !== undefined)
            writer.tag(22, WireType.LengthDelimited).string(message.pricePrefix);
        /* optional string promo_text = 23; */
        if (message.promoText !== undefined)
            writer.tag(23, WireType.LengthDelimited).string(message.promoText);
        /* google.ads.googleads.v11.enums.DisplayAdFormatSettingEnum.DisplayAdFormatSetting format_setting = 16; */
        if (message.formatSetting !== 0)
            writer.tag(16, WireType.Varint).int32(message.formatSetting);
        /* google.ads.googleads.v11.common.ResponsiveDisplayAdControlSpec control_spec = 24; */
        if (message.controlSpec)
            ResponsiveDisplayAdControlSpec.internalBinaryWrite(message.controlSpec, writer.tag(24, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.common.ResponsiveDisplayAdInfo
 */
export const ResponsiveDisplayAdInfo = new ResponsiveDisplayAdInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LocalAdInfo$Type extends MessageType<LocalAdInfo> {
    constructor() {
        super("google.ads.googleads.v11.common.LocalAdInfo", [
            { no: 1, name: "headlines", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => AdTextAsset },
            { no: 2, name: "descriptions", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => AdTextAsset },
            { no: 3, name: "call_to_actions", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => AdTextAsset },
            { no: 4, name: "marketing_images", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => AdImageAsset },
            { no: 5, name: "logo_images", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => AdImageAsset },
            { no: 6, name: "videos", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => AdVideoAsset },
            { no: 9, name: "path1", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "path2", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LocalAdInfo>): LocalAdInfo {
        const message = { headlines: [], descriptions: [], callToActions: [], marketingImages: [], logoImages: [], videos: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LocalAdInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LocalAdInfo): LocalAdInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated google.ads.googleads.v11.common.AdTextAsset headlines */ 1:
                    message.headlines.push(AdTextAsset.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated google.ads.googleads.v11.common.AdTextAsset descriptions */ 2:
                    message.descriptions.push(AdTextAsset.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated google.ads.googleads.v11.common.AdTextAsset call_to_actions */ 3:
                    message.callToActions.push(AdTextAsset.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated google.ads.googleads.v11.common.AdImageAsset marketing_images */ 4:
                    message.marketingImages.push(AdImageAsset.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated google.ads.googleads.v11.common.AdImageAsset logo_images */ 5:
                    message.logoImages.push(AdImageAsset.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated google.ads.googleads.v11.common.AdVideoAsset videos */ 6:
                    message.videos.push(AdVideoAsset.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional string path1 */ 9:
                    message.path1 = reader.string();
                    break;
                case /* optional string path2 */ 10:
                    message.path2 = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LocalAdInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated google.ads.googleads.v11.common.AdTextAsset headlines = 1; */
        for (let i = 0; i < message.headlines.length; i++)
            AdTextAsset.internalBinaryWrite(message.headlines[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated google.ads.googleads.v11.common.AdTextAsset descriptions = 2; */
        for (let i = 0; i < message.descriptions.length; i++)
            AdTextAsset.internalBinaryWrite(message.descriptions[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated google.ads.googleads.v11.common.AdTextAsset call_to_actions = 3; */
        for (let i = 0; i < message.callToActions.length; i++)
            AdTextAsset.internalBinaryWrite(message.callToActions[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated google.ads.googleads.v11.common.AdImageAsset marketing_images = 4; */
        for (let i = 0; i < message.marketingImages.length; i++)
            AdImageAsset.internalBinaryWrite(message.marketingImages[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* repeated google.ads.googleads.v11.common.AdImageAsset logo_images = 5; */
        for (let i = 0; i < message.logoImages.length; i++)
            AdImageAsset.internalBinaryWrite(message.logoImages[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* repeated google.ads.googleads.v11.common.AdVideoAsset videos = 6; */
        for (let i = 0; i < message.videos.length; i++)
            AdVideoAsset.internalBinaryWrite(message.videos[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* optional string path1 = 9; */
        if (message.path1 !== undefined)
            writer.tag(9, WireType.LengthDelimited).string(message.path1);
        /* optional string path2 = 10; */
        if (message.path2 !== undefined)
            writer.tag(10, WireType.LengthDelimited).string(message.path2);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.common.LocalAdInfo
 */
export const LocalAdInfo = new LocalAdInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DisplayUploadAdInfo$Type extends MessageType<DisplayUploadAdInfo> {
    constructor() {
        super("google.ads.googleads.v11.common.DisplayUploadAdInfo", [
            { no: 1, name: "display_upload_product_type", kind: "enum", T: () => ["google.ads.googleads.v11.enums.DisplayUploadProductTypeEnum.DisplayUploadProductType", DisplayUploadProductTypeEnum_DisplayUploadProductType] },
            { no: 2, name: "media_bundle", kind: "message", oneof: "mediaAsset", T: () => AdMediaBundleAsset }
        ]);
    }
    create(value?: PartialMessage<DisplayUploadAdInfo>): DisplayUploadAdInfo {
        const message = { displayUploadProductType: 0, mediaAsset: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DisplayUploadAdInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DisplayUploadAdInfo): DisplayUploadAdInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.ads.googleads.v11.enums.DisplayUploadProductTypeEnum.DisplayUploadProductType display_upload_product_type */ 1:
                    message.displayUploadProductType = reader.int32();
                    break;
                case /* google.ads.googleads.v11.common.AdMediaBundleAsset media_bundle */ 2:
                    message.mediaAsset = {
                        oneofKind: "mediaBundle",
                        mediaBundle: AdMediaBundleAsset.internalBinaryRead(reader, reader.uint32(), options, (message.mediaAsset as any).mediaBundle)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DisplayUploadAdInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.ads.googleads.v11.enums.DisplayUploadProductTypeEnum.DisplayUploadProductType display_upload_product_type = 1; */
        if (message.displayUploadProductType !== 0)
            writer.tag(1, WireType.Varint).int32(message.displayUploadProductType);
        /* google.ads.googleads.v11.common.AdMediaBundleAsset media_bundle = 2; */
        if (message.mediaAsset.oneofKind === "mediaBundle")
            AdMediaBundleAsset.internalBinaryWrite(message.mediaAsset.mediaBundle, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.common.DisplayUploadAdInfo
 */
export const DisplayUploadAdInfo = new DisplayUploadAdInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResponsiveDisplayAdControlSpec$Type extends MessageType<ResponsiveDisplayAdControlSpec> {
    constructor() {
        super("google.ads.googleads.v11.common.ResponsiveDisplayAdControlSpec", [
            { no: 1, name: "enable_asset_enhancements", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "enable_autogen_video", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ResponsiveDisplayAdControlSpec>): ResponsiveDisplayAdControlSpec {
        const message = { enableAssetEnhancements: false, enableAutogenVideo: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ResponsiveDisplayAdControlSpec>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResponsiveDisplayAdControlSpec): ResponsiveDisplayAdControlSpec {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool enable_asset_enhancements */ 1:
                    message.enableAssetEnhancements = reader.bool();
                    break;
                case /* bool enable_autogen_video */ 2:
                    message.enableAutogenVideo = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResponsiveDisplayAdControlSpec, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool enable_asset_enhancements = 1; */
        if (message.enableAssetEnhancements !== false)
            writer.tag(1, WireType.Varint).bool(message.enableAssetEnhancements);
        /* bool enable_autogen_video = 2; */
        if (message.enableAutogenVideo !== false)
            writer.tag(2, WireType.Varint).bool(message.enableAutogenVideo);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.common.ResponsiveDisplayAdControlSpec
 */
export const ResponsiveDisplayAdControlSpec = new ResponsiveDisplayAdControlSpec$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SmartCampaignAdInfo$Type extends MessageType<SmartCampaignAdInfo> {
    constructor() {
        super("google.ads.googleads.v11.common.SmartCampaignAdInfo", [
            { no: 1, name: "headlines", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => AdTextAsset },
            { no: 2, name: "descriptions", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => AdTextAsset }
        ]);
    }
    create(value?: PartialMessage<SmartCampaignAdInfo>): SmartCampaignAdInfo {
        const message = { headlines: [], descriptions: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SmartCampaignAdInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SmartCampaignAdInfo): SmartCampaignAdInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated google.ads.googleads.v11.common.AdTextAsset headlines */ 1:
                    message.headlines.push(AdTextAsset.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated google.ads.googleads.v11.common.AdTextAsset descriptions */ 2:
                    message.descriptions.push(AdTextAsset.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SmartCampaignAdInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated google.ads.googleads.v11.common.AdTextAsset headlines = 1; */
        for (let i = 0; i < message.headlines.length; i++)
            AdTextAsset.internalBinaryWrite(message.headlines[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated google.ads.googleads.v11.common.AdTextAsset descriptions = 2; */
        for (let i = 0; i < message.descriptions.length; i++)
            AdTextAsset.internalBinaryWrite(message.descriptions[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.common.SmartCampaignAdInfo
 */
export const SmartCampaignAdInfo = new SmartCampaignAdInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CallAdInfo$Type extends MessageType<CallAdInfo> {
    constructor() {
        super("google.ads.googleads.v11.common.CallAdInfo", [
            { no: 1, name: "country_code", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "phone_number", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "business_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "headline1", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "headline2", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "description1", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "description2", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "call_tracked", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "disable_call_conversion", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "phone_number_verification_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "conversion_action", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "conversion_reporting_state", kind: "enum", T: () => ["google.ads.googleads.v11.enums.CallConversionReportingStateEnum.CallConversionReportingState", CallConversionReportingStateEnum_CallConversionReportingState] },
            { no: 13, name: "path1", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 14, name: "path2", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CallAdInfo>): CallAdInfo {
        const message = { countryCode: "", phoneNumber: "", businessName: "", headline1: "", headline2: "", description1: "", description2: "", callTracked: false, disableCallConversion: false, phoneNumberVerificationUrl: "", conversionAction: "", conversionReportingState: 0, path1: "", path2: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CallAdInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CallAdInfo): CallAdInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string country_code */ 1:
                    message.countryCode = reader.string();
                    break;
                case /* string phone_number */ 2:
                    message.phoneNumber = reader.string();
                    break;
                case /* string business_name */ 3:
                    message.businessName = reader.string();
                    break;
                case /* string headline1 */ 11:
                    message.headline1 = reader.string();
                    break;
                case /* string headline2 */ 12:
                    message.headline2 = reader.string();
                    break;
                case /* string description1 */ 4:
                    message.description1 = reader.string();
                    break;
                case /* string description2 */ 5:
                    message.description2 = reader.string();
                    break;
                case /* bool call_tracked */ 6:
                    message.callTracked = reader.bool();
                    break;
                case /* bool disable_call_conversion */ 7:
                    message.disableCallConversion = reader.bool();
                    break;
                case /* string phone_number_verification_url */ 8:
                    message.phoneNumberVerificationUrl = reader.string();
                    break;
                case /* string conversion_action */ 9:
                    message.conversionAction = reader.string();
                    break;
                case /* google.ads.googleads.v11.enums.CallConversionReportingStateEnum.CallConversionReportingState conversion_reporting_state */ 10:
                    message.conversionReportingState = reader.int32();
                    break;
                case /* string path1 */ 13:
                    message.path1 = reader.string();
                    break;
                case /* string path2 */ 14:
                    message.path2 = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CallAdInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string country_code = 1; */
        if (message.countryCode !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.countryCode);
        /* string phone_number = 2; */
        if (message.phoneNumber !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.phoneNumber);
        /* string business_name = 3; */
        if (message.businessName !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.businessName);
        /* string headline1 = 11; */
        if (message.headline1 !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.headline1);
        /* string headline2 = 12; */
        if (message.headline2 !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.headline2);
        /* string description1 = 4; */
        if (message.description1 !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.description1);
        /* string description2 = 5; */
        if (message.description2 !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.description2);
        /* bool call_tracked = 6; */
        if (message.callTracked !== false)
            writer.tag(6, WireType.Varint).bool(message.callTracked);
        /* bool disable_call_conversion = 7; */
        if (message.disableCallConversion !== false)
            writer.tag(7, WireType.Varint).bool(message.disableCallConversion);
        /* string phone_number_verification_url = 8; */
        if (message.phoneNumberVerificationUrl !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.phoneNumberVerificationUrl);
        /* string conversion_action = 9; */
        if (message.conversionAction !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.conversionAction);
        /* google.ads.googleads.v11.enums.CallConversionReportingStateEnum.CallConversionReportingState conversion_reporting_state = 10; */
        if (message.conversionReportingState !== 0)
            writer.tag(10, WireType.Varint).int32(message.conversionReportingState);
        /* string path1 = 13; */
        if (message.path1 !== "")
            writer.tag(13, WireType.LengthDelimited).string(message.path1);
        /* string path2 = 14; */
        if (message.path2 !== "")
            writer.tag(14, WireType.LengthDelimited).string(message.path2);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.common.CallAdInfo
 */
export const CallAdInfo = new CallAdInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DiscoveryMultiAssetAdInfo$Type extends MessageType<DiscoveryMultiAssetAdInfo> {
    constructor() {
        super("google.ads.googleads.v11.common.DiscoveryMultiAssetAdInfo", [
            { no: 1, name: "marketing_images", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => AdImageAsset },
            { no: 2, name: "square_marketing_images", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => AdImageAsset },
            { no: 3, name: "portrait_marketing_images", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => AdImageAsset },
            { no: 4, name: "logo_images", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => AdImageAsset },
            { no: 5, name: "headlines", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => AdTextAsset },
            { no: 6, name: "descriptions", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => AdTextAsset },
            { no: 7, name: "business_name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "call_to_action_text", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "lead_form_only", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<DiscoveryMultiAssetAdInfo>): DiscoveryMultiAssetAdInfo {
        const message = { marketingImages: [], squareMarketingImages: [], portraitMarketingImages: [], logoImages: [], headlines: [], descriptions: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DiscoveryMultiAssetAdInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DiscoveryMultiAssetAdInfo): DiscoveryMultiAssetAdInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated google.ads.googleads.v11.common.AdImageAsset marketing_images */ 1:
                    message.marketingImages.push(AdImageAsset.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated google.ads.googleads.v11.common.AdImageAsset square_marketing_images */ 2:
                    message.squareMarketingImages.push(AdImageAsset.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated google.ads.googleads.v11.common.AdImageAsset portrait_marketing_images */ 3:
                    message.portraitMarketingImages.push(AdImageAsset.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated google.ads.googleads.v11.common.AdImageAsset logo_images */ 4:
                    message.logoImages.push(AdImageAsset.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated google.ads.googleads.v11.common.AdTextAsset headlines */ 5:
                    message.headlines.push(AdTextAsset.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated google.ads.googleads.v11.common.AdTextAsset descriptions */ 6:
                    message.descriptions.push(AdTextAsset.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional string business_name */ 7:
                    message.businessName = reader.string();
                    break;
                case /* optional string call_to_action_text */ 8:
                    message.callToActionText = reader.string();
                    break;
                case /* optional bool lead_form_only */ 9:
                    message.leadFormOnly = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DiscoveryMultiAssetAdInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated google.ads.googleads.v11.common.AdImageAsset marketing_images = 1; */
        for (let i = 0; i < message.marketingImages.length; i++)
            AdImageAsset.internalBinaryWrite(message.marketingImages[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated google.ads.googleads.v11.common.AdImageAsset square_marketing_images = 2; */
        for (let i = 0; i < message.squareMarketingImages.length; i++)
            AdImageAsset.internalBinaryWrite(message.squareMarketingImages[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated google.ads.googleads.v11.common.AdImageAsset portrait_marketing_images = 3; */
        for (let i = 0; i < message.portraitMarketingImages.length; i++)
            AdImageAsset.internalBinaryWrite(message.portraitMarketingImages[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated google.ads.googleads.v11.common.AdImageAsset logo_images = 4; */
        for (let i = 0; i < message.logoImages.length; i++)
            AdImageAsset.internalBinaryWrite(message.logoImages[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* repeated google.ads.googleads.v11.common.AdTextAsset headlines = 5; */
        for (let i = 0; i < message.headlines.length; i++)
            AdTextAsset.internalBinaryWrite(message.headlines[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* repeated google.ads.googleads.v11.common.AdTextAsset descriptions = 6; */
        for (let i = 0; i < message.descriptions.length; i++)
            AdTextAsset.internalBinaryWrite(message.descriptions[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* optional string business_name = 7; */
        if (message.businessName !== undefined)
            writer.tag(7, WireType.LengthDelimited).string(message.businessName);
        /* optional string call_to_action_text = 8; */
        if (message.callToActionText !== undefined)
            writer.tag(8, WireType.LengthDelimited).string(message.callToActionText);
        /* optional bool lead_form_only = 9; */
        if (message.leadFormOnly !== undefined)
            writer.tag(9, WireType.Varint).bool(message.leadFormOnly);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.common.DiscoveryMultiAssetAdInfo
 */
export const DiscoveryMultiAssetAdInfo = new DiscoveryMultiAssetAdInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DiscoveryCarouselAdInfo$Type extends MessageType<DiscoveryCarouselAdInfo> {
    constructor() {
        super("google.ads.googleads.v11.common.DiscoveryCarouselAdInfo", [
            { no: 1, name: "business_name", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "google.api.field_behavior": ["REQUIRED"] } },
            { no: 2, name: "logo_image", kind: "message", T: () => AdImageAsset, options: { "google.api.field_behavior": ["REQUIRED"] } },
            { no: 3, name: "headline", kind: "message", T: () => AdTextAsset, options: { "google.api.field_behavior": ["REQUIRED"] } },
            { no: 4, name: "description", kind: "message", T: () => AdTextAsset, options: { "google.api.field_behavior": ["REQUIRED"] } },
            { no: 5, name: "call_to_action_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "carousel_cards", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => AdDiscoveryCarouselCardAsset, options: { "google.api.field_behavior": ["REQUIRED"] } }
        ]);
    }
    create(value?: PartialMessage<DiscoveryCarouselAdInfo>): DiscoveryCarouselAdInfo {
        const message = { businessName: "", callToActionText: "", carouselCards: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DiscoveryCarouselAdInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DiscoveryCarouselAdInfo): DiscoveryCarouselAdInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string business_name */ 1:
                    message.businessName = reader.string();
                    break;
                case /* google.ads.googleads.v11.common.AdImageAsset logo_image */ 2:
                    message.logoImage = AdImageAsset.internalBinaryRead(reader, reader.uint32(), options, message.logoImage);
                    break;
                case /* google.ads.googleads.v11.common.AdTextAsset headline */ 3:
                    message.headline = AdTextAsset.internalBinaryRead(reader, reader.uint32(), options, message.headline);
                    break;
                case /* google.ads.googleads.v11.common.AdTextAsset description */ 4:
                    message.description = AdTextAsset.internalBinaryRead(reader, reader.uint32(), options, message.description);
                    break;
                case /* string call_to_action_text */ 5:
                    message.callToActionText = reader.string();
                    break;
                case /* repeated google.ads.googleads.v11.common.AdDiscoveryCarouselCardAsset carousel_cards */ 6:
                    message.carouselCards.push(AdDiscoveryCarouselCardAsset.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DiscoveryCarouselAdInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string business_name = 1; */
        if (message.businessName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.businessName);
        /* google.ads.googleads.v11.common.AdImageAsset logo_image = 2; */
        if (message.logoImage)
            AdImageAsset.internalBinaryWrite(message.logoImage, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* google.ads.googleads.v11.common.AdTextAsset headline = 3; */
        if (message.headline)
            AdTextAsset.internalBinaryWrite(message.headline, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* google.ads.googleads.v11.common.AdTextAsset description = 4; */
        if (message.description)
            AdTextAsset.internalBinaryWrite(message.description, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* string call_to_action_text = 5; */
        if (message.callToActionText !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.callToActionText);
        /* repeated google.ads.googleads.v11.common.AdDiscoveryCarouselCardAsset carousel_cards = 6; */
        for (let i = 0; i < message.carouselCards.length; i++)
            AdDiscoveryCarouselCardAsset.internalBinaryWrite(message.carouselCards[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.common.DiscoveryCarouselAdInfo
 */
export const DiscoveryCarouselAdInfo = new DiscoveryCarouselAdInfo$Type();
