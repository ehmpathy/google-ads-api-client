// @generated by protobuf-ts 2.8.1
// @generated from protobuf file "ads/common/bidding.proto" (package "google.ads.googleads.v11.common", syntax proto3)
// tslint:disable
//
// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { TargetImpressionShareLocationEnum_TargetImpressionShareLocation } from "../enums/target_impression_share_location";
// Proto file describing bidding schemes.

/**
 * Commission is an automatic bidding strategy in which the advertiser pays a
 * certain portion of the conversion value.
 *
 * @generated from protobuf message google.ads.googleads.v11.common.Commission
 */
export interface Commission {
    /**
     * Commission rate defines the portion of the conversion value that the
     * advertiser will be billed. A commission rate of x should be passed into
     * this field as (x * 1,000,000). For example, 106,000 represents a commission
     * rate of 0.106 (10.6%).
     *
     * @generated from protobuf field: optional int64 commission_rate_micros = 2;
     */
    commissionRateMicros?: bigint;
}
/**
 * An automated bidding strategy that raises bids for clicks
 * that seem more likely to lead to a conversion and lowers
 * them for clicks where they seem less likely.
 *
 * This bidding strategy is deprecated and cannot be created anymore. Use
 * ManualCpc with enhanced_cpc_enabled set to true for equivalent functionality.
 *
 * @generated from protobuf message google.ads.googleads.v11.common.EnhancedCpc
 */
export interface EnhancedCpc {
}
/**
 * Manual bidding strategy that allows advertiser to set the bid per
 * advertiser-specified action.
 *
 * @generated from protobuf message google.ads.googleads.v11.common.ManualCpa
 */
export interface ManualCpa {
}
/**
 * Manual click-based bidding where user pays per click.
 *
 * @generated from protobuf message google.ads.googleads.v11.common.ManualCpc
 */
export interface ManualCpc {
    /**
     * Whether bids are to be enhanced based on conversion optimizer data.
     *
     * @generated from protobuf field: optional bool enhanced_cpc_enabled = 2;
     */
    enhancedCpcEnabled?: boolean;
}
/**
 * Manual impression-based bidding where user pays per thousand impressions.
 *
 * @generated from protobuf message google.ads.googleads.v11.common.ManualCpm
 */
export interface ManualCpm {
}
/**
 * View based bidding where user pays per video view.
 *
 * @generated from protobuf message google.ads.googleads.v11.common.ManualCpv
 */
export interface ManualCpv {
}
/**
 * An automated bidding strategy to help get the most conversions for your
 * campaigns while spending your budget.
 *
 * @generated from protobuf message google.ads.googleads.v11.common.MaximizeConversions
 */
export interface MaximizeConversions {
    /**
     * Maximum bid limit that can be set by the bid strategy.
     * The limit applies to all keywords managed by the strategy.
     * Mutable for portfolio bidding strategies only.
     *
     * @generated from protobuf field: int64 cpc_bid_ceiling_micros = 2;
     */
    cpcBidCeilingMicros: bigint;
    /**
     * Minimum bid limit that can be set by the bid strategy.
     * The limit applies to all keywords managed by the strategy.
     * Mutable for portfolio bidding strategies only.
     *
     * @generated from protobuf field: int64 cpc_bid_floor_micros = 3;
     */
    cpcBidFloorMicros: bigint;
    /**
     * The target cost-per-action (CPA) option. This is the average amount that
     * you would like to spend per conversion action specified in micro units of
     * the bidding strategy's currency. If set, the bid strategy will get as many
     * conversions as possible at or below the target cost-per-action. If the
     * target CPA is not set, the bid strategy will aim to achieve the lowest
     * possible CPA given the budget.
     *
     * @generated from protobuf field: int64 target_cpa_micros = 4;
     */
    targetCpaMicros: bigint;
}
/**
 * An automated bidding strategy to help get the most conversion value for your
 * campaigns while spending your budget.
 *
 * @generated from protobuf message google.ads.googleads.v11.common.MaximizeConversionValue
 */
export interface MaximizeConversionValue {
    /**
     * The target return on ad spend (ROAS) option. If set, the bid strategy will
     * maximize revenue while averaging the target return on ad spend. If the
     * target ROAS is high, the bid strategy may not be able to spend the full
     * budget. If the target ROAS is not set, the bid strategy will aim to
     * achieve the highest possible ROAS for the budget.
     *
     * @generated from protobuf field: double target_roas = 2;
     */
    targetRoas: number;
    /**
     * Maximum bid limit that can be set by the bid strategy.
     * The limit applies to all keywords managed by the strategy.
     * Mutable for portfolio bidding strategies only.
     *
     * @generated from protobuf field: int64 cpc_bid_ceiling_micros = 3;
     */
    cpcBidCeilingMicros: bigint;
    /**
     * Minimum bid limit that can be set by the bid strategy.
     * The limit applies to all keywords managed by the strategy.
     * Mutable for portfolio bidding strategies only.
     *
     * @generated from protobuf field: int64 cpc_bid_floor_micros = 4;
     */
    cpcBidFloorMicros: bigint;
}
/**
 * An automated bid strategy that sets bids to help get as many conversions as
 * possible at the target cost-per-acquisition (CPA) you set.
 *
 * @generated from protobuf message google.ads.googleads.v11.common.TargetCpa
 */
export interface TargetCpa {
    /**
     * Average CPA target.
     * This target should be greater than or equal to minimum billable unit based
     * on the currency for the account.
     *
     * @generated from protobuf field: optional int64 target_cpa_micros = 4;
     */
    targetCpaMicros?: bigint;
    /**
     * Maximum bid limit that can be set by the bid strategy.
     * The limit applies to all keywords managed by the strategy.
     * This should only be set for portfolio bid strategies.
     *
     * @generated from protobuf field: optional int64 cpc_bid_ceiling_micros = 5;
     */
    cpcBidCeilingMicros?: bigint;
    /**
     * Minimum bid limit that can be set by the bid strategy.
     * The limit applies to all keywords managed by the strategy.
     * This should only be set for portfolio bid strategies.
     *
     * @generated from protobuf field: optional int64 cpc_bid_floor_micros = 6;
     */
    cpcBidFloorMicros?: bigint;
}
/**
 * Target CPM (cost per thousand impressions) is an automated bidding strategy
 * that sets bids to optimize performance given the target CPM you set.
 *
 * @generated from protobuf message google.ads.googleads.v11.common.TargetCpm
 */
export interface TargetCpm {
}
/**
 * An automated bidding strategy that sets bids so that a certain percentage of
 * search ads are shown at the top of the first page (or other targeted
 * location).
 *
 * @generated from protobuf message google.ads.googleads.v11.common.TargetImpressionShare
 */
export interface TargetImpressionShare {
    /**
     * The targeted location on the search results page.
     *
     * @generated from protobuf field: google.ads.googleads.v11.enums.TargetImpressionShareLocationEnum.TargetImpressionShareLocation location = 1;
     */
    location: TargetImpressionShareLocationEnum_TargetImpressionShareLocation;
    /**
     * The chosen fraction of ads to be shown in the targeted location in micros.
     * For example, 1% equals 10,000.
     *
     * @generated from protobuf field: optional int64 location_fraction_micros = 4;
     */
    locationFractionMicros?: bigint;
    /**
     * The highest CPC bid the automated bidding system is permitted to specify.
     * This is a required field entered by the advertiser that sets the ceiling
     * and specified in local micros.
     *
     * @generated from protobuf field: optional int64 cpc_bid_ceiling_micros = 5;
     */
    cpcBidCeilingMicros?: bigint;
}
/**
 * An automated bidding strategy that helps you maximize revenue while
 * averaging a specific target return on ad spend (ROAS).
 *
 * @generated from protobuf message google.ads.googleads.v11.common.TargetRoas
 */
export interface TargetRoas {
    /**
     * Required. The chosen revenue (based on conversion data) per unit of spend.
     * Value must be between 0.01 and 1000.0, inclusive.
     *
     * @generated from protobuf field: optional double target_roas = 4;
     */
    targetRoas?: number;
    /**
     * Maximum bid limit that can be set by the bid strategy.
     * The limit applies to all keywords managed by the strategy.
     * This should only be set for portfolio bid strategies.
     *
     * @generated from protobuf field: optional int64 cpc_bid_ceiling_micros = 5;
     */
    cpcBidCeilingMicros?: bigint;
    /**
     * Minimum bid limit that can be set by the bid strategy.
     * The limit applies to all keywords managed by the strategy.
     * This should only be set for portfolio bid strategies.
     *
     * @generated from protobuf field: optional int64 cpc_bid_floor_micros = 6;
     */
    cpcBidFloorMicros?: bigint;
}
/**
 * An automated bid strategy that sets your bids to help get as many clicks
 * as possible within your budget.
 *
 * @generated from protobuf message google.ads.googleads.v11.common.TargetSpend
 */
export interface TargetSpend {
    /**
     * The spend target under which to maximize clicks.
     * A TargetSpend bidder will attempt to spend the smaller of this value
     * or the natural throttling spend amount.
     * If not specified, the budget is used as the spend target.
     * This field is deprecated and should no longer be used. See
     * https://ads-developers.googleblog.com/2020/05/reminder-about-sunset-creation-of.html
     * for details.
     *
     * @deprecated
     * @generated from protobuf field: optional int64 target_spend_micros = 3 [deprecated = true];
     */
    targetSpendMicros?: bigint;
    /**
     * Maximum bid limit that can be set by the bid strategy.
     * The limit applies to all keywords managed by the strategy.
     *
     * @generated from protobuf field: optional int64 cpc_bid_ceiling_micros = 4;
     */
    cpcBidCeilingMicros?: bigint;
}
/**
 * A bidding strategy where bids are a fraction of the advertised price for
 * some good or service.
 *
 * @generated from protobuf message google.ads.googleads.v11.common.PercentCpc
 */
export interface PercentCpc {
    /**
     * Maximum bid limit that can be set by the bid strategy. This is
     * an optional field entered by the advertiser and specified in local micros.
     * Note: A zero value is interpreted in the same way as having bid_ceiling
     * undefined.
     *
     * @generated from protobuf field: optional int64 cpc_bid_ceiling_micros = 3;
     */
    cpcBidCeilingMicros?: bigint;
    /**
     * Adjusts the bid for each auction upward or downward, depending on the
     * likelihood of a conversion. Individual bids may exceed
     * cpc_bid_ceiling_micros, but the average bid amount for a campaign should
     * not.
     *
     * @generated from protobuf field: optional bool enhanced_cpc_enabled = 4;
     */
    enhancedCpcEnabled?: boolean;
}
// @generated message type with reflection information, may provide speed optimized methods
class Commission$Type extends MessageType<Commission> {
    constructor() {
        super("google.ads.googleads.v11.common.Commission", [
            { no: 2, name: "commission_rate_micros", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<Commission>): Commission {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Commission>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Commission): Commission {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int64 commission_rate_micros */ 2:
                    message.commissionRateMicros = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Commission, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int64 commission_rate_micros = 2; */
        if (message.commissionRateMicros !== undefined)
            writer.tag(2, WireType.Varint).int64(message.commissionRateMicros);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.common.Commission
 */
export const Commission = new Commission$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EnhancedCpc$Type extends MessageType<EnhancedCpc> {
    constructor() {
        super("google.ads.googleads.v11.common.EnhancedCpc", []);
    }
    create(value?: PartialMessage<EnhancedCpc>): EnhancedCpc {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EnhancedCpc>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EnhancedCpc): EnhancedCpc {
        return target ?? this.create();
    }
    internalBinaryWrite(message: EnhancedCpc, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.common.EnhancedCpc
 */
export const EnhancedCpc = new EnhancedCpc$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ManualCpa$Type extends MessageType<ManualCpa> {
    constructor() {
        super("google.ads.googleads.v11.common.ManualCpa", []);
    }
    create(value?: PartialMessage<ManualCpa>): ManualCpa {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ManualCpa>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ManualCpa): ManualCpa {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ManualCpa, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.common.ManualCpa
 */
export const ManualCpa = new ManualCpa$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ManualCpc$Type extends MessageType<ManualCpc> {
    constructor() {
        super("google.ads.googleads.v11.common.ManualCpc", [
            { no: 2, name: "enhanced_cpc_enabled", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ManualCpc>): ManualCpc {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ManualCpc>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ManualCpc): ManualCpc {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool enhanced_cpc_enabled */ 2:
                    message.enhancedCpcEnabled = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ManualCpc, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool enhanced_cpc_enabled = 2; */
        if (message.enhancedCpcEnabled !== undefined)
            writer.tag(2, WireType.Varint).bool(message.enhancedCpcEnabled);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.common.ManualCpc
 */
export const ManualCpc = new ManualCpc$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ManualCpm$Type extends MessageType<ManualCpm> {
    constructor() {
        super("google.ads.googleads.v11.common.ManualCpm", []);
    }
    create(value?: PartialMessage<ManualCpm>): ManualCpm {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ManualCpm>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ManualCpm): ManualCpm {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ManualCpm, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.common.ManualCpm
 */
export const ManualCpm = new ManualCpm$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ManualCpv$Type extends MessageType<ManualCpv> {
    constructor() {
        super("google.ads.googleads.v11.common.ManualCpv", []);
    }
    create(value?: PartialMessage<ManualCpv>): ManualCpv {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ManualCpv>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ManualCpv): ManualCpv {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ManualCpv, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.common.ManualCpv
 */
export const ManualCpv = new ManualCpv$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MaximizeConversions$Type extends MessageType<MaximizeConversions> {
    constructor() {
        super("google.ads.googleads.v11.common.MaximizeConversions", [
            { no: 2, name: "cpc_bid_ceiling_micros", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "cpc_bid_floor_micros", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "target_cpa_micros", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<MaximizeConversions>): MaximizeConversions {
        const message = { cpcBidCeilingMicros: 0n, cpcBidFloorMicros: 0n, targetCpaMicros: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MaximizeConversions>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MaximizeConversions): MaximizeConversions {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 cpc_bid_ceiling_micros */ 2:
                    message.cpcBidCeilingMicros = reader.int64().toBigInt();
                    break;
                case /* int64 cpc_bid_floor_micros */ 3:
                    message.cpcBidFloorMicros = reader.int64().toBigInt();
                    break;
                case /* int64 target_cpa_micros */ 4:
                    message.targetCpaMicros = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MaximizeConversions, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 cpc_bid_ceiling_micros = 2; */
        if (message.cpcBidCeilingMicros !== 0n)
            writer.tag(2, WireType.Varint).int64(message.cpcBidCeilingMicros);
        /* int64 cpc_bid_floor_micros = 3; */
        if (message.cpcBidFloorMicros !== 0n)
            writer.tag(3, WireType.Varint).int64(message.cpcBidFloorMicros);
        /* int64 target_cpa_micros = 4; */
        if (message.targetCpaMicros !== 0n)
            writer.tag(4, WireType.Varint).int64(message.targetCpaMicros);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.common.MaximizeConversions
 */
export const MaximizeConversions = new MaximizeConversions$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MaximizeConversionValue$Type extends MessageType<MaximizeConversionValue> {
    constructor() {
        super("google.ads.googleads.v11.common.MaximizeConversionValue", [
            { no: 2, name: "target_roas", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 3, name: "cpc_bid_ceiling_micros", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "cpc_bid_floor_micros", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<MaximizeConversionValue>): MaximizeConversionValue {
        const message = { targetRoas: 0, cpcBidCeilingMicros: 0n, cpcBidFloorMicros: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MaximizeConversionValue>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MaximizeConversionValue): MaximizeConversionValue {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* double target_roas */ 2:
                    message.targetRoas = reader.double();
                    break;
                case /* int64 cpc_bid_ceiling_micros */ 3:
                    message.cpcBidCeilingMicros = reader.int64().toBigInt();
                    break;
                case /* int64 cpc_bid_floor_micros */ 4:
                    message.cpcBidFloorMicros = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MaximizeConversionValue, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* double target_roas = 2; */
        if (message.targetRoas !== 0)
            writer.tag(2, WireType.Bit64).double(message.targetRoas);
        /* int64 cpc_bid_ceiling_micros = 3; */
        if (message.cpcBidCeilingMicros !== 0n)
            writer.tag(3, WireType.Varint).int64(message.cpcBidCeilingMicros);
        /* int64 cpc_bid_floor_micros = 4; */
        if (message.cpcBidFloorMicros !== 0n)
            writer.tag(4, WireType.Varint).int64(message.cpcBidFloorMicros);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.common.MaximizeConversionValue
 */
export const MaximizeConversionValue = new MaximizeConversionValue$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TargetCpa$Type extends MessageType<TargetCpa> {
    constructor() {
        super("google.ads.googleads.v11.common.TargetCpa", [
            { no: 4, name: "target_cpa_micros", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "cpc_bid_ceiling_micros", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "cpc_bid_floor_micros", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<TargetCpa>): TargetCpa {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TargetCpa>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TargetCpa): TargetCpa {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int64 target_cpa_micros */ 4:
                    message.targetCpaMicros = reader.int64().toBigInt();
                    break;
                case /* optional int64 cpc_bid_ceiling_micros */ 5:
                    message.cpcBidCeilingMicros = reader.int64().toBigInt();
                    break;
                case /* optional int64 cpc_bid_floor_micros */ 6:
                    message.cpcBidFloorMicros = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TargetCpa, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int64 target_cpa_micros = 4; */
        if (message.targetCpaMicros !== undefined)
            writer.tag(4, WireType.Varint).int64(message.targetCpaMicros);
        /* optional int64 cpc_bid_ceiling_micros = 5; */
        if (message.cpcBidCeilingMicros !== undefined)
            writer.tag(5, WireType.Varint).int64(message.cpcBidCeilingMicros);
        /* optional int64 cpc_bid_floor_micros = 6; */
        if (message.cpcBidFloorMicros !== undefined)
            writer.tag(6, WireType.Varint).int64(message.cpcBidFloorMicros);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.common.TargetCpa
 */
export const TargetCpa = new TargetCpa$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TargetCpm$Type extends MessageType<TargetCpm> {
    constructor() {
        super("google.ads.googleads.v11.common.TargetCpm", []);
    }
    create(value?: PartialMessage<TargetCpm>): TargetCpm {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TargetCpm>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TargetCpm): TargetCpm {
        return target ?? this.create();
    }
    internalBinaryWrite(message: TargetCpm, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.common.TargetCpm
 */
export const TargetCpm = new TargetCpm$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TargetImpressionShare$Type extends MessageType<TargetImpressionShare> {
    constructor() {
        super("google.ads.googleads.v11.common.TargetImpressionShare", [
            { no: 1, name: "location", kind: "enum", T: () => ["google.ads.googleads.v11.enums.TargetImpressionShareLocationEnum.TargetImpressionShareLocation", TargetImpressionShareLocationEnum_TargetImpressionShareLocation] },
            { no: 4, name: "location_fraction_micros", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "cpc_bid_ceiling_micros", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<TargetImpressionShare>): TargetImpressionShare {
        const message = { location: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TargetImpressionShare>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TargetImpressionShare): TargetImpressionShare {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.ads.googleads.v11.enums.TargetImpressionShareLocationEnum.TargetImpressionShareLocation location */ 1:
                    message.location = reader.int32();
                    break;
                case /* optional int64 location_fraction_micros */ 4:
                    message.locationFractionMicros = reader.int64().toBigInt();
                    break;
                case /* optional int64 cpc_bid_ceiling_micros */ 5:
                    message.cpcBidCeilingMicros = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TargetImpressionShare, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.ads.googleads.v11.enums.TargetImpressionShareLocationEnum.TargetImpressionShareLocation location = 1; */
        if (message.location !== 0)
            writer.tag(1, WireType.Varint).int32(message.location);
        /* optional int64 location_fraction_micros = 4; */
        if (message.locationFractionMicros !== undefined)
            writer.tag(4, WireType.Varint).int64(message.locationFractionMicros);
        /* optional int64 cpc_bid_ceiling_micros = 5; */
        if (message.cpcBidCeilingMicros !== undefined)
            writer.tag(5, WireType.Varint).int64(message.cpcBidCeilingMicros);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.common.TargetImpressionShare
 */
export const TargetImpressionShare = new TargetImpressionShare$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TargetRoas$Type extends MessageType<TargetRoas> {
    constructor() {
        super("google.ads.googleads.v11.common.TargetRoas", [
            { no: 4, name: "target_roas", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 5, name: "cpc_bid_ceiling_micros", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "cpc_bid_floor_micros", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<TargetRoas>): TargetRoas {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TargetRoas>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TargetRoas): TargetRoas {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional double target_roas */ 4:
                    message.targetRoas = reader.double();
                    break;
                case /* optional int64 cpc_bid_ceiling_micros */ 5:
                    message.cpcBidCeilingMicros = reader.int64().toBigInt();
                    break;
                case /* optional int64 cpc_bid_floor_micros */ 6:
                    message.cpcBidFloorMicros = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TargetRoas, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional double target_roas = 4; */
        if (message.targetRoas !== undefined)
            writer.tag(4, WireType.Bit64).double(message.targetRoas);
        /* optional int64 cpc_bid_ceiling_micros = 5; */
        if (message.cpcBidCeilingMicros !== undefined)
            writer.tag(5, WireType.Varint).int64(message.cpcBidCeilingMicros);
        /* optional int64 cpc_bid_floor_micros = 6; */
        if (message.cpcBidFloorMicros !== undefined)
            writer.tag(6, WireType.Varint).int64(message.cpcBidFloorMicros);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.common.TargetRoas
 */
export const TargetRoas = new TargetRoas$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TargetSpend$Type extends MessageType<TargetSpend> {
    constructor() {
        super("google.ads.googleads.v11.common.TargetSpend", [
            { no: 3, name: "target_spend_micros", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "cpc_bid_ceiling_micros", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<TargetSpend>): TargetSpend {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TargetSpend>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TargetSpend): TargetSpend {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int64 target_spend_micros = 3 [deprecated = true];*/ 3:
                    message.targetSpendMicros = reader.int64().toBigInt();
                    break;
                case /* optional int64 cpc_bid_ceiling_micros */ 4:
                    message.cpcBidCeilingMicros = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TargetSpend, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int64 target_spend_micros = 3 [deprecated = true]; */
        if (message.targetSpendMicros !== undefined)
            writer.tag(3, WireType.Varint).int64(message.targetSpendMicros);
        /* optional int64 cpc_bid_ceiling_micros = 4; */
        if (message.cpcBidCeilingMicros !== undefined)
            writer.tag(4, WireType.Varint).int64(message.cpcBidCeilingMicros);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.common.TargetSpend
 */
export const TargetSpend = new TargetSpend$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PercentCpc$Type extends MessageType<PercentCpc> {
    constructor() {
        super("google.ads.googleads.v11.common.PercentCpc", [
            { no: 3, name: "cpc_bid_ceiling_micros", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "enhanced_cpc_enabled", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<PercentCpc>): PercentCpc {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PercentCpc>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PercentCpc): PercentCpc {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int64 cpc_bid_ceiling_micros */ 3:
                    message.cpcBidCeilingMicros = reader.int64().toBigInt();
                    break;
                case /* optional bool enhanced_cpc_enabled */ 4:
                    message.enhancedCpcEnabled = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PercentCpc, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int64 cpc_bid_ceiling_micros = 3; */
        if (message.cpcBidCeilingMicros !== undefined)
            writer.tag(3, WireType.Varint).int64(message.cpcBidCeilingMicros);
        /* optional bool enhanced_cpc_enabled = 4; */
        if (message.enhancedCpcEnabled !== undefined)
            writer.tag(4, WireType.Varint).bool(message.enhancedCpcEnabled);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.common.PercentCpc
 */
export const PercentCpc = new PercentCpc$Type();
