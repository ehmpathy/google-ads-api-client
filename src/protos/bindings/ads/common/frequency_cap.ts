// @generated by protobuf-ts 2.8.1
// @generated from protobuf file "ads/common/frequency_cap.proto" (package "google.ads.googleads.v11.common", syntax proto3)
// tslint:disable
//
// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { FrequencyCapTimeUnitEnum_FrequencyCapTimeUnit } from "../enums/frequency_cap_time_unit";
import { FrequencyCapEventTypeEnum_FrequencyCapEventType } from "../enums/frequency_cap_event_type";
import { FrequencyCapLevelEnum_FrequencyCapLevel } from "../enums/frequency_cap_level";
// Proto file describing frequency caps.

/**
 * A rule specifying the maximum number of times an ad (or some set of ads) can
 * be shown to a user over a particular time period.
 *
 * @generated from protobuf message google.ads.googleads.v11.common.FrequencyCapEntry
 */
export interface FrequencyCapEntry {
    /**
     * The key of a particular frequency cap. There can be no more
     * than one frequency cap with the same key.
     *
     * @generated from protobuf field: google.ads.googleads.v11.common.FrequencyCapKey key = 1;
     */
    key?: FrequencyCapKey;
    /**
     * Maximum number of events allowed during the time range by this cap.
     *
     * @generated from protobuf field: optional int32 cap = 3;
     */
    cap?: number;
}
/**
 * A group of fields used as keys for a frequency cap.
 * There can be no more than one frequency cap with the same key.
 *
 * @generated from protobuf message google.ads.googleads.v11.common.FrequencyCapKey
 */
export interface FrequencyCapKey {
    /**
     * The level on which the cap is to be applied (for example, ad group ad, ad
     * group). The cap is applied to all the entities of this level.
     *
     * @generated from protobuf field: google.ads.googleads.v11.enums.FrequencyCapLevelEnum.FrequencyCapLevel level = 1;
     */
    level: FrequencyCapLevelEnum_FrequencyCapLevel;
    /**
     * The type of event that the cap applies to (for example, impression).
     *
     * @generated from protobuf field: google.ads.googleads.v11.enums.FrequencyCapEventTypeEnum.FrequencyCapEventType event_type = 3;
     */
    eventType: FrequencyCapEventTypeEnum_FrequencyCapEventType;
    /**
     * Unit of time the cap is defined at (for example, day, week).
     *
     * @generated from protobuf field: google.ads.googleads.v11.enums.FrequencyCapTimeUnitEnum.FrequencyCapTimeUnit time_unit = 2;
     */
    timeUnit: FrequencyCapTimeUnitEnum_FrequencyCapTimeUnit;
    /**
     * Number of time units the cap lasts.
     *
     * @generated from protobuf field: optional int32 time_length = 5;
     */
    timeLength?: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class FrequencyCapEntry$Type extends MessageType<FrequencyCapEntry> {
    constructor() {
        super("google.ads.googleads.v11.common.FrequencyCapEntry", [
            { no: 1, name: "key", kind: "message", T: () => FrequencyCapKey },
            { no: 3, name: "cap", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<FrequencyCapEntry>): FrequencyCapEntry {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FrequencyCapEntry>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FrequencyCapEntry): FrequencyCapEntry {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.ads.googleads.v11.common.FrequencyCapKey key */ 1:
                    message.key = FrequencyCapKey.internalBinaryRead(reader, reader.uint32(), options, message.key);
                    break;
                case /* optional int32 cap */ 3:
                    message.cap = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FrequencyCapEntry, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.ads.googleads.v11.common.FrequencyCapKey key = 1; */
        if (message.key)
            FrequencyCapKey.internalBinaryWrite(message.key, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional int32 cap = 3; */
        if (message.cap !== undefined)
            writer.tag(3, WireType.Varint).int32(message.cap);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.common.FrequencyCapEntry
 */
export const FrequencyCapEntry = new FrequencyCapEntry$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FrequencyCapKey$Type extends MessageType<FrequencyCapKey> {
    constructor() {
        super("google.ads.googleads.v11.common.FrequencyCapKey", [
            { no: 1, name: "level", kind: "enum", T: () => ["google.ads.googleads.v11.enums.FrequencyCapLevelEnum.FrequencyCapLevel", FrequencyCapLevelEnum_FrequencyCapLevel] },
            { no: 3, name: "event_type", kind: "enum", T: () => ["google.ads.googleads.v11.enums.FrequencyCapEventTypeEnum.FrequencyCapEventType", FrequencyCapEventTypeEnum_FrequencyCapEventType] },
            { no: 2, name: "time_unit", kind: "enum", T: () => ["google.ads.googleads.v11.enums.FrequencyCapTimeUnitEnum.FrequencyCapTimeUnit", FrequencyCapTimeUnitEnum_FrequencyCapTimeUnit] },
            { no: 5, name: "time_length", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<FrequencyCapKey>): FrequencyCapKey {
        const message = { level: 0, eventType: 0, timeUnit: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FrequencyCapKey>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FrequencyCapKey): FrequencyCapKey {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.ads.googleads.v11.enums.FrequencyCapLevelEnum.FrequencyCapLevel level */ 1:
                    message.level = reader.int32();
                    break;
                case /* google.ads.googleads.v11.enums.FrequencyCapEventTypeEnum.FrequencyCapEventType event_type */ 3:
                    message.eventType = reader.int32();
                    break;
                case /* google.ads.googleads.v11.enums.FrequencyCapTimeUnitEnum.FrequencyCapTimeUnit time_unit */ 2:
                    message.timeUnit = reader.int32();
                    break;
                case /* optional int32 time_length */ 5:
                    message.timeLength = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FrequencyCapKey, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.ads.googleads.v11.enums.FrequencyCapLevelEnum.FrequencyCapLevel level = 1; */
        if (message.level !== 0)
            writer.tag(1, WireType.Varint).int32(message.level);
        /* google.ads.googleads.v11.enums.FrequencyCapEventTypeEnum.FrequencyCapEventType event_type = 3; */
        if (message.eventType !== 0)
            writer.tag(3, WireType.Varint).int32(message.eventType);
        /* google.ads.googleads.v11.enums.FrequencyCapTimeUnitEnum.FrequencyCapTimeUnit time_unit = 2; */
        if (message.timeUnit !== 0)
            writer.tag(2, WireType.Varint).int32(message.timeUnit);
        /* optional int32 time_length = 5; */
        if (message.timeLength !== undefined)
            writer.tag(5, WireType.Varint).int32(message.timeLength);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.common.FrequencyCapKey
 */
export const FrequencyCapKey = new FrequencyCapKey$Type();
