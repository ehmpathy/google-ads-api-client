// @generated by protobuf-ts 2.8.1
// @generated from protobuf file "ads/services/keyword_theme_constant_service.proto" (package "google.ads.googleads.v11.services", syntax proto3)
// tslint:disable
//
// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { KeywordThemeConstant } from "../resources/keyword_theme_constant";
/**
 * Request message for
 * [KeywordThemeConstantService.SuggestKeywordThemeConstants][google.ads.googleads.v11.services.KeywordThemeConstantService.SuggestKeywordThemeConstants].
 *
 * @generated from protobuf message google.ads.googleads.v11.services.SuggestKeywordThemeConstantsRequest
 */
export interface SuggestKeywordThemeConstantsRequest {
    /**
     * The query text of a keyword theme that will be used to map to similar
     * keyword themes. For example, "plumber" or "roofer".
     *
     * @generated from protobuf field: string query_text = 1;
     */
    queryText: string;
    /**
     * Upper-case, two-letter country code as defined by ISO-3166. This for
     * refining the scope of the query, default to 'US' if not set.
     *
     * @generated from protobuf field: string country_code = 2;
     */
    countryCode: string;
    /**
     * The two letter language code for get corresponding keyword theme for
     * refining the scope of the query, default to 'en' if not set.
     *
     * @generated from protobuf field: string language_code = 3;
     */
    languageCode: string;
}
/**
 * Response message for
 * [KeywordThemeConstantService.SuggestKeywordThemeConstants][google.ads.googleads.v11.services.KeywordThemeConstantService.SuggestKeywordThemeConstants].
 *
 * @generated from protobuf message google.ads.googleads.v11.services.SuggestKeywordThemeConstantsResponse
 */
export interface SuggestKeywordThemeConstantsResponse {
    /**
     * Smart Campaign keyword theme suggestions.
     *
     * @generated from protobuf field: repeated google.ads.googleads.v11.resources.KeywordThemeConstant keyword_theme_constants = 1;
     */
    keywordThemeConstants: KeywordThemeConstant[];
}
// @generated message type with reflection information, may provide speed optimized methods
class SuggestKeywordThemeConstantsRequest$Type extends MessageType<SuggestKeywordThemeConstantsRequest> {
    constructor() {
        super("google.ads.googleads.v11.services.SuggestKeywordThemeConstantsRequest", [
            { no: 1, name: "query_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "country_code", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "language_code", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SuggestKeywordThemeConstantsRequest>): SuggestKeywordThemeConstantsRequest {
        const message = { queryText: "", countryCode: "", languageCode: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SuggestKeywordThemeConstantsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SuggestKeywordThemeConstantsRequest): SuggestKeywordThemeConstantsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string query_text */ 1:
                    message.queryText = reader.string();
                    break;
                case /* string country_code */ 2:
                    message.countryCode = reader.string();
                    break;
                case /* string language_code */ 3:
                    message.languageCode = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SuggestKeywordThemeConstantsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string query_text = 1; */
        if (message.queryText !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.queryText);
        /* string country_code = 2; */
        if (message.countryCode !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.countryCode);
        /* string language_code = 3; */
        if (message.languageCode !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.languageCode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.services.SuggestKeywordThemeConstantsRequest
 */
export const SuggestKeywordThemeConstantsRequest = new SuggestKeywordThemeConstantsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SuggestKeywordThemeConstantsResponse$Type extends MessageType<SuggestKeywordThemeConstantsResponse> {
    constructor() {
        super("google.ads.googleads.v11.services.SuggestKeywordThemeConstantsResponse", [
            { no: 1, name: "keyword_theme_constants", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => KeywordThemeConstant }
        ]);
    }
    create(value?: PartialMessage<SuggestKeywordThemeConstantsResponse>): SuggestKeywordThemeConstantsResponse {
        const message = { keywordThemeConstants: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SuggestKeywordThemeConstantsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SuggestKeywordThemeConstantsResponse): SuggestKeywordThemeConstantsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated google.ads.googleads.v11.resources.KeywordThemeConstant keyword_theme_constants */ 1:
                    message.keywordThemeConstants.push(KeywordThemeConstant.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SuggestKeywordThemeConstantsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated google.ads.googleads.v11.resources.KeywordThemeConstant keyword_theme_constants = 1; */
        for (let i = 0; i < message.keywordThemeConstants.length; i++)
            KeywordThemeConstant.internalBinaryWrite(message.keywordThemeConstants[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.services.SuggestKeywordThemeConstantsResponse
 */
export const SuggestKeywordThemeConstantsResponse = new SuggestKeywordThemeConstantsResponse$Type();
/**
 * @generated ServiceType for protobuf service google.ads.googleads.v11.services.KeywordThemeConstantService
 */
export const KeywordThemeConstantService = new ServiceType("google.ads.googleads.v11.services.KeywordThemeConstantService", [
    { name: "SuggestKeywordThemeConstants", options: { "google.api.http": { post: "/v11/keywordThemeConstants:suggest", body: "*" } }, I: SuggestKeywordThemeConstantsRequest, O: SuggestKeywordThemeConstantsResponse }
], { "google.api.default_host": "googleads.googleapis.com", "google.api.oauth_scopes": "https://www.googleapis.com/auth/adwords" });
