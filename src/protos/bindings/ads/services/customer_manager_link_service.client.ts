// @generated by protobuf-ts 2.8.1
// @generated from protobuf file "ads/services/customer_manager_link_service.proto" (package "google.ads.googleads.v11.services", syntax proto3)
// tslint:disable
//
// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { CustomerManagerLinkService } from "./customer_manager_link_service";
import type { MoveManagerLinkResponse } from "./customer_manager_link_service";
import type { MoveManagerLinkRequest } from "./customer_manager_link_service";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { MutateCustomerManagerLinkResponse } from "./customer_manager_link_service";
import type { MutateCustomerManagerLinkRequest } from "./customer_manager_link_service";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * Service to manage customer-manager links.
 *
 * @generated from protobuf service google.ads.googleads.v11.services.CustomerManagerLinkService
 */
export interface ICustomerManagerLinkServiceClient {
    /**
     * Updates customer manager links. Operation statuses are returned.
     *
     * List of thrown errors:
     *   [AuthenticationError]()
     *   [AuthorizationError]()
     *   [DatabaseError]()
     *   [FieldError]()
     *   [FieldMaskError]()
     *   [HeaderError]()
     *   [InternalError]()
     *   [ManagerLinkError]()
     *   [MutateError]()
     *   [QuotaError]()
     *   [RequestError]()
     *
     * @generated from protobuf rpc: MutateCustomerManagerLink(google.ads.googleads.v11.services.MutateCustomerManagerLinkRequest) returns (google.ads.googleads.v11.services.MutateCustomerManagerLinkResponse);
     */
    mutateCustomerManagerLink(input: MutateCustomerManagerLinkRequest, options?: RpcOptions): UnaryCall<MutateCustomerManagerLinkRequest, MutateCustomerManagerLinkResponse>;
    /**
     * Moves a client customer to a new manager customer.
     * This simplifies the complex request that requires two operations to move
     * a client customer to a new manager, for example:
     * 1. Update operation with Status INACTIVE (previous manager) and,
     * 2. Update operation with Status ACTIVE (new manager).
     *
     * List of thrown errors:
     *   [AuthenticationError]()
     *   [AuthorizationError]()
     *   [DatabaseError]()
     *   [FieldError]()
     *   [HeaderError]()
     *   [InternalError]()
     *   [MutateError]()
     *   [QuotaError]()
     *   [RequestError]()
     *
     * @generated from protobuf rpc: MoveManagerLink(google.ads.googleads.v11.services.MoveManagerLinkRequest) returns (google.ads.googleads.v11.services.MoveManagerLinkResponse);
     */
    moveManagerLink(input: MoveManagerLinkRequest, options?: RpcOptions): UnaryCall<MoveManagerLinkRequest, MoveManagerLinkResponse>;
}
/**
 * Service to manage customer-manager links.
 *
 * @generated from protobuf service google.ads.googleads.v11.services.CustomerManagerLinkService
 */
export class CustomerManagerLinkServiceClient implements ICustomerManagerLinkServiceClient, ServiceInfo {
    typeName = CustomerManagerLinkService.typeName;
    methods = CustomerManagerLinkService.methods;
    options = CustomerManagerLinkService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Updates customer manager links. Operation statuses are returned.
     *
     * List of thrown errors:
     *   [AuthenticationError]()
     *   [AuthorizationError]()
     *   [DatabaseError]()
     *   [FieldError]()
     *   [FieldMaskError]()
     *   [HeaderError]()
     *   [InternalError]()
     *   [ManagerLinkError]()
     *   [MutateError]()
     *   [QuotaError]()
     *   [RequestError]()
     *
     * @generated from protobuf rpc: MutateCustomerManagerLink(google.ads.googleads.v11.services.MutateCustomerManagerLinkRequest) returns (google.ads.googleads.v11.services.MutateCustomerManagerLinkResponse);
     */
    mutateCustomerManagerLink(input: MutateCustomerManagerLinkRequest, options?: RpcOptions): UnaryCall<MutateCustomerManagerLinkRequest, MutateCustomerManagerLinkResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<MutateCustomerManagerLinkRequest, MutateCustomerManagerLinkResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Moves a client customer to a new manager customer.
     * This simplifies the complex request that requires two operations to move
     * a client customer to a new manager, for example:
     * 1. Update operation with Status INACTIVE (previous manager) and,
     * 2. Update operation with Status ACTIVE (new manager).
     *
     * List of thrown errors:
     *   [AuthenticationError]()
     *   [AuthorizationError]()
     *   [DatabaseError]()
     *   [FieldError]()
     *   [HeaderError]()
     *   [InternalError]()
     *   [MutateError]()
     *   [QuotaError]()
     *   [RequestError]()
     *
     * @generated from protobuf rpc: MoveManagerLink(google.ads.googleads.v11.services.MoveManagerLinkRequest) returns (google.ads.googleads.v11.services.MoveManagerLinkResponse);
     */
    moveManagerLink(input: MoveManagerLinkRequest, options?: RpcOptions): UnaryCall<MoveManagerLinkRequest, MoveManagerLinkResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<MoveManagerLinkRequest, MoveManagerLinkResponse>("unary", this._transport, method, opt, input);
    }
}
