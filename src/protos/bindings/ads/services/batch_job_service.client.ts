// @generated by protobuf-ts 2.8.1
// @generated from protobuf file "ads/services/batch_job_service.proto" (package "google.ads.googleads.v11.services", syntax proto3)
// tslint:disable
//
// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { BatchJobService } from "./batch_job_service";
import type { AddBatchJobOperationsResponse } from "./batch_job_service";
import type { AddBatchJobOperationsRequest } from "./batch_job_service";
import type { Operation } from "../../google/longrunning/operations";
import type { RunBatchJobRequest } from "./batch_job_service";
import type { ListBatchJobResultsResponse } from "./batch_job_service";
import type { ListBatchJobResultsRequest } from "./batch_job_service";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { MutateBatchJobResponse } from "./batch_job_service";
import type { MutateBatchJobRequest } from "./batch_job_service";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
// Proto file describing the BatchJobService.

/**
 * Service to manage batch jobs.
 *
 * @generated from protobuf service google.ads.googleads.v11.services.BatchJobService
 */
export interface IBatchJobServiceClient {
    /**
     * Mutates a batch job.
     *
     * List of thrown errors:
     *   [AuthenticationError]()
     *   [AuthorizationError]()
     *   [HeaderError]()
     *   [InternalError]()
     *   [QuotaError]()
     *   [RequestError]()
     *   [ResourceCountLimitExceededError]()
     *
     * @generated from protobuf rpc: MutateBatchJob(google.ads.googleads.v11.services.MutateBatchJobRequest) returns (google.ads.googleads.v11.services.MutateBatchJobResponse);
     */
    mutateBatchJob(input: MutateBatchJobRequest, options?: RpcOptions): UnaryCall<MutateBatchJobRequest, MutateBatchJobResponse>;
    /**
     * Returns the results of the batch job. The job must be done.
     * Supports standard list paging.
     *
     * List of thrown errors:
     *   [AuthenticationError]()
     *   [AuthorizationError]()
     *   [BatchJobError]()
     *   [HeaderError]()
     *   [InternalError]()
     *   [QuotaError]()
     *   [RequestError]()
     *
     * @generated from protobuf rpc: ListBatchJobResults(google.ads.googleads.v11.services.ListBatchJobResultsRequest) returns (google.ads.googleads.v11.services.ListBatchJobResultsResponse);
     */
    listBatchJobResults(input: ListBatchJobResultsRequest, options?: RpcOptions): UnaryCall<ListBatchJobResultsRequest, ListBatchJobResultsResponse>;
    /**
     * Runs the batch job.
     *
     * The Operation.metadata field type is BatchJobMetadata. When finished, the
     * long running operation will not contain errors or a response. Instead, use
     * ListBatchJobResults to get the results of the job.
     *
     * List of thrown errors:
     *   [AuthenticationError]()
     *   [AuthorizationError]()
     *   [BatchJobError]()
     *   [HeaderError]()
     *   [InternalError]()
     *   [QuotaError]()
     *   [RequestError]()
     *
     * @generated from protobuf rpc: RunBatchJob(google.ads.googleads.v11.services.RunBatchJobRequest) returns (google.longrunning.Operation);
     */
    runBatchJob(input: RunBatchJobRequest, options?: RpcOptions): UnaryCall<RunBatchJobRequest, Operation>;
    /**
     * Add operations to the batch job.
     *
     * List of thrown errors:
     *   [AuthenticationError]()
     *   [AuthorizationError]()
     *   [BatchJobError]()
     *   [HeaderError]()
     *   [InternalError]()
     *   [QuotaError]()
     *   [RequestError]()
     *   [ResourceCountLimitExceededError]()
     *
     * @generated from protobuf rpc: AddBatchJobOperations(google.ads.googleads.v11.services.AddBatchJobOperationsRequest) returns (google.ads.googleads.v11.services.AddBatchJobOperationsResponse);
     */
    addBatchJobOperations(input: AddBatchJobOperationsRequest, options?: RpcOptions): UnaryCall<AddBatchJobOperationsRequest, AddBatchJobOperationsResponse>;
}
// Proto file describing the BatchJobService.

/**
 * Service to manage batch jobs.
 *
 * @generated from protobuf service google.ads.googleads.v11.services.BatchJobService
 */
export class BatchJobServiceClient implements IBatchJobServiceClient, ServiceInfo {
    typeName = BatchJobService.typeName;
    methods = BatchJobService.methods;
    options = BatchJobService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Mutates a batch job.
     *
     * List of thrown errors:
     *   [AuthenticationError]()
     *   [AuthorizationError]()
     *   [HeaderError]()
     *   [InternalError]()
     *   [QuotaError]()
     *   [RequestError]()
     *   [ResourceCountLimitExceededError]()
     *
     * @generated from protobuf rpc: MutateBatchJob(google.ads.googleads.v11.services.MutateBatchJobRequest) returns (google.ads.googleads.v11.services.MutateBatchJobResponse);
     */
    mutateBatchJob(input: MutateBatchJobRequest, options?: RpcOptions): UnaryCall<MutateBatchJobRequest, MutateBatchJobResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<MutateBatchJobRequest, MutateBatchJobResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Returns the results of the batch job. The job must be done.
     * Supports standard list paging.
     *
     * List of thrown errors:
     *   [AuthenticationError]()
     *   [AuthorizationError]()
     *   [BatchJobError]()
     *   [HeaderError]()
     *   [InternalError]()
     *   [QuotaError]()
     *   [RequestError]()
     *
     * @generated from protobuf rpc: ListBatchJobResults(google.ads.googleads.v11.services.ListBatchJobResultsRequest) returns (google.ads.googleads.v11.services.ListBatchJobResultsResponse);
     */
    listBatchJobResults(input: ListBatchJobResultsRequest, options?: RpcOptions): UnaryCall<ListBatchJobResultsRequest, ListBatchJobResultsResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListBatchJobResultsRequest, ListBatchJobResultsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Runs the batch job.
     *
     * The Operation.metadata field type is BatchJobMetadata. When finished, the
     * long running operation will not contain errors or a response. Instead, use
     * ListBatchJobResults to get the results of the job.
     *
     * List of thrown errors:
     *   [AuthenticationError]()
     *   [AuthorizationError]()
     *   [BatchJobError]()
     *   [HeaderError]()
     *   [InternalError]()
     *   [QuotaError]()
     *   [RequestError]()
     *
     * @generated from protobuf rpc: RunBatchJob(google.ads.googleads.v11.services.RunBatchJobRequest) returns (google.longrunning.Operation);
     */
    runBatchJob(input: RunBatchJobRequest, options?: RpcOptions): UnaryCall<RunBatchJobRequest, Operation> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<RunBatchJobRequest, Operation>("unary", this._transport, method, opt, input);
    }
    /**
     * Add operations to the batch job.
     *
     * List of thrown errors:
     *   [AuthenticationError]()
     *   [AuthorizationError]()
     *   [BatchJobError]()
     *   [HeaderError]()
     *   [InternalError]()
     *   [QuotaError]()
     *   [RequestError]()
     *   [ResourceCountLimitExceededError]()
     *
     * @generated from protobuf rpc: AddBatchJobOperations(google.ads.googleads.v11.services.AddBatchJobOperationsRequest) returns (google.ads.googleads.v11.services.AddBatchJobOperationsResponse);
     */
    addBatchJobOperations(input: AddBatchJobOperationsRequest, options?: RpcOptions): UnaryCall<AddBatchJobOperationsRequest, AddBatchJobOperationsResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<AddBatchJobOperationsRequest, AddBatchJobOperationsResponse>("unary", this._transport, method, opt, input);
    }
}
