// @generated by protobuf-ts 2.8.1
// @generated from protobuf file "ads/services/conversion_upload_service.proto" (package "google.ads.googleads.v11.services", syntax proto3)
// tslint:disable
//
// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { ConversionEnvironmentEnum_ConversionEnvironment } from "../enums/conversion_environment_enum";
import { UserIdentifier } from "../common/offline_user_data";
import { Status } from "../../google/rpc/status";
/**
 * Request message for [ConversionUploadService.UploadClickConversions][google.ads.googleads.v11.services.ConversionUploadService.UploadClickConversions].
 *
 * @generated from protobuf message google.ads.googleads.v11.services.UploadClickConversionsRequest
 */
export interface UploadClickConversionsRequest {
    /**
     * Required. The ID of the customer performing the upload.
     *
     * @generated from protobuf field: string customer_id = 1;
     */
    customerId: string;
    /**
     * Required. The conversions that are being uploaded.
     *
     * @generated from protobuf field: repeated google.ads.googleads.v11.services.ClickConversion conversions = 2;
     */
    conversions: ClickConversion[];
    /**
     * Required. If true, successful operations will be carried out and invalid
     * operations will return errors. If false, all operations will be carried
     * out in one transaction if and only if they are all valid.
     * This should always be set to true.
     * See
     * https://developers.google.com/google-ads/api/docs/best-practices/partial-failures
     * for more information about partial failure.
     *
     * @generated from protobuf field: bool partial_failure = 3;
     */
    partialFailure: boolean;
    /**
     * If true, the request is validated but not executed. Only errors are
     * returned, not results.
     *
     * @generated from protobuf field: bool validate_only = 4;
     */
    validateOnly: boolean;
}
/**
 * Response message for [ConversionUploadService.UploadClickConversions][google.ads.googleads.v11.services.ConversionUploadService.UploadClickConversions].
 *
 * @generated from protobuf message google.ads.googleads.v11.services.UploadClickConversionsResponse
 */
export interface UploadClickConversionsResponse {
    /**
     * Errors that pertain to conversion failures in the partial failure mode.
     * Returned when all errors occur inside the conversions. If any errors occur
     * outside the conversions (for example, auth errors), we return an RPC level
     * error. See
     * https://developers.google.com/google-ads/api/docs/best-practices/partial-failures
     * for more information about partial failure.
     *
     * @generated from protobuf field: google.rpc.Status partial_failure_error = 1;
     */
    partialFailureError?: Status;
    /**
     * Returned for successfully processed conversions. Proto will be empty for
     * rows that received an error. Results are not returned when validate_only is
     * true.
     *
     * @generated from protobuf field: repeated google.ads.googleads.v11.services.ClickConversionResult results = 2;
     */
    results: ClickConversionResult[];
}
/**
 * Request message for [ConversionUploadService.UploadCallConversions][google.ads.googleads.v11.services.ConversionUploadService.UploadCallConversions].
 *
 * @generated from protobuf message google.ads.googleads.v11.services.UploadCallConversionsRequest
 */
export interface UploadCallConversionsRequest {
    /**
     * Required. The ID of the customer performing the upload.
     *
     * @generated from protobuf field: string customer_id = 1;
     */
    customerId: string;
    /**
     * Required. The conversions that are being uploaded.
     *
     * @generated from protobuf field: repeated google.ads.googleads.v11.services.CallConversion conversions = 2;
     */
    conversions: CallConversion[];
    /**
     * Required. If true, successful operations will be carried out and invalid
     * operations will return errors. If false, all operations will be carried
     * out in one transaction if and only if they are all valid.
     * This should always be set to true.
     * See
     * https://developers.google.com/google-ads/api/docs/best-practices/partial-failures
     * for more information about partial failure.
     *
     * @generated from protobuf field: bool partial_failure = 3;
     */
    partialFailure: boolean;
    /**
     * If true, the request is validated but not executed. Only errors are
     * returned, not results.
     *
     * @generated from protobuf field: bool validate_only = 4;
     */
    validateOnly: boolean;
}
/**
 * Response message for [ConversionUploadService.UploadCallConversions][google.ads.googleads.v11.services.ConversionUploadService.UploadCallConversions].
 *
 * @generated from protobuf message google.ads.googleads.v11.services.UploadCallConversionsResponse
 */
export interface UploadCallConversionsResponse {
    /**
     * Errors that pertain to conversion failures in the partial failure mode.
     * Returned when all errors occur inside the conversions. If any errors occur
     * outside the conversions (for example, auth errors), we return an RPC level
     * error. See
     * https://developers.google.com/google-ads/api/docs/best-practices/partial-failures
     * for more information about partial failure.
     *
     * @generated from protobuf field: google.rpc.Status partial_failure_error = 1;
     */
    partialFailureError?: Status;
    /**
     * Returned for successfully processed conversions. Proto will be empty for
     * rows that received an error. Results are not returned when validate_only is
     * true.
     *
     * @generated from protobuf field: repeated google.ads.googleads.v11.services.CallConversionResult results = 2;
     */
    results: CallConversionResult[];
}
/**
 * A click conversion.
 *
 * @generated from protobuf message google.ads.googleads.v11.services.ClickConversion
 */
export interface ClickConversion {
    /**
     * The Google click ID (gclid) associated with this conversion.
     *
     * @generated from protobuf field: optional string gclid = 9;
     */
    gclid?: string;
    /**
     * The click identifier for clicks associated with app conversions and
     * originating from iOS devices starting with iOS14.
     *
     * @generated from protobuf field: string gbraid = 18;
     */
    gbraid: string;
    /**
     * The click identifier for clicks associated with web conversions and
     * originating from iOS devices starting with iOS14.
     *
     * @generated from protobuf field: string wbraid = 19;
     */
    wbraid: string;
    /**
     * Resource name of the conversion action associated with this conversion.
     * Note: Although this resource name consists of a customer id and a
     * conversion action id, validation will ignore the customer id and use the
     * conversion action id as the sole identifier of the conversion action.
     *
     * @generated from protobuf field: optional string conversion_action = 10;
     */
    conversionAction?: string;
    /**
     * The date time at which the conversion occurred. Must be after
     * the click time. The timezone must be specified. The format is
     * "yyyy-mm-dd hh:mm:ss+|-hh:mm", for example, "2019-01-01 12:32:45-08:00".
     *
     * @generated from protobuf field: optional string conversion_date_time = 11;
     */
    conversionDateTime?: string;
    /**
     * The value of the conversion for the advertiser.
     *
     * @generated from protobuf field: optional double conversion_value = 12;
     */
    conversionValue?: number;
    /**
     * Currency associated with the conversion value. This is the ISO 4217
     * 3-character currency code. For example: USD, EUR.
     *
     * @generated from protobuf field: optional string currency_code = 13;
     */
    currencyCode?: string;
    /**
     * The order ID associated with the conversion. An order id can only be used
     * for one conversion per conversion action.
     *
     * @generated from protobuf field: optional string order_id = 14;
     */
    orderId?: string;
    /**
     * Additional data about externally attributed conversions. This field
     * is required for conversions with an externally attributed conversion
     * action, but should not be set otherwise.
     *
     * @generated from protobuf field: google.ads.googleads.v11.services.ExternalAttributionData external_attribution_data = 7;
     */
    externalAttributionData?: ExternalAttributionData;
    /**
     * The custom variables associated with this conversion.
     *
     * @generated from protobuf field: repeated google.ads.googleads.v11.services.CustomVariable custom_variables = 15;
     */
    customVariables: CustomVariable[];
    /**
     * The cart data associated with this conversion.
     *
     * @generated from protobuf field: google.ads.googleads.v11.services.CartData cart_data = 16;
     */
    cartData?: CartData;
    /**
     * The user identifiers associated with this conversion. Only hashed_email and
     * hashed_phone_number are supported for conversion uploads. The maximum
     * number of user identifiers for each conversion is 5.
     *
     * @generated from protobuf field: repeated google.ads.googleads.v11.common.UserIdentifier user_identifiers = 17;
     */
    userIdentifiers: UserIdentifier[];
    /**
     * The environment this conversion was recorded on, for example, App or Web.
     *
     * @generated from protobuf field: google.ads.googleads.v11.enums.ConversionEnvironmentEnum.ConversionEnvironment conversion_environment = 20;
     */
    conversionEnvironment: ConversionEnvironmentEnum_ConversionEnvironment;
}
/**
 * A call conversion.
 *
 * @generated from protobuf message google.ads.googleads.v11.services.CallConversion
 */
export interface CallConversion {
    /**
     * The caller id from which this call was placed. Caller id is expected to be
     * in E.164 format with preceding '+' sign, for example, "+16502531234".
     *
     * @generated from protobuf field: optional string caller_id = 7;
     */
    callerId?: string;
    /**
     * The date time at which the call occurred. The timezone must be specified.
     * The format is "yyyy-mm-dd hh:mm:ss+|-hh:mm",
     * for example, "2019-01-01 12:32:45-08:00".
     *
     * @generated from protobuf field: optional string call_start_date_time = 8;
     */
    callStartDateTime?: string;
    /**
     * Resource name of the conversion action associated with this conversion.
     * Note: Although this resource name consists of a customer id and a
     * conversion action id, validation will ignore the customer id and use the
     * conversion action id as the sole identifier of the conversion action.
     *
     * @generated from protobuf field: optional string conversion_action = 9;
     */
    conversionAction?: string;
    /**
     * The date time at which the conversion occurred. Must be after the call
     * time. The timezone must be specified. The format is
     * "yyyy-mm-dd hh:mm:ss+|-hh:mm", for example, "2019-01-01 12:32:45-08:00".
     *
     * @generated from protobuf field: optional string conversion_date_time = 10;
     */
    conversionDateTime?: string;
    /**
     * The value of the conversion for the advertiser.
     *
     * @generated from protobuf field: optional double conversion_value = 11;
     */
    conversionValue?: number;
    /**
     * Currency associated with the conversion value. This is the ISO 4217
     * 3-character currency code. For example: USD, EUR.
     *
     * @generated from protobuf field: optional string currency_code = 12;
     */
    currencyCode?: string;
    /**
     * The custom variables associated with this conversion.
     *
     * @generated from protobuf field: repeated google.ads.googleads.v11.services.CustomVariable custom_variables = 13;
     */
    customVariables: CustomVariable[];
}
/**
 * Contains additional information about externally attributed conversions.
 *
 * @generated from protobuf message google.ads.googleads.v11.services.ExternalAttributionData
 */
export interface ExternalAttributionData {
    /**
     * Represents the fraction of the conversion that is attributed to the
     * Google Ads click.
     *
     * @generated from protobuf field: optional double external_attribution_credit = 3;
     */
    externalAttributionCredit?: number;
    /**
     * Specifies the attribution model name.
     *
     * @generated from protobuf field: optional string external_attribution_model = 4;
     */
    externalAttributionModel?: string;
}
/**
 * Identifying information for a successfully processed ClickConversion.
 *
 * @generated from protobuf message google.ads.googleads.v11.services.ClickConversionResult
 */
export interface ClickConversionResult {
    /**
     * The Google Click ID (gclid) associated with this conversion.
     *
     * @generated from protobuf field: optional string gclid = 4;
     */
    gclid?: string;
    /**
     * The click identifier for clicks associated with app conversions and
     * originating from iOS devices starting with iOS14.
     *
     * @generated from protobuf field: string gbraid = 8;
     */
    gbraid: string;
    /**
     * The click identifier for clicks associated with web conversions and
     * originating from iOS devices starting with iOS14.
     *
     * @generated from protobuf field: string wbraid = 9;
     */
    wbraid: string;
    /**
     * Resource name of the conversion action associated with this conversion.
     *
     * @generated from protobuf field: optional string conversion_action = 5;
     */
    conversionAction?: string;
    /**
     * The date time at which the conversion occurred. The format is
     * "yyyy-mm-dd hh:mm:ss+|-hh:mm", for example, "2019-01-01 12:32:45-08:00".
     *
     * @generated from protobuf field: optional string conversion_date_time = 6;
     */
    conversionDateTime?: string;
    /**
     * The user identifiers associated with this conversion. Only hashed_email and
     * hashed_phone_number are supported for conversion uploads. The maximum
     * number of user identifiers for each conversion is 5.
     *
     * @generated from protobuf field: repeated google.ads.googleads.v11.common.UserIdentifier user_identifiers = 7;
     */
    userIdentifiers: UserIdentifier[];
}
/**
 * Identifying information for a successfully processed CallConversionUpload.
 *
 * @generated from protobuf message google.ads.googleads.v11.services.CallConversionResult
 */
export interface CallConversionResult {
    /**
     * The caller id from which this call was placed. Caller id is expected to be
     * in E.164 format with preceding '+' sign.
     *
     * @generated from protobuf field: optional string caller_id = 5;
     */
    callerId?: string;
    /**
     * The date time at which the call occurred. The format is
     * "yyyy-mm-dd hh:mm:ss+|-hh:mm", for example, "2019-01-01 12:32:45-08:00".
     *
     * @generated from protobuf field: optional string call_start_date_time = 6;
     */
    callStartDateTime?: string;
    /**
     * Resource name of the conversion action associated with this conversion.
     *
     * @generated from protobuf field: optional string conversion_action = 7;
     */
    conversionAction?: string;
    /**
     * The date time at which the conversion occurred. The format is
     * "yyyy-mm-dd hh:mm:ss+|-hh:mm", for example, "2019-01-01 12:32:45-08:00".
     *
     * @generated from protobuf field: optional string conversion_date_time = 8;
     */
    conversionDateTime?: string;
}
/**
 * A custom variable.
 *
 * @generated from protobuf message google.ads.googleads.v11.services.CustomVariable
 */
export interface CustomVariable {
    /**
     * Resource name of the custom variable associated with this conversion.
     * Note: Although this resource name consists of a customer id and a
     * conversion custom variable id, validation will ignore the customer id and
     * use the conversion custom variable id as the sole identifier of the
     * conversion custom variable.
     *
     * @generated from protobuf field: string conversion_custom_variable = 1;
     */
    conversionCustomVariable: string;
    /**
     * The value string of this custom variable.
     * The value of the custom variable should not contain private customer data,
     * such as email addresses or phone numbers.
     *
     * @generated from protobuf field: string value = 2;
     */
    value: string;
}
/**
 * Contains additional information about cart data.
 *
 * @generated from protobuf message google.ads.googleads.v11.services.CartData
 */
export interface CartData {
    /**
     * The Merchant Center ID where the items are uploaded.
     *
     * @generated from protobuf field: int64 merchant_id = 6;
     */
    merchantId: bigint;
    /**
     * The country code associated with the feed where the items are uploaded.
     *
     * @generated from protobuf field: string feed_country_code = 2;
     */
    feedCountryCode: string;
    /**
     * The language code associated with the feed where the items are uploaded.
     *
     * @generated from protobuf field: string feed_language_code = 3;
     */
    feedLanguageCode: string;
    /**
     * Sum of all transaction level discounts, such as free shipping and
     * coupon discounts for the whole cart. The currency code is the same
     * as that in the ClickConversion message.
     *
     * @generated from protobuf field: double local_transaction_cost = 4;
     */
    localTransactionCost: number;
    /**
     * Data of the items purchased.
     *
     * @generated from protobuf field: repeated google.ads.googleads.v11.services.CartData.Item items = 5;
     */
    items: CartData_Item[];
}
/**
 * Contains data of the items purchased.
 *
 * @generated from protobuf message google.ads.googleads.v11.services.CartData.Item
 */
export interface CartData_Item {
    /**
     * The shopping id of the item. Must be equal to the Merchant Center product
     * identifier.
     *
     * @generated from protobuf field: string product_id = 1;
     */
    productId: string;
    /**
     * Number of items sold.
     *
     * @generated from protobuf field: int32 quantity = 2;
     */
    quantity: number;
    /**
     * Unit price excluding tax, shipping, and any transaction
     * level discounts. The currency code is the same as that in the
     * ClickConversion message.
     *
     * @generated from protobuf field: double unit_price = 3;
     */
    unitPrice: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class UploadClickConversionsRequest$Type extends MessageType<UploadClickConversionsRequest> {
    constructor() {
        super("google.ads.googleads.v11.services.UploadClickConversionsRequest", [
            { no: 1, name: "customer_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "google.api.field_behavior": ["REQUIRED"] } },
            { no: 2, name: "conversions", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ClickConversion, options: { "google.api.field_behavior": ["REQUIRED"] } },
            { no: 3, name: "partial_failure", kind: "scalar", T: 8 /*ScalarType.BOOL*/, options: { "google.api.field_behavior": ["REQUIRED"] } },
            { no: 4, name: "validate_only", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<UploadClickConversionsRequest>): UploadClickConversionsRequest {
        const message = { customerId: "", conversions: [], partialFailure: false, validateOnly: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UploadClickConversionsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UploadClickConversionsRequest): UploadClickConversionsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string customer_id */ 1:
                    message.customerId = reader.string();
                    break;
                case /* repeated google.ads.googleads.v11.services.ClickConversion conversions */ 2:
                    message.conversions.push(ClickConversion.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* bool partial_failure */ 3:
                    message.partialFailure = reader.bool();
                    break;
                case /* bool validate_only */ 4:
                    message.validateOnly = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UploadClickConversionsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string customer_id = 1; */
        if (message.customerId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.customerId);
        /* repeated google.ads.googleads.v11.services.ClickConversion conversions = 2; */
        for (let i = 0; i < message.conversions.length; i++)
            ClickConversion.internalBinaryWrite(message.conversions[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* bool partial_failure = 3; */
        if (message.partialFailure !== false)
            writer.tag(3, WireType.Varint).bool(message.partialFailure);
        /* bool validate_only = 4; */
        if (message.validateOnly !== false)
            writer.tag(4, WireType.Varint).bool(message.validateOnly);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.services.UploadClickConversionsRequest
 */
export const UploadClickConversionsRequest = new UploadClickConversionsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UploadClickConversionsResponse$Type extends MessageType<UploadClickConversionsResponse> {
    constructor() {
        super("google.ads.googleads.v11.services.UploadClickConversionsResponse", [
            { no: 1, name: "partial_failure_error", kind: "message", T: () => Status },
            { no: 2, name: "results", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ClickConversionResult }
        ]);
    }
    create(value?: PartialMessage<UploadClickConversionsResponse>): UploadClickConversionsResponse {
        const message = { results: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UploadClickConversionsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UploadClickConversionsResponse): UploadClickConversionsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.rpc.Status partial_failure_error */ 1:
                    message.partialFailureError = Status.internalBinaryRead(reader, reader.uint32(), options, message.partialFailureError);
                    break;
                case /* repeated google.ads.googleads.v11.services.ClickConversionResult results */ 2:
                    message.results.push(ClickConversionResult.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UploadClickConversionsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.rpc.Status partial_failure_error = 1; */
        if (message.partialFailureError)
            Status.internalBinaryWrite(message.partialFailureError, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated google.ads.googleads.v11.services.ClickConversionResult results = 2; */
        for (let i = 0; i < message.results.length; i++)
            ClickConversionResult.internalBinaryWrite(message.results[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.services.UploadClickConversionsResponse
 */
export const UploadClickConversionsResponse = new UploadClickConversionsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UploadCallConversionsRequest$Type extends MessageType<UploadCallConversionsRequest> {
    constructor() {
        super("google.ads.googleads.v11.services.UploadCallConversionsRequest", [
            { no: 1, name: "customer_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "google.api.field_behavior": ["REQUIRED"] } },
            { no: 2, name: "conversions", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => CallConversion, options: { "google.api.field_behavior": ["REQUIRED"] } },
            { no: 3, name: "partial_failure", kind: "scalar", T: 8 /*ScalarType.BOOL*/, options: { "google.api.field_behavior": ["REQUIRED"] } },
            { no: 4, name: "validate_only", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<UploadCallConversionsRequest>): UploadCallConversionsRequest {
        const message = { customerId: "", conversions: [], partialFailure: false, validateOnly: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UploadCallConversionsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UploadCallConversionsRequest): UploadCallConversionsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string customer_id */ 1:
                    message.customerId = reader.string();
                    break;
                case /* repeated google.ads.googleads.v11.services.CallConversion conversions */ 2:
                    message.conversions.push(CallConversion.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* bool partial_failure */ 3:
                    message.partialFailure = reader.bool();
                    break;
                case /* bool validate_only */ 4:
                    message.validateOnly = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UploadCallConversionsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string customer_id = 1; */
        if (message.customerId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.customerId);
        /* repeated google.ads.googleads.v11.services.CallConversion conversions = 2; */
        for (let i = 0; i < message.conversions.length; i++)
            CallConversion.internalBinaryWrite(message.conversions[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* bool partial_failure = 3; */
        if (message.partialFailure !== false)
            writer.tag(3, WireType.Varint).bool(message.partialFailure);
        /* bool validate_only = 4; */
        if (message.validateOnly !== false)
            writer.tag(4, WireType.Varint).bool(message.validateOnly);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.services.UploadCallConversionsRequest
 */
export const UploadCallConversionsRequest = new UploadCallConversionsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UploadCallConversionsResponse$Type extends MessageType<UploadCallConversionsResponse> {
    constructor() {
        super("google.ads.googleads.v11.services.UploadCallConversionsResponse", [
            { no: 1, name: "partial_failure_error", kind: "message", T: () => Status },
            { no: 2, name: "results", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => CallConversionResult }
        ]);
    }
    create(value?: PartialMessage<UploadCallConversionsResponse>): UploadCallConversionsResponse {
        const message = { results: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UploadCallConversionsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UploadCallConversionsResponse): UploadCallConversionsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.rpc.Status partial_failure_error */ 1:
                    message.partialFailureError = Status.internalBinaryRead(reader, reader.uint32(), options, message.partialFailureError);
                    break;
                case /* repeated google.ads.googleads.v11.services.CallConversionResult results */ 2:
                    message.results.push(CallConversionResult.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UploadCallConversionsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.rpc.Status partial_failure_error = 1; */
        if (message.partialFailureError)
            Status.internalBinaryWrite(message.partialFailureError, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated google.ads.googleads.v11.services.CallConversionResult results = 2; */
        for (let i = 0; i < message.results.length; i++)
            CallConversionResult.internalBinaryWrite(message.results[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.services.UploadCallConversionsResponse
 */
export const UploadCallConversionsResponse = new UploadCallConversionsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ClickConversion$Type extends MessageType<ClickConversion> {
    constructor() {
        super("google.ads.googleads.v11.services.ClickConversion", [
            { no: 9, name: "gclid", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 18, name: "gbraid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 19, name: "wbraid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "conversion_action", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "conversion_date_time", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "conversion_value", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 13, name: "currency_code", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 14, name: "order_id", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "external_attribution_data", kind: "message", T: () => ExternalAttributionData },
            { no: 15, name: "custom_variables", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => CustomVariable },
            { no: 16, name: "cart_data", kind: "message", T: () => CartData },
            { no: 17, name: "user_identifiers", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => UserIdentifier },
            { no: 20, name: "conversion_environment", kind: "enum", T: () => ["google.ads.googleads.v11.enums.ConversionEnvironmentEnum.ConversionEnvironment", ConversionEnvironmentEnum_ConversionEnvironment] }
        ]);
    }
    create(value?: PartialMessage<ClickConversion>): ClickConversion {
        const message = { gbraid: "", wbraid: "", customVariables: [], userIdentifiers: [], conversionEnvironment: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ClickConversion>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ClickConversion): ClickConversion {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string gclid */ 9:
                    message.gclid = reader.string();
                    break;
                case /* string gbraid */ 18:
                    message.gbraid = reader.string();
                    break;
                case /* string wbraid */ 19:
                    message.wbraid = reader.string();
                    break;
                case /* optional string conversion_action */ 10:
                    message.conversionAction = reader.string();
                    break;
                case /* optional string conversion_date_time */ 11:
                    message.conversionDateTime = reader.string();
                    break;
                case /* optional double conversion_value */ 12:
                    message.conversionValue = reader.double();
                    break;
                case /* optional string currency_code */ 13:
                    message.currencyCode = reader.string();
                    break;
                case /* optional string order_id */ 14:
                    message.orderId = reader.string();
                    break;
                case /* google.ads.googleads.v11.services.ExternalAttributionData external_attribution_data */ 7:
                    message.externalAttributionData = ExternalAttributionData.internalBinaryRead(reader, reader.uint32(), options, message.externalAttributionData);
                    break;
                case /* repeated google.ads.googleads.v11.services.CustomVariable custom_variables */ 15:
                    message.customVariables.push(CustomVariable.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* google.ads.googleads.v11.services.CartData cart_data */ 16:
                    message.cartData = CartData.internalBinaryRead(reader, reader.uint32(), options, message.cartData);
                    break;
                case /* repeated google.ads.googleads.v11.common.UserIdentifier user_identifiers */ 17:
                    message.userIdentifiers.push(UserIdentifier.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* google.ads.googleads.v11.enums.ConversionEnvironmentEnum.ConversionEnvironment conversion_environment */ 20:
                    message.conversionEnvironment = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ClickConversion, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string gclid = 9; */
        if (message.gclid !== undefined)
            writer.tag(9, WireType.LengthDelimited).string(message.gclid);
        /* string gbraid = 18; */
        if (message.gbraid !== "")
            writer.tag(18, WireType.LengthDelimited).string(message.gbraid);
        /* string wbraid = 19; */
        if (message.wbraid !== "")
            writer.tag(19, WireType.LengthDelimited).string(message.wbraid);
        /* optional string conversion_action = 10; */
        if (message.conversionAction !== undefined)
            writer.tag(10, WireType.LengthDelimited).string(message.conversionAction);
        /* optional string conversion_date_time = 11; */
        if (message.conversionDateTime !== undefined)
            writer.tag(11, WireType.LengthDelimited).string(message.conversionDateTime);
        /* optional double conversion_value = 12; */
        if (message.conversionValue !== undefined)
            writer.tag(12, WireType.Bit64).double(message.conversionValue);
        /* optional string currency_code = 13; */
        if (message.currencyCode !== undefined)
            writer.tag(13, WireType.LengthDelimited).string(message.currencyCode);
        /* optional string order_id = 14; */
        if (message.orderId !== undefined)
            writer.tag(14, WireType.LengthDelimited).string(message.orderId);
        /* google.ads.googleads.v11.services.ExternalAttributionData external_attribution_data = 7; */
        if (message.externalAttributionData)
            ExternalAttributionData.internalBinaryWrite(message.externalAttributionData, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* repeated google.ads.googleads.v11.services.CustomVariable custom_variables = 15; */
        for (let i = 0; i < message.customVariables.length; i++)
            CustomVariable.internalBinaryWrite(message.customVariables[i], writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        /* google.ads.googleads.v11.services.CartData cart_data = 16; */
        if (message.cartData)
            CartData.internalBinaryWrite(message.cartData, writer.tag(16, WireType.LengthDelimited).fork(), options).join();
        /* repeated google.ads.googleads.v11.common.UserIdentifier user_identifiers = 17; */
        for (let i = 0; i < message.userIdentifiers.length; i++)
            UserIdentifier.internalBinaryWrite(message.userIdentifiers[i], writer.tag(17, WireType.LengthDelimited).fork(), options).join();
        /* google.ads.googleads.v11.enums.ConversionEnvironmentEnum.ConversionEnvironment conversion_environment = 20; */
        if (message.conversionEnvironment !== 0)
            writer.tag(20, WireType.Varint).int32(message.conversionEnvironment);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.services.ClickConversion
 */
export const ClickConversion = new ClickConversion$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CallConversion$Type extends MessageType<CallConversion> {
    constructor() {
        super("google.ads.googleads.v11.services.CallConversion", [
            { no: 7, name: "caller_id", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "call_start_date_time", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "conversion_action", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "conversion_date_time", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "conversion_value", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 12, name: "currency_code", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "custom_variables", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => CustomVariable }
        ]);
    }
    create(value?: PartialMessage<CallConversion>): CallConversion {
        const message = { customVariables: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CallConversion>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CallConversion): CallConversion {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string caller_id */ 7:
                    message.callerId = reader.string();
                    break;
                case /* optional string call_start_date_time */ 8:
                    message.callStartDateTime = reader.string();
                    break;
                case /* optional string conversion_action */ 9:
                    message.conversionAction = reader.string();
                    break;
                case /* optional string conversion_date_time */ 10:
                    message.conversionDateTime = reader.string();
                    break;
                case /* optional double conversion_value */ 11:
                    message.conversionValue = reader.double();
                    break;
                case /* optional string currency_code */ 12:
                    message.currencyCode = reader.string();
                    break;
                case /* repeated google.ads.googleads.v11.services.CustomVariable custom_variables */ 13:
                    message.customVariables.push(CustomVariable.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CallConversion, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string caller_id = 7; */
        if (message.callerId !== undefined)
            writer.tag(7, WireType.LengthDelimited).string(message.callerId);
        /* optional string call_start_date_time = 8; */
        if (message.callStartDateTime !== undefined)
            writer.tag(8, WireType.LengthDelimited).string(message.callStartDateTime);
        /* optional string conversion_action = 9; */
        if (message.conversionAction !== undefined)
            writer.tag(9, WireType.LengthDelimited).string(message.conversionAction);
        /* optional string conversion_date_time = 10; */
        if (message.conversionDateTime !== undefined)
            writer.tag(10, WireType.LengthDelimited).string(message.conversionDateTime);
        /* optional double conversion_value = 11; */
        if (message.conversionValue !== undefined)
            writer.tag(11, WireType.Bit64).double(message.conversionValue);
        /* optional string currency_code = 12; */
        if (message.currencyCode !== undefined)
            writer.tag(12, WireType.LengthDelimited).string(message.currencyCode);
        /* repeated google.ads.googleads.v11.services.CustomVariable custom_variables = 13; */
        for (let i = 0; i < message.customVariables.length; i++)
            CustomVariable.internalBinaryWrite(message.customVariables[i], writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.services.CallConversion
 */
export const CallConversion = new CallConversion$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExternalAttributionData$Type extends MessageType<ExternalAttributionData> {
    constructor() {
        super("google.ads.googleads.v11.services.ExternalAttributionData", [
            { no: 3, name: "external_attribution_credit", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 4, name: "external_attribution_model", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ExternalAttributionData>): ExternalAttributionData {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ExternalAttributionData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExternalAttributionData): ExternalAttributionData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional double external_attribution_credit */ 3:
                    message.externalAttributionCredit = reader.double();
                    break;
                case /* optional string external_attribution_model */ 4:
                    message.externalAttributionModel = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExternalAttributionData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional double external_attribution_credit = 3; */
        if (message.externalAttributionCredit !== undefined)
            writer.tag(3, WireType.Bit64).double(message.externalAttributionCredit);
        /* optional string external_attribution_model = 4; */
        if (message.externalAttributionModel !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.externalAttributionModel);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.services.ExternalAttributionData
 */
export const ExternalAttributionData = new ExternalAttributionData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ClickConversionResult$Type extends MessageType<ClickConversionResult> {
    constructor() {
        super("google.ads.googleads.v11.services.ClickConversionResult", [
            { no: 4, name: "gclid", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "gbraid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "wbraid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "conversion_action", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "conversion_date_time", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "user_identifiers", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => UserIdentifier }
        ]);
    }
    create(value?: PartialMessage<ClickConversionResult>): ClickConversionResult {
        const message = { gbraid: "", wbraid: "", userIdentifiers: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ClickConversionResult>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ClickConversionResult): ClickConversionResult {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string gclid */ 4:
                    message.gclid = reader.string();
                    break;
                case /* string gbraid */ 8:
                    message.gbraid = reader.string();
                    break;
                case /* string wbraid */ 9:
                    message.wbraid = reader.string();
                    break;
                case /* optional string conversion_action */ 5:
                    message.conversionAction = reader.string();
                    break;
                case /* optional string conversion_date_time */ 6:
                    message.conversionDateTime = reader.string();
                    break;
                case /* repeated google.ads.googleads.v11.common.UserIdentifier user_identifiers */ 7:
                    message.userIdentifiers.push(UserIdentifier.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ClickConversionResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string gclid = 4; */
        if (message.gclid !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.gclid);
        /* string gbraid = 8; */
        if (message.gbraid !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.gbraid);
        /* string wbraid = 9; */
        if (message.wbraid !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.wbraid);
        /* optional string conversion_action = 5; */
        if (message.conversionAction !== undefined)
            writer.tag(5, WireType.LengthDelimited).string(message.conversionAction);
        /* optional string conversion_date_time = 6; */
        if (message.conversionDateTime !== undefined)
            writer.tag(6, WireType.LengthDelimited).string(message.conversionDateTime);
        /* repeated google.ads.googleads.v11.common.UserIdentifier user_identifiers = 7; */
        for (let i = 0; i < message.userIdentifiers.length; i++)
            UserIdentifier.internalBinaryWrite(message.userIdentifiers[i], writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.services.ClickConversionResult
 */
export const ClickConversionResult = new ClickConversionResult$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CallConversionResult$Type extends MessageType<CallConversionResult> {
    constructor() {
        super("google.ads.googleads.v11.services.CallConversionResult", [
            { no: 5, name: "caller_id", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "call_start_date_time", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "conversion_action", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "conversion_date_time", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CallConversionResult>): CallConversionResult {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CallConversionResult>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CallConversionResult): CallConversionResult {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string caller_id */ 5:
                    message.callerId = reader.string();
                    break;
                case /* optional string call_start_date_time */ 6:
                    message.callStartDateTime = reader.string();
                    break;
                case /* optional string conversion_action */ 7:
                    message.conversionAction = reader.string();
                    break;
                case /* optional string conversion_date_time */ 8:
                    message.conversionDateTime = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CallConversionResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string caller_id = 5; */
        if (message.callerId !== undefined)
            writer.tag(5, WireType.LengthDelimited).string(message.callerId);
        /* optional string call_start_date_time = 6; */
        if (message.callStartDateTime !== undefined)
            writer.tag(6, WireType.LengthDelimited).string(message.callStartDateTime);
        /* optional string conversion_action = 7; */
        if (message.conversionAction !== undefined)
            writer.tag(7, WireType.LengthDelimited).string(message.conversionAction);
        /* optional string conversion_date_time = 8; */
        if (message.conversionDateTime !== undefined)
            writer.tag(8, WireType.LengthDelimited).string(message.conversionDateTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.services.CallConversionResult
 */
export const CallConversionResult = new CallConversionResult$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CustomVariable$Type extends MessageType<CustomVariable> {
    constructor() {
        super("google.ads.googleads.v11.services.CustomVariable", [
            { no: 1, name: "conversion_custom_variable", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "google.api.resource_reference": { type: "googleads.googleapis.com/ConversionCustomVariable" } } },
            { no: 2, name: "value", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CustomVariable>): CustomVariable {
        const message = { conversionCustomVariable: "", value: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CustomVariable>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CustomVariable): CustomVariable {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string conversion_custom_variable */ 1:
                    message.conversionCustomVariable = reader.string();
                    break;
                case /* string value */ 2:
                    message.value = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CustomVariable, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string conversion_custom_variable = 1; */
        if (message.conversionCustomVariable !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.conversionCustomVariable);
        /* string value = 2; */
        if (message.value !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.services.CustomVariable
 */
export const CustomVariable = new CustomVariable$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CartData$Type extends MessageType<CartData> {
    constructor() {
        super("google.ads.googleads.v11.services.CartData", [
            { no: 6, name: "merchant_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "feed_country_code", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "feed_language_code", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "local_transaction_cost", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 5, name: "items", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => CartData_Item }
        ]);
    }
    create(value?: PartialMessage<CartData>): CartData {
        const message = { merchantId: 0n, feedCountryCode: "", feedLanguageCode: "", localTransactionCost: 0, items: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CartData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CartData): CartData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 merchant_id */ 6:
                    message.merchantId = reader.int64().toBigInt();
                    break;
                case /* string feed_country_code */ 2:
                    message.feedCountryCode = reader.string();
                    break;
                case /* string feed_language_code */ 3:
                    message.feedLanguageCode = reader.string();
                    break;
                case /* double local_transaction_cost */ 4:
                    message.localTransactionCost = reader.double();
                    break;
                case /* repeated google.ads.googleads.v11.services.CartData.Item items */ 5:
                    message.items.push(CartData_Item.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CartData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 merchant_id = 6; */
        if (message.merchantId !== 0n)
            writer.tag(6, WireType.Varint).int64(message.merchantId);
        /* string feed_country_code = 2; */
        if (message.feedCountryCode !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.feedCountryCode);
        /* string feed_language_code = 3; */
        if (message.feedLanguageCode !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.feedLanguageCode);
        /* double local_transaction_cost = 4; */
        if (message.localTransactionCost !== 0)
            writer.tag(4, WireType.Bit64).double(message.localTransactionCost);
        /* repeated google.ads.googleads.v11.services.CartData.Item items = 5; */
        for (let i = 0; i < message.items.length; i++)
            CartData_Item.internalBinaryWrite(message.items[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.services.CartData
 */
export const CartData = new CartData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CartData_Item$Type extends MessageType<CartData_Item> {
    constructor() {
        super("google.ads.googleads.v11.services.CartData.Item", [
            { no: 1, name: "product_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "quantity", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "unit_price", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ }
        ]);
    }
    create(value?: PartialMessage<CartData_Item>): CartData_Item {
        const message = { productId: "", quantity: 0, unitPrice: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CartData_Item>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CartData_Item): CartData_Item {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string product_id */ 1:
                    message.productId = reader.string();
                    break;
                case /* int32 quantity */ 2:
                    message.quantity = reader.int32();
                    break;
                case /* double unit_price */ 3:
                    message.unitPrice = reader.double();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CartData_Item, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string product_id = 1; */
        if (message.productId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.productId);
        /* int32 quantity = 2; */
        if (message.quantity !== 0)
            writer.tag(2, WireType.Varint).int32(message.quantity);
        /* double unit_price = 3; */
        if (message.unitPrice !== 0)
            writer.tag(3, WireType.Bit64).double(message.unitPrice);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.services.CartData.Item
 */
export const CartData_Item = new CartData_Item$Type();
/**
 * @generated ServiceType for protobuf service google.ads.googleads.v11.services.ConversionUploadService
 */
export const ConversionUploadService = new ServiceType("google.ads.googleads.v11.services.ConversionUploadService", [
    { name: "UploadClickConversions", options: { "google.api.http": { post: "/v11/customers/{customer_id=*}:uploadClickConversions", body: "*" }, "google.api.method_signature": ["customer_id,conversions,partial_failure"] }, I: UploadClickConversionsRequest, O: UploadClickConversionsResponse },
    { name: "UploadCallConversions", options: { "google.api.http": { post: "/v11/customers/{customer_id=*}:uploadCallConversions", body: "*" }, "google.api.method_signature": ["customer_id,conversions,partial_failure"] }, I: UploadCallConversionsRequest, O: UploadCallConversionsResponse }
], { "google.api.default_host": "googleads.googleapis.com", "google.api.oauth_scopes": "https://www.googleapis.com/auth/adwords" });
