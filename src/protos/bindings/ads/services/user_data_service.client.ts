// @generated by protobuf-ts 2.8.1
// @generated from protobuf file "ads/services/user_data_service.proto" (package "google.ads.googleads.v11.services", syntax proto3)
// tslint:disable
//
// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { UserDataService } from "./user_data_service";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { UploadUserDataResponse } from "./user_data_service";
import type { UploadUserDataRequest } from "./user_data_service";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
// Proto file describing the UserDataService.

/**
 * Service to manage user data uploads.
 * Any uploads made to a Customer Match list through this service will be
 * eligible for matching as per the customer matching process. See
 * https://support.google.com/google-ads/answer/7474263. However, the uploads
 * made through this service will not be visible under the 'Segment members'
 * section for the Customer Match List in the Google Ads UI.
 *
 * @generated from protobuf service google.ads.googleads.v11.services.UserDataService
 */
export interface IUserDataServiceClient {
    /**
     * Uploads the given user data.
     *
     * List of thrown errors:
     *   [AuthenticationError]()
     *   [AuthorizationError]()
     *   [CollectionSizeError]()
     *   [FieldError]()
     *   [HeaderError]()
     *   [InternalError]()
     *   [MutateError]()
     *   [OfflineUserDataJobError]()
     *   [QuotaError]()
     *   [RequestError]()
     *   [UserDataError]()
     *
     * @generated from protobuf rpc: UploadUserData(google.ads.googleads.v11.services.UploadUserDataRequest) returns (google.ads.googleads.v11.services.UploadUserDataResponse);
     */
    uploadUserData(input: UploadUserDataRequest, options?: RpcOptions): UnaryCall<UploadUserDataRequest, UploadUserDataResponse>;
}
// Proto file describing the UserDataService.

/**
 * Service to manage user data uploads.
 * Any uploads made to a Customer Match list through this service will be
 * eligible for matching as per the customer matching process. See
 * https://support.google.com/google-ads/answer/7474263. However, the uploads
 * made through this service will not be visible under the 'Segment members'
 * section for the Customer Match List in the Google Ads UI.
 *
 * @generated from protobuf service google.ads.googleads.v11.services.UserDataService
 */
export class UserDataServiceClient implements IUserDataServiceClient, ServiceInfo {
    typeName = UserDataService.typeName;
    methods = UserDataService.methods;
    options = UserDataService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Uploads the given user data.
     *
     * List of thrown errors:
     *   [AuthenticationError]()
     *   [AuthorizationError]()
     *   [CollectionSizeError]()
     *   [FieldError]()
     *   [HeaderError]()
     *   [InternalError]()
     *   [MutateError]()
     *   [OfflineUserDataJobError]()
     *   [QuotaError]()
     *   [RequestError]()
     *   [UserDataError]()
     *
     * @generated from protobuf rpc: UploadUserData(google.ads.googleads.v11.services.UploadUserDataRequest) returns (google.ads.googleads.v11.services.UploadUserDataResponse);
     */
    uploadUserData(input: UploadUserDataRequest, options?: RpcOptions): UnaryCall<UploadUserDataRequest, UploadUserDataResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<UploadUserDataRequest, UploadUserDataResponse>("unary", this._transport, method, opt, input);
    }
}
