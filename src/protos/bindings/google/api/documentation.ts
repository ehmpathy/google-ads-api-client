// @generated by protobuf-ts 2.8.1
// @generated from protobuf file "google/api/documentation.proto" (package "google.api", syntax proto3)
// tslint:disable
//
// Copyright 2015 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * `Documentation` provides the information for describing a service.
 *
 * Example:
 * <pre><code>documentation:
 *   summary: >
 *     The Google Calendar API gives access
 *     to most calendar features.
 *   pages:
 *   - name: Overview
 *     content: &#40;== include google/foo/overview.md ==&#41;
 *   - name: Tutorial
 *     content: &#40;== include google/foo/tutorial.md ==&#41;
 *     subpages;
 *     - name: Java
 *       content: &#40;== include google/foo/tutorial_java.md ==&#41;
 *   rules:
 *   - selector: google.calendar.Calendar.Get
 *     description: >
 *       ...
 *   - selector: google.calendar.Calendar.Put
 *     description: >
 *       ...
 * </code></pre>
 * Documentation is provided in markdown syntax. In addition to
 * standard markdown features, definition lists, tables and fenced
 * code blocks are supported. Section headers can be provided and are
 * interpreted relative to the section nesting of the context where
 * a documentation fragment is embedded.
 *
 * Documentation from the IDL is merged with documentation defined
 * via the config at normalization time, where documentation provided
 * by config rules overrides IDL provided.
 *
 * A number of constructs specific to the API platform are supported
 * in documentation text.
 *
 * In order to reference a proto element, the following
 * notation can be used:
 * <pre><code>&#91;fully.qualified.proto.name]&#91;]</code></pre>
 * To override the display text used for the link, this can be used:
 * <pre><code>&#91;display text]&#91;fully.qualified.proto.name]</code></pre>
 * Text can be excluded from doc using the following notation:
 * <pre><code>&#40;-- internal comment --&#41;</code></pre>
 *
 * A few directives are available in documentation. Note that
 * directives must appear on a single line to be properly
 * identified. The `include` directive includes a markdown file from
 * an external source:
 * <pre><code>&#40;== include path/to/file ==&#41;</code></pre>
 * The `resource_for` directive marks a message to be the resource of
 * a collection in REST view. If it is not specified, tools attempt
 * to infer the resource from the operations in a collection:
 * <pre><code>&#40;== resource_for v1.shelves.books ==&#41;</code></pre>
 * The directive `suppress_warning` does not directly affect documentation
 * and is documented together with service config validation.
 *
 * @generated from protobuf message google.api.Documentation
 */
export interface Documentation {
    /**
     * A short summary of what the service does. Can only be provided by
     * plain text.
     *
     * @generated from protobuf field: string summary = 1;
     */
    summary: string;
    /**
     * The top level pages for the documentation set.
     *
     * @generated from protobuf field: repeated google.api.Page pages = 5;
     */
    pages: Page[];
    /**
     * A list of documentation rules that apply to individual API elements.
     *
     * **NOTE:** All service configuration rules follow "last one wins" order.
     *
     * @generated from protobuf field: repeated google.api.DocumentationRule rules = 3;
     */
    rules: DocumentationRule[];
    /**
     * The URL to the root of documentation.
     *
     * @generated from protobuf field: string documentation_root_url = 4;
     */
    documentationRootUrl: string;
    /**
     * Specifies the service root url if the default one (the service name
     * from the yaml file) is not suitable. This can be seen in any fully
     * specified service urls as well as sections that show a base that other
     * urls are relative to.
     *
     * @generated from protobuf field: string service_root_url = 6;
     */
    serviceRootUrl: string;
    /**
     * Declares a single overview page. For example:
     * <pre><code>documentation:
     *   summary: ...
     *   overview: &#40;== include overview.md ==&#41;
     * </code></pre>
     * This is a shortcut for the following declaration (using pages style):
     * <pre><code>documentation:
     *   summary: ...
     *   pages:
     *   - name: Overview
     *     content: &#40;== include overview.md ==&#41;
     * </code></pre>
     * Note: you cannot specify both `overview` field and `pages` field.
     *
     * @generated from protobuf field: string overview = 2;
     */
    overview: string;
}
/**
 * A documentation rule provides information about individual API elements.
 *
 * @generated from protobuf message google.api.DocumentationRule
 */
export interface DocumentationRule {
    /**
     * The selector is a comma-separated list of patterns. Each pattern is a
     * qualified name of the element which may end in "*", indicating a wildcard.
     * Wildcards are only allowed at the end and for a whole component of the
     * qualified name, i.e. "foo.*" is ok, but not "foo.b*" or "foo.*.bar". A
     * wildcard will match one or more components. To specify a default for all
     * applicable elements, the whole pattern "*" is used.
     *
     * @generated from protobuf field: string selector = 1;
     */
    selector: string;
    /**
     * Description of the selected API(s).
     *
     * @generated from protobuf field: string description = 2;
     */
    description: string;
    /**
     * Deprecation description of the selected element(s). It can be provided if
     * an element is marked as `deprecated`.
     *
     * @generated from protobuf field: string deprecation_description = 3;
     */
    deprecationDescription: string;
}
/**
 * Represents a documentation page. A page can contain subpages to represent
 * nested documentation set structure.
 *
 * @generated from protobuf message google.api.Page
 */
export interface Page {
    /**
     * The name of the page. It will be used as an identity of the page to
     * generate URI of the page, text of the link to this page in navigation,
     * etc. The full page name (start from the root page name to this page
     * concatenated with `.`) can be used as reference to the page in your
     * documentation. For example:
     * <pre><code>pages:
     * - name: Tutorial
     *   content: &#40;== include tutorial.md ==&#41;
     *   subpages:
     *   - name: Java
     *     content: &#40;== include tutorial_java.md ==&#41;
     * </code></pre>
     * You can reference `Java` page using Markdown reference link syntax:
     * `[Java][Tutorial.Java]`.
     *
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * The Markdown content of the page. You can use <code>&#40;== include {path}
     * ==&#41;</code> to include content from a Markdown file.
     *
     * @generated from protobuf field: string content = 2;
     */
    content: string;
    /**
     * Subpages of this page. The order of subpages specified here will be
     * honored in the generated docset.
     *
     * @generated from protobuf field: repeated google.api.Page subpages = 3;
     */
    subpages: Page[];
}
// @generated message type with reflection information, may provide speed optimized methods
class Documentation$Type extends MessageType<Documentation> {
    constructor() {
        super("google.api.Documentation", [
            { no: 1, name: "summary", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "pages", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Page },
            { no: 3, name: "rules", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => DocumentationRule },
            { no: 4, name: "documentation_root_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "service_root_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "overview", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Documentation>): Documentation {
        const message = { summary: "", pages: [], rules: [], documentationRootUrl: "", serviceRootUrl: "", overview: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Documentation>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Documentation): Documentation {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string summary */ 1:
                    message.summary = reader.string();
                    break;
                case /* repeated google.api.Page pages */ 5:
                    message.pages.push(Page.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated google.api.DocumentationRule rules */ 3:
                    message.rules.push(DocumentationRule.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string documentation_root_url */ 4:
                    message.documentationRootUrl = reader.string();
                    break;
                case /* string service_root_url */ 6:
                    message.serviceRootUrl = reader.string();
                    break;
                case /* string overview */ 2:
                    message.overview = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Documentation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string summary = 1; */
        if (message.summary !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.summary);
        /* repeated google.api.Page pages = 5; */
        for (let i = 0; i < message.pages.length; i++)
            Page.internalBinaryWrite(message.pages[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* repeated google.api.DocumentationRule rules = 3; */
        for (let i = 0; i < message.rules.length; i++)
            DocumentationRule.internalBinaryWrite(message.rules[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* string documentation_root_url = 4; */
        if (message.documentationRootUrl !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.documentationRootUrl);
        /* string service_root_url = 6; */
        if (message.serviceRootUrl !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.serviceRootUrl);
        /* string overview = 2; */
        if (message.overview !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.overview);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.Documentation
 */
export const Documentation = new Documentation$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DocumentationRule$Type extends MessageType<DocumentationRule> {
    constructor() {
        super("google.api.DocumentationRule", [
            { no: 1, name: "selector", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "deprecation_description", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DocumentationRule>): DocumentationRule {
        const message = { selector: "", description: "", deprecationDescription: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DocumentationRule>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DocumentationRule): DocumentationRule {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string selector */ 1:
                    message.selector = reader.string();
                    break;
                case /* string description */ 2:
                    message.description = reader.string();
                    break;
                case /* string deprecation_description */ 3:
                    message.deprecationDescription = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DocumentationRule, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string selector = 1; */
        if (message.selector !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.selector);
        /* string description = 2; */
        if (message.description !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.description);
        /* string deprecation_description = 3; */
        if (message.deprecationDescription !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.deprecationDescription);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.DocumentationRule
 */
export const DocumentationRule = new DocumentationRule$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Page$Type extends MessageType<Page> {
    constructor() {
        super("google.api.Page", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "subpages", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Page }
        ]);
    }
    create(value?: PartialMessage<Page>): Page {
        const message = { name: "", content: "", subpages: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Page>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Page): Page {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string content */ 2:
                    message.content = reader.string();
                    break;
                case /* repeated google.api.Page subpages */ 3:
                    message.subpages.push(Page.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Page, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string content = 2; */
        if (message.content !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.content);
        /* repeated google.api.Page subpages = 3; */
        for (let i = 0; i < message.subpages.length; i++)
            Page.internalBinaryWrite(message.subpages[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.Page
 */
export const Page = new Page$Type();
