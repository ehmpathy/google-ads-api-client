// @generated by protobuf-ts 2.8.1
// @generated from protobuf file "google/api/label.proto" (package "google.api", syntax proto3)
// tslint:disable
//
// Copyright 2015 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * A description of a label.
 *
 * @generated from protobuf message google.api.LabelDescriptor
 */
export interface LabelDescriptor {
    /**
     * The label key.
     *
     * @generated from protobuf field: string key = 1;
     */
    key: string;
    /**
     * The type of data that can be assigned to the label.
     *
     * @generated from protobuf field: google.api.LabelDescriptor.ValueType value_type = 2;
     */
    valueType: LabelDescriptor_ValueType;
    /**
     * A human-readable description for the label.
     *
     * @generated from protobuf field: string description = 3;
     */
    description: string;
}
/**
 * Value types that can be used as label values.
 *
 * @generated from protobuf enum google.api.LabelDescriptor.ValueType
 */
export enum LabelDescriptor_ValueType {
    /**
     * A variable-length string. This is the default.
     *
     * @generated from protobuf enum value: STRING = 0;
     */
    STRING = 0,
    /**
     * Boolean; true or false.
     *
     * @generated from protobuf enum value: BOOL = 1;
     */
    BOOL = 1,
    /**
     * A 64-bit signed integer.
     *
     * @generated from protobuf enum value: INT64 = 2;
     */
    INT64 = 2
}
// @generated message type with reflection information, may provide speed optimized methods
class LabelDescriptor$Type extends MessageType<LabelDescriptor> {
    constructor() {
        super("google.api.LabelDescriptor", [
            { no: 1, name: "key", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "value_type", kind: "enum", T: () => ["google.api.LabelDescriptor.ValueType", LabelDescriptor_ValueType] },
            { no: 3, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LabelDescriptor>): LabelDescriptor {
        const message = { key: "", valueType: 0, description: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LabelDescriptor>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LabelDescriptor): LabelDescriptor {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string key */ 1:
                    message.key = reader.string();
                    break;
                case /* google.api.LabelDescriptor.ValueType value_type */ 2:
                    message.valueType = reader.int32();
                    break;
                case /* string description */ 3:
                    message.description = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LabelDescriptor, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string key = 1; */
        if (message.key !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.key);
        /* google.api.LabelDescriptor.ValueType value_type = 2; */
        if (message.valueType !== 0)
            writer.tag(2, WireType.Varint).int32(message.valueType);
        /* string description = 3; */
        if (message.description !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.description);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.LabelDescriptor
 */
export const LabelDescriptor = new LabelDescriptor$Type();
