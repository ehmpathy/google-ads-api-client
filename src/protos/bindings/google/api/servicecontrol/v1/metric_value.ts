// @generated by protobuf-ts 2.8.1
// @generated from protobuf file "google/api/servicecontrol/v1/metric_value.proto" (package "google.api.servicecontrol.v1", syntax proto3)
// tslint:disable
//
// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Distribution } from "./distribution";
import { Timestamp } from "../../../protobuf/timestamp";
/**
 * Represents a single metric value.
 *
 * @generated from protobuf message google.api.servicecontrol.v1.MetricValue
 */
export interface MetricValue {
    /**
     * The labels describing the metric value.
     * See comments on [google.api.servicecontrol.v1.Operation.labels][google.api.servicecontrol.v1.Operation.labels] for
     * the overriding relationship.
     * Note that this map must not contain monitored resource labels.
     *
     * @generated from protobuf field: map<string, string> labels = 1;
     */
    labels: {
        [key: string]: string;
    };
    /**
     * The start of the time period over which this metric value's measurement
     * applies. The time period has different semantics for different metric
     * types (cumulative, delta, and gauge). See the metric definition
     * documentation in the service configuration for details. If not specified,
     * [google.api.servicecontrol.v1.Operation.start_time][google.api.servicecontrol.v1.Operation.start_time] will be used.
     *
     * @generated from protobuf field: google.protobuf.Timestamp start_time = 2;
     */
    startTime?: Timestamp;
    /**
     * The end of the time period over which this metric value's measurement
     * applies.  If not specified,
     * [google.api.servicecontrol.v1.Operation.end_time][google.api.servicecontrol.v1.Operation.end_time] will be used.
     *
     * @generated from protobuf field: google.protobuf.Timestamp end_time = 3;
     */
    endTime?: Timestamp;
    /**
     * @generated from protobuf oneof: value
     */
    value: {
        oneofKind: "boolValue";
        /**
         * A boolean value.
         *
         * @generated from protobuf field: bool bool_value = 4;
         */
        boolValue: boolean;
    } | {
        oneofKind: "int64Value";
        /**
         * A signed 64-bit integer value.
         *
         * @generated from protobuf field: int64 int64_value = 5;
         */
        int64Value: bigint;
    } | {
        oneofKind: "doubleValue";
        /**
         * A double precision floating point value.
         *
         * @generated from protobuf field: double double_value = 6;
         */
        doubleValue: number;
    } | {
        oneofKind: "stringValue";
        /**
         * A text string value.
         *
         * @generated from protobuf field: string string_value = 7;
         */
        stringValue: string;
    } | {
        oneofKind: "distributionValue";
        /**
         * A distribution value.
         *
         * @generated from protobuf field: google.api.servicecontrol.v1.Distribution distribution_value = 8;
         */
        distributionValue: Distribution;
    } | {
        oneofKind: undefined;
    };
}
/**
 * Represents a set of metric values in the same metric.
 * Each metric value in the set should have a unique combination of start time,
 * end time, and label values.
 *
 * @generated from protobuf message google.api.servicecontrol.v1.MetricValueSet
 */
export interface MetricValueSet {
    /**
     * The metric name defined in the service configuration.
     *
     * @generated from protobuf field: string metric_name = 1;
     */
    metricName: string;
    /**
     * The values in this metric.
     *
     * @generated from protobuf field: repeated google.api.servicecontrol.v1.MetricValue metric_values = 2;
     */
    metricValues: MetricValue[];
}
// @generated message type with reflection information, may provide speed optimized methods
class MetricValue$Type extends MessageType<MetricValue> {
    constructor() {
        super("google.api.servicecontrol.v1.MetricValue", [
            { no: 1, name: "labels", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } },
            { no: 2, name: "start_time", kind: "message", T: () => Timestamp },
            { no: 3, name: "end_time", kind: "message", T: () => Timestamp },
            { no: 4, name: "bool_value", kind: "scalar", oneof: "value", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "int64_value", kind: "scalar", oneof: "value", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "double_value", kind: "scalar", oneof: "value", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 7, name: "string_value", kind: "scalar", oneof: "value", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "distribution_value", kind: "message", oneof: "value", T: () => Distribution }
        ]);
    }
    create(value?: PartialMessage<MetricValue>): MetricValue {
        const message = { labels: {}, value: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MetricValue>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MetricValue): MetricValue {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<string, string> labels */ 1:
                    this.binaryReadMap1(message.labels, reader, options);
                    break;
                case /* google.protobuf.Timestamp start_time */ 2:
                    message.startTime = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.startTime);
                    break;
                case /* google.protobuf.Timestamp end_time */ 3:
                    message.endTime = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.endTime);
                    break;
                case /* bool bool_value */ 4:
                    message.value = {
                        oneofKind: "boolValue",
                        boolValue: reader.bool()
                    };
                    break;
                case /* int64 int64_value */ 5:
                    message.value = {
                        oneofKind: "int64Value",
                        int64Value: reader.int64().toBigInt()
                    };
                    break;
                case /* double double_value */ 6:
                    message.value = {
                        oneofKind: "doubleValue",
                        doubleValue: reader.double()
                    };
                    break;
                case /* string string_value */ 7:
                    message.value = {
                        oneofKind: "stringValue",
                        stringValue: reader.string()
                    };
                    break;
                case /* google.api.servicecontrol.v1.Distribution distribution_value */ 8:
                    message.value = {
                        oneofKind: "distributionValue",
                        distributionValue: Distribution.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).distributionValue)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap1(map: MetricValue["labels"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof MetricValue["labels"] | undefined, val: MetricValue["labels"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field google.api.servicecontrol.v1.MetricValue.labels");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message: MetricValue, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<string, string> labels = 1; */
        for (let k of Object.keys(message.labels))
            writer.tag(1, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.labels[k]).join();
        /* google.protobuf.Timestamp start_time = 2; */
        if (message.startTime)
            Timestamp.internalBinaryWrite(message.startTime, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp end_time = 3; */
        if (message.endTime)
            Timestamp.internalBinaryWrite(message.endTime, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* bool bool_value = 4; */
        if (message.value.oneofKind === "boolValue")
            writer.tag(4, WireType.Varint).bool(message.value.boolValue);
        /* int64 int64_value = 5; */
        if (message.value.oneofKind === "int64Value")
            writer.tag(5, WireType.Varint).int64(message.value.int64Value);
        /* double double_value = 6; */
        if (message.value.oneofKind === "doubleValue")
            writer.tag(6, WireType.Bit64).double(message.value.doubleValue);
        /* string string_value = 7; */
        if (message.value.oneofKind === "stringValue")
            writer.tag(7, WireType.LengthDelimited).string(message.value.stringValue);
        /* google.api.servicecontrol.v1.Distribution distribution_value = 8; */
        if (message.value.oneofKind === "distributionValue")
            Distribution.internalBinaryWrite(message.value.distributionValue, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.servicecontrol.v1.MetricValue
 */
export const MetricValue = new MetricValue$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MetricValueSet$Type extends MessageType<MetricValueSet> {
    constructor() {
        super("google.api.servicecontrol.v1.MetricValueSet", [
            { no: 1, name: "metric_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "metric_values", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MetricValue }
        ]);
    }
    create(value?: PartialMessage<MetricValueSet>): MetricValueSet {
        const message = { metricName: "", metricValues: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MetricValueSet>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MetricValueSet): MetricValueSet {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string metric_name */ 1:
                    message.metricName = reader.string();
                    break;
                case /* repeated google.api.servicecontrol.v1.MetricValue metric_values */ 2:
                    message.metricValues.push(MetricValue.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MetricValueSet, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string metric_name = 1; */
        if (message.metricName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.metricName);
        /* repeated google.api.servicecontrol.v1.MetricValue metric_values = 2; */
        for (let i = 0; i < message.metricValues.length; i++)
            MetricValue.internalBinaryWrite(message.metricValues[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.servicecontrol.v1.MetricValueSet
 */
export const MetricValueSet = new MetricValueSet$Type();
