// @generated by protobuf-ts 2.8.1
// @generated from protobuf file "google/api/servicecontrol/v1/check_error.proto" (package "google.api.servicecontrol.v1", syntax proto3)
// tslint:disable
//
// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Status } from "../../../rpc/status";
/**
 * Defines the errors to be returned in
 * [google.api.servicecontrol.v1.CheckResponse.check_errors][google.api.servicecontrol.v1.CheckResponse.check_errors].
 *
 * @generated from protobuf message google.api.servicecontrol.v1.CheckError
 */
export interface CheckError {
    /**
     * The error code.
     *
     * @generated from protobuf field: google.api.servicecontrol.v1.CheckError.Code code = 1;
     */
    code: CheckError_Code;
    /**
     * Subject to whom this error applies. See the specific code enum for more
     * details on this field. For example:
     *
     * - "project:<project-id or project-number>"
     * - "folder:<folder-id>"
     * - "organization:<organization-id>"
     *
     * @generated from protobuf field: string subject = 4;
     */
    subject: string;
    /**
     * Free-form text providing details on the error cause of the error.
     *
     * @generated from protobuf field: string detail = 2;
     */
    detail: string;
    /**
     * Contains public information about the check error. If available,
     * `status.code` will be non zero and client can propagate it out as public
     * error.
     *
     * @generated from protobuf field: google.rpc.Status status = 3;
     */
    status?: Status;
}
/**
 * Error codes for Check responses.
 *
 * @generated from protobuf enum google.api.servicecontrol.v1.CheckError.Code
 */
export enum CheckError_Code {
    /**
     * This is never used in `CheckResponse`.
     *
     * @generated from protobuf enum value: ERROR_CODE_UNSPECIFIED = 0;
     */
    ERROR_CODE_UNSPECIFIED = 0,
    /**
     * The consumer's project id, network container, or resource container was
     * not found. Same as [google.rpc.Code.NOT_FOUND][google.rpc.Code.NOT_FOUND].
     *
     * @generated from protobuf enum value: NOT_FOUND = 5;
     */
    NOT_FOUND = 5,
    /**
     * The consumer doesn't have access to the specified resource.
     * Same as [google.rpc.Code.PERMISSION_DENIED][google.rpc.Code.PERMISSION_DENIED].
     *
     * @generated from protobuf enum value: PERMISSION_DENIED = 7;
     */
    PERMISSION_DENIED = 7,
    /**
     * Quota check failed. Same as [google.rpc.Code.RESOURCE_EXHAUSTED][google.rpc.Code.RESOURCE_EXHAUSTED].
     *
     * @generated from protobuf enum value: RESOURCE_EXHAUSTED = 8;
     */
    RESOURCE_EXHAUSTED = 8,
    /**
     * The consumer hasn't activated the service.
     *
     * @generated from protobuf enum value: SERVICE_NOT_ACTIVATED = 104;
     */
    SERVICE_NOT_ACTIVATED = 104,
    /**
     * The consumer cannot access the service because billing is disabled.
     *
     * @generated from protobuf enum value: BILLING_DISABLED = 107;
     */
    BILLING_DISABLED = 107,
    /**
     * The consumer's project has been marked as deleted (soft deletion).
     *
     * @generated from protobuf enum value: PROJECT_DELETED = 108;
     */
    PROJECT_DELETED = 108,
    /**
     * The consumer's project number or id does not represent a valid project.
     *
     * @generated from protobuf enum value: PROJECT_INVALID = 114;
     */
    PROJECT_INVALID = 114,
    /**
     * The input consumer info does not represent a valid consumer folder or
     * organization.
     *
     * @generated from protobuf enum value: CONSUMER_INVALID = 125;
     */
    CONSUMER_INVALID = 125,
    /**
     * The IP address of the consumer is invalid for the specific consumer
     * project.
     *
     * @generated from protobuf enum value: IP_ADDRESS_BLOCKED = 109;
     */
    IP_ADDRESS_BLOCKED = 109,
    /**
     * The referer address of the consumer request is invalid for the specific
     * consumer project.
     *
     * @generated from protobuf enum value: REFERER_BLOCKED = 110;
     */
    REFERER_BLOCKED = 110,
    /**
     * The client application of the consumer request is invalid for the
     * specific consumer project.
     *
     * @generated from protobuf enum value: CLIENT_APP_BLOCKED = 111;
     */
    CLIENT_APP_BLOCKED = 111,
    /**
     * The API targeted by this request is invalid for the specified consumer
     * project.
     *
     * @generated from protobuf enum value: API_TARGET_BLOCKED = 122;
     */
    API_TARGET_BLOCKED = 122,
    /**
     * The consumer's API key is invalid.
     *
     * @generated from protobuf enum value: API_KEY_INVALID = 105;
     */
    API_KEY_INVALID = 105,
    /**
     * The consumer's API Key has expired.
     *
     * @generated from protobuf enum value: API_KEY_EXPIRED = 112;
     */
    API_KEY_EXPIRED = 112,
    /**
     * The consumer's API Key was not found in config record.
     *
     * @generated from protobuf enum value: API_KEY_NOT_FOUND = 113;
     */
    API_KEY_NOT_FOUND = 113,
    /**
     * The credential in the request can not be verified.
     *
     * @generated from protobuf enum value: INVALID_CREDENTIAL = 123;
     */
    INVALID_CREDENTIAL = 123,
    /**
     * The backend server for looking up project id/number is unavailable.
     *
     * @generated from protobuf enum value: NAMESPACE_LOOKUP_UNAVAILABLE = 300;
     */
    NAMESPACE_LOOKUP_UNAVAILABLE = 300,
    /**
     * The backend server for checking service status is unavailable.
     *
     * @generated from protobuf enum value: SERVICE_STATUS_UNAVAILABLE = 301;
     */
    SERVICE_STATUS_UNAVAILABLE = 301,
    /**
     * The backend server for checking billing status is unavailable.
     *
     * @generated from protobuf enum value: BILLING_STATUS_UNAVAILABLE = 302;
     */
    BILLING_STATUS_UNAVAILABLE = 302,
    /**
     * Cloud Resource Manager backend server is unavailable.
     *
     * @generated from protobuf enum value: CLOUD_RESOURCE_MANAGER_BACKEND_UNAVAILABLE = 305;
     */
    CLOUD_RESOURCE_MANAGER_BACKEND_UNAVAILABLE = 305
}
// @generated message type with reflection information, may provide speed optimized methods
class CheckError$Type extends MessageType<CheckError> {
    constructor() {
        super("google.api.servicecontrol.v1.CheckError", [
            { no: 1, name: "code", kind: "enum", T: () => ["google.api.servicecontrol.v1.CheckError.Code", CheckError_Code] },
            { no: 4, name: "subject", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "detail", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "status", kind: "message", T: () => Status }
        ]);
    }
    create(value?: PartialMessage<CheckError>): CheckError {
        const message = { code: 0, subject: "", detail: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CheckError>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CheckError): CheckError {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.api.servicecontrol.v1.CheckError.Code code */ 1:
                    message.code = reader.int32();
                    break;
                case /* string subject */ 4:
                    message.subject = reader.string();
                    break;
                case /* string detail */ 2:
                    message.detail = reader.string();
                    break;
                case /* google.rpc.Status status */ 3:
                    message.status = Status.internalBinaryRead(reader, reader.uint32(), options, message.status);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CheckError, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.api.servicecontrol.v1.CheckError.Code code = 1; */
        if (message.code !== 0)
            writer.tag(1, WireType.Varint).int32(message.code);
        /* string subject = 4; */
        if (message.subject !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.subject);
        /* string detail = 2; */
        if (message.detail !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.detail);
        /* google.rpc.Status status = 3; */
        if (message.status)
            Status.internalBinaryWrite(message.status, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.servicecontrol.v1.CheckError
 */
export const CheckError = new CheckError$Type();
