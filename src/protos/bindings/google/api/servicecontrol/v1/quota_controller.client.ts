// @generated by protobuf-ts 2.8.1
// @generated from protobuf file "google/api/servicecontrol/v1/quota_controller.proto" (package "google.api.servicecontrol.v1", syntax proto3)
// tslint:disable
//
// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { QuotaController } from "./quota_controller";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { AllocateQuotaResponse } from "./quota_controller";
import type { AllocateQuotaRequest } from "./quota_controller";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * [Google Quota Control API](/service-control/overview)
 *
 * Allows clients to allocate and release quota against a [managed
 * service](https://cloud.google.com/service-management/reference/rpc/google.api/servicemanagement.v1#google.api.servicemanagement.v1.ManagedService).
 *
 * @generated from protobuf service google.api.servicecontrol.v1.QuotaController
 */
export interface IQuotaControllerClient {
    /**
     * Attempts to allocate quota for the specified consumer. It should be called
     * before the operation is executed.
     *
     * This method requires the `servicemanagement.services.quota`
     * permission on the specified service. For more information, see
     * [Cloud IAM](https://cloud.google.com/iam).
     *
     * **NOTE:** The client **must** fail-open on server errors `INTERNAL`,
     * `UNKNOWN`, `DEADLINE_EXCEEDED`, and `UNAVAILABLE`. To ensure system
     * reliability, the server may inject these errors to prohibit any hard
     * dependency on the quota functionality.
     *
     * @generated from protobuf rpc: AllocateQuota(google.api.servicecontrol.v1.AllocateQuotaRequest) returns (google.api.servicecontrol.v1.AllocateQuotaResponse);
     */
    allocateQuota(input: AllocateQuotaRequest, options?: RpcOptions): UnaryCall<AllocateQuotaRequest, AllocateQuotaResponse>;
}
/**
 * [Google Quota Control API](/service-control/overview)
 *
 * Allows clients to allocate and release quota against a [managed
 * service](https://cloud.google.com/service-management/reference/rpc/google.api/servicemanagement.v1#google.api.servicemanagement.v1.ManagedService).
 *
 * @generated from protobuf service google.api.servicecontrol.v1.QuotaController
 */
export class QuotaControllerClient implements IQuotaControllerClient, ServiceInfo {
    typeName = QuotaController.typeName;
    methods = QuotaController.methods;
    options = QuotaController.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Attempts to allocate quota for the specified consumer. It should be called
     * before the operation is executed.
     *
     * This method requires the `servicemanagement.services.quota`
     * permission on the specified service. For more information, see
     * [Cloud IAM](https://cloud.google.com/iam).
     *
     * **NOTE:** The client **must** fail-open on server errors `INTERNAL`,
     * `UNKNOWN`, `DEADLINE_EXCEEDED`, and `UNAVAILABLE`. To ensure system
     * reliability, the server may inject these errors to prohibit any hard
     * dependency on the quota functionality.
     *
     * @generated from protobuf rpc: AllocateQuota(google.api.servicecontrol.v1.AllocateQuotaRequest) returns (google.api.servicecontrol.v1.AllocateQuotaResponse);
     */
    allocateQuota(input: AllocateQuotaRequest, options?: RpcOptions): UnaryCall<AllocateQuotaRequest, AllocateQuotaResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<AllocateQuotaRequest, AllocateQuotaResponse>("unary", this._transport, method, opt, input);
    }
}
