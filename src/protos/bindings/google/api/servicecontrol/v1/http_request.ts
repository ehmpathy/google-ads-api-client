// @generated by protobuf-ts 2.8.1
// @generated from protobuf file "google/api/servicecontrol/v1/http_request.proto" (package "google.api.servicecontrol.v1", syntax proto3)
// tslint:disable
//
// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Duration } from "../../../protobuf/duration";
/**
 * A common proto for logging HTTP requests. Only contains semantics
 * defined by the HTTP specification. Product-specific logging
 * information MUST be defined in a separate message.
 *
 * @generated from protobuf message google.api.servicecontrol.v1.HttpRequest
 */
export interface HttpRequest {
    /**
     * The request method. Examples: `"GET"`, `"HEAD"`, `"PUT"`, `"POST"`.
     *
     * @generated from protobuf field: string request_method = 1;
     */
    requestMethod: string;
    /**
     * The scheme (http, https), the host name, the path, and the query
     * portion of the URL that was requested.
     * Example: `"http://example.com/some/info?color=red"`.
     *
     * @generated from protobuf field: string request_url = 2;
     */
    requestUrl: string;
    /**
     * The size of the HTTP request message in bytes, including the request
     * headers and the request body.
     *
     * @generated from protobuf field: int64 request_size = 3;
     */
    requestSize: bigint;
    /**
     * The response code indicating the status of the response.
     * Examples: 200, 404.
     *
     * @generated from protobuf field: int32 status = 4;
     */
    status: number;
    /**
     * The size of the HTTP response message sent back to the client, in bytes,
     * including the response headers and the response body.
     *
     * @generated from protobuf field: int64 response_size = 5;
     */
    responseSize: bigint;
    /**
     * The user agent sent by the client. Example:
     * `"Mozilla/4.0 (compatible; MSIE 6.0; Windows 98; Q312461; .NET
     * CLR 1.0.3705)"`.
     *
     * @generated from protobuf field: string user_agent = 6;
     */
    userAgent: string;
    /**
     * The IP address (IPv4 or IPv6) of the client that issued the HTTP
     * request. Examples: `"192.168.1.1"`, `"FE80::0202:B3FF:FE1E:8329"`.
     *
     * @generated from protobuf field: string remote_ip = 7;
     */
    remoteIp: string;
    /**
     * The IP address (IPv4 or IPv6) of the origin server that the request was
     * sent to.
     *
     * @generated from protobuf field: string server_ip = 13;
     */
    serverIp: string;
    /**
     * The referer URL of the request, as defined in
     * [HTTP/1.1 Header Field
     * Definitions](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html).
     *
     * @generated from protobuf field: string referer = 8;
     */
    referer: string;
    /**
     * The request processing latency on the server, from the time the request was
     * received until the response was sent.
     *
     * @generated from protobuf field: google.protobuf.Duration latency = 14;
     */
    latency?: Duration;
    /**
     * Whether or not a cache lookup was attempted.
     *
     * @generated from protobuf field: bool cache_lookup = 11;
     */
    cacheLookup: boolean;
    /**
     * Whether or not an entity was served from cache
     * (with or without validation).
     *
     * @generated from protobuf field: bool cache_hit = 9;
     */
    cacheHit: boolean;
    /**
     * Whether or not the response was validated with the origin server before
     * being served from cache. This field is only meaningful if `cache_hit` is
     * True.
     *
     * @generated from protobuf field: bool cache_validated_with_origin_server = 10;
     */
    cacheValidatedWithOriginServer: boolean;
    /**
     * The number of HTTP response bytes inserted into cache. Set only when a
     * cache fill was attempted.
     *
     * @generated from protobuf field: int64 cache_fill_bytes = 12;
     */
    cacheFillBytes: bigint;
    /**
     * Protocol used for the request. Examples: "HTTP/1.1", "HTTP/2", "websocket"
     *
     * @generated from protobuf field: string protocol = 15;
     */
    protocol: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class HttpRequest$Type extends MessageType<HttpRequest> {
    constructor() {
        super("google.api.servicecontrol.v1.HttpRequest", [
            { no: 1, name: "request_method", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "request_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "request_size", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "response_size", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "user_agent", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "remote_ip", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "server_ip", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "referer", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 14, name: "latency", kind: "message", T: () => Duration },
            { no: 11, name: "cache_lookup", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "cache_hit", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "cache_validated_with_origin_server", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 12, name: "cache_fill_bytes", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 15, name: "protocol", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<HttpRequest>): HttpRequest {
        const message = { requestMethod: "", requestUrl: "", requestSize: 0n, status: 0, responseSize: 0n, userAgent: "", remoteIp: "", serverIp: "", referer: "", cacheLookup: false, cacheHit: false, cacheValidatedWithOriginServer: false, cacheFillBytes: 0n, protocol: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HttpRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HttpRequest): HttpRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string request_method */ 1:
                    message.requestMethod = reader.string();
                    break;
                case /* string request_url */ 2:
                    message.requestUrl = reader.string();
                    break;
                case /* int64 request_size */ 3:
                    message.requestSize = reader.int64().toBigInt();
                    break;
                case /* int32 status */ 4:
                    message.status = reader.int32();
                    break;
                case /* int64 response_size */ 5:
                    message.responseSize = reader.int64().toBigInt();
                    break;
                case /* string user_agent */ 6:
                    message.userAgent = reader.string();
                    break;
                case /* string remote_ip */ 7:
                    message.remoteIp = reader.string();
                    break;
                case /* string server_ip */ 13:
                    message.serverIp = reader.string();
                    break;
                case /* string referer */ 8:
                    message.referer = reader.string();
                    break;
                case /* google.protobuf.Duration latency */ 14:
                    message.latency = Duration.internalBinaryRead(reader, reader.uint32(), options, message.latency);
                    break;
                case /* bool cache_lookup */ 11:
                    message.cacheLookup = reader.bool();
                    break;
                case /* bool cache_hit */ 9:
                    message.cacheHit = reader.bool();
                    break;
                case /* bool cache_validated_with_origin_server */ 10:
                    message.cacheValidatedWithOriginServer = reader.bool();
                    break;
                case /* int64 cache_fill_bytes */ 12:
                    message.cacheFillBytes = reader.int64().toBigInt();
                    break;
                case /* string protocol */ 15:
                    message.protocol = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HttpRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string request_method = 1; */
        if (message.requestMethod !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.requestMethod);
        /* string request_url = 2; */
        if (message.requestUrl !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.requestUrl);
        /* int64 request_size = 3; */
        if (message.requestSize !== 0n)
            writer.tag(3, WireType.Varint).int64(message.requestSize);
        /* int32 status = 4; */
        if (message.status !== 0)
            writer.tag(4, WireType.Varint).int32(message.status);
        /* int64 response_size = 5; */
        if (message.responseSize !== 0n)
            writer.tag(5, WireType.Varint).int64(message.responseSize);
        /* string user_agent = 6; */
        if (message.userAgent !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.userAgent);
        /* string remote_ip = 7; */
        if (message.remoteIp !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.remoteIp);
        /* string server_ip = 13; */
        if (message.serverIp !== "")
            writer.tag(13, WireType.LengthDelimited).string(message.serverIp);
        /* string referer = 8; */
        if (message.referer !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.referer);
        /* google.protobuf.Duration latency = 14; */
        if (message.latency)
            Duration.internalBinaryWrite(message.latency, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* bool cache_lookup = 11; */
        if (message.cacheLookup !== false)
            writer.tag(11, WireType.Varint).bool(message.cacheLookup);
        /* bool cache_hit = 9; */
        if (message.cacheHit !== false)
            writer.tag(9, WireType.Varint).bool(message.cacheHit);
        /* bool cache_validated_with_origin_server = 10; */
        if (message.cacheValidatedWithOriginServer !== false)
            writer.tag(10, WireType.Varint).bool(message.cacheValidatedWithOriginServer);
        /* int64 cache_fill_bytes = 12; */
        if (message.cacheFillBytes !== 0n)
            writer.tag(12, WireType.Varint).int64(message.cacheFillBytes);
        /* string protocol = 15; */
        if (message.protocol !== "")
            writer.tag(15, WireType.LengthDelimited).string(message.protocol);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.servicecontrol.v1.HttpRequest
 */
export const HttpRequest = new HttpRequest$Type();
