// @generated by protobuf-ts 2.8.1
// @generated from protobuf file "google/api/servicecontrol/v2/service_controller.proto" (package "google.api.servicecontrol.v2", syntax proto3)
// tslint:disable
//
// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { ServiceController } from "./service_controller";
import type { ReportResponse } from "./service_controller";
import type { ReportRequest } from "./service_controller";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { CheckResponse } from "./service_controller";
import type { CheckRequest } from "./service_controller";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * [Service Control API
 * v2](https://cloud.google.com/service-infrastructure/docs/service-control/access-control)
 *
 * Private Preview. This feature is only available for approved services.
 *
 * This API provides admission control and telemetry reporting for services
 * that are integrated with [Service
 * Infrastructure](https://cloud.google.com/service-infrastructure).
 *
 * @generated from protobuf service google.api.servicecontrol.v2.ServiceController
 */
export interface IServiceControllerClient {
    /**
     * Private Preview. This feature is only available for approved services.
     *
     * This method provides admission control for services that are integrated
     * with [Service
     * Infrastructure](https://cloud.google.com/service-infrastructure). It checks
     * whether an operation should be allowed based on the service configuration
     * and relevant policies. It must be called before the operation is executed.
     * For more information, see
     * [Admission
     * Control](https://cloud.google.com/service-infrastructure/docs/admission-control).
     *
     * NOTE: The admission control has an expected policy propagation delay of
     * 60s. The caller **must** not depend on the most recent policy changes.
     *
     * NOTE: The admission control has a hard limit of 1 referenced resources
     * per call. If an operation refers to more than 1 resources, the caller
     * must call the Check method multiple times.
     *
     * This method requires the `servicemanagement.services.check` permission
     * on the specified service. For more information, see
     * [Service Control API Access
     * Control](https://cloud.google.com/service-infrastructure/docs/service-control/access-control).
     *
     * @generated from protobuf rpc: Check(google.api.servicecontrol.v2.CheckRequest) returns (google.api.servicecontrol.v2.CheckResponse);
     */
    check(input: CheckRequest, options?: RpcOptions): UnaryCall<CheckRequest, CheckResponse>;
    /**
     * Private Preview. This feature is only available for approved services.
     *
     * This method provides telemetry reporting for services that are integrated
     * with [Service
     * Infrastructure](https://cloud.google.com/service-infrastructure). It
     * reports a list of operations that have occurred on a service. It must be
     * called after the operations have been executed. For more information, see
     * [Telemetry
     * Reporting](https://cloud.google.com/service-infrastructure/docs/telemetry-reporting).
     *
     * NOTE: The telemetry reporting has a hard limit of 1000 operations and 1MB
     * per Report call. It is recommended to have no more than 100 operations per
     * call.
     *
     * This method requires the `servicemanagement.services.report` permission
     * on the specified service. For more information, see
     * [Service Control API Access
     * Control](https://cloud.google.com/service-infrastructure/docs/service-control/access-control).
     *
     * @generated from protobuf rpc: Report(google.api.servicecontrol.v2.ReportRequest) returns (google.api.servicecontrol.v2.ReportResponse);
     */
    report(input: ReportRequest, options?: RpcOptions): UnaryCall<ReportRequest, ReportResponse>;
}
/**
 * [Service Control API
 * v2](https://cloud.google.com/service-infrastructure/docs/service-control/access-control)
 *
 * Private Preview. This feature is only available for approved services.
 *
 * This API provides admission control and telemetry reporting for services
 * that are integrated with [Service
 * Infrastructure](https://cloud.google.com/service-infrastructure).
 *
 * @generated from protobuf service google.api.servicecontrol.v2.ServiceController
 */
export class ServiceControllerClient implements IServiceControllerClient, ServiceInfo {
    typeName = ServiceController.typeName;
    methods = ServiceController.methods;
    options = ServiceController.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Private Preview. This feature is only available for approved services.
     *
     * This method provides admission control for services that are integrated
     * with [Service
     * Infrastructure](https://cloud.google.com/service-infrastructure). It checks
     * whether an operation should be allowed based on the service configuration
     * and relevant policies. It must be called before the operation is executed.
     * For more information, see
     * [Admission
     * Control](https://cloud.google.com/service-infrastructure/docs/admission-control).
     *
     * NOTE: The admission control has an expected policy propagation delay of
     * 60s. The caller **must** not depend on the most recent policy changes.
     *
     * NOTE: The admission control has a hard limit of 1 referenced resources
     * per call. If an operation refers to more than 1 resources, the caller
     * must call the Check method multiple times.
     *
     * This method requires the `servicemanagement.services.check` permission
     * on the specified service. For more information, see
     * [Service Control API Access
     * Control](https://cloud.google.com/service-infrastructure/docs/service-control/access-control).
     *
     * @generated from protobuf rpc: Check(google.api.servicecontrol.v2.CheckRequest) returns (google.api.servicecontrol.v2.CheckResponse);
     */
    check(input: CheckRequest, options?: RpcOptions): UnaryCall<CheckRequest, CheckResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<CheckRequest, CheckResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Private Preview. This feature is only available for approved services.
     *
     * This method provides telemetry reporting for services that are integrated
     * with [Service
     * Infrastructure](https://cloud.google.com/service-infrastructure). It
     * reports a list of operations that have occurred on a service. It must be
     * called after the operations have been executed. For more information, see
     * [Telemetry
     * Reporting](https://cloud.google.com/service-infrastructure/docs/telemetry-reporting).
     *
     * NOTE: The telemetry reporting has a hard limit of 1000 operations and 1MB
     * per Report call. It is recommended to have no more than 100 operations per
     * call.
     *
     * This method requires the `servicemanagement.services.report` permission
     * on the specified service. For more information, see
     * [Service Control API Access
     * Control](https://cloud.google.com/service-infrastructure/docs/service-control/access-control).
     *
     * @generated from protobuf rpc: Report(google.api.servicecontrol.v2.ReportRequest) returns (google.api.servicecontrol.v2.ReportResponse);
     */
    report(input: ReportRequest, options?: RpcOptions): UnaryCall<ReportRequest, ReportResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<ReportRequest, ReportResponse>("unary", this._transport, method, opt, input);
    }
}
