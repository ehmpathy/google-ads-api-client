// @generated by protobuf-ts 2.8.1
// @generated from protobuf file "google/api/servicecontrol/v2/service_controller.proto" (package "google.api.servicecontrol.v2", syntax proto3)
// tslint:disable
//
// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Status } from "../../../rpc/status";
import { AttributeContext } from "../../../rpc/context/attribute_context";
/**
 * Request message for the Check method.
 *
 * @generated from protobuf message google.api.servicecontrol.v2.CheckRequest
 */
export interface CheckRequest {
    /**
     * The service name as specified in its service configuration. For example,
     * `"pubsub.googleapis.com"`.
     *
     * See
     * [google.api.Service](https://cloud.google.com/service-management/reference/rpc/google.api#google.api.Service)
     * for the definition of a service name.
     *
     * @generated from protobuf field: string service_name = 1;
     */
    serviceName: string;
    /**
     * Specifies the version of the service configuration that should be used to
     * process the request. Must not be empty. Set this field to 'latest' to
     * specify using the latest configuration.
     *
     * @generated from protobuf field: string service_config_id = 2;
     */
    serviceConfigId: string;
    /**
     * Describes attributes about the operation being executed by the service.
     *
     * @generated from protobuf field: google.rpc.context.AttributeContext attributes = 3;
     */
    attributes?: AttributeContext;
    /**
     * Describes the resources and the policies applied to each resource.
     *
     * @generated from protobuf field: repeated google.api.servicecontrol.v2.ResourceInfo resources = 4;
     */
    resources: ResourceInfo[];
    /**
     * Optional. Contains a comma-separated list of flags.
     *
     * @generated from protobuf field: string flags = 5;
     */
    flags: string;
}
/**
 * Describes a resource referenced in the request.
 *
 * @generated from protobuf message google.api.servicecontrol.v2.ResourceInfo
 */
export interface ResourceInfo {
    /**
     * The name of the resource referenced in the request.
     *
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * The resource type in the format of "{service}/{kind}".
     *
     * @generated from protobuf field: string type = 2;
     */
    type: string;
    /**
     * The resource permission needed for this request.
     * The format must be "{service}/{plural}.{verb}".
     *
     * @generated from protobuf field: string permission = 3;
     */
    permission: string;
    /**
     * Optional. The identifier of the container of this resource. For Google
     * Cloud APIs, the resource container must be one of the following formats:
     *     - `projects/<project-id or project-number>`
     *     - `folders/<folder-id>`
     *     - `organizations/<organization-id>`
     * For the policy enforcement on the container level (VPCSC and Location
     * Policy check), this field takes precedence on the container extracted from
     * name when presents.
     *
     * @generated from protobuf field: string container = 4;
     */
    container: string;
    /**
     * Optional. The location of the resource. The value must be a valid zone,
     * region or multiregion. For example: "europe-west4" or
     * "northamerica-northeast1-a"
     *
     * @generated from protobuf field: string location = 5;
     */
    location: string;
}
/**
 * Response message for the Check method.
 *
 * @generated from protobuf message google.api.servicecontrol.v2.CheckResponse
 */
export interface CheckResponse {
    /**
     * Operation is allowed when this field is not set. Any non-'OK' status
     * indicates a denial; [google.rpc.Status.details][google.rpc.Status.details]
     * would contain additional details about the denial.
     *
     * @generated from protobuf field: google.rpc.Status status = 1;
     */
    status?: Status;
    /**
     * Returns a set of request contexts generated from the `CheckRequest`.
     *
     * @generated from protobuf field: map<string, string> headers = 2;
     */
    headers: {
        [key: string]: string;
    };
}
/**
 * Request message for the Report method.
 *
 * @generated from protobuf message google.api.servicecontrol.v2.ReportRequest
 */
export interface ReportRequest {
    /**
     * The service name as specified in its service configuration. For example,
     * `"pubsub.googleapis.com"`.
     *
     * See
     * [google.api.Service](https://cloud.google.com/service-management/reference/rpc/google.api#google.api.Service)
     * for the definition of a service name.
     *
     * @generated from protobuf field: string service_name = 1;
     */
    serviceName: string;
    /**
     * Specifies the version of the service configuration that should be used to
     * process the request. Must not be empty. Set this field to 'latest' to
     * specify using the latest configuration.
     *
     * @generated from protobuf field: string service_config_id = 2;
     */
    serviceConfigId: string;
    /**
     * Describes the list of operations to be reported. Each operation is
     * represented as an AttributeContext, and contains all attributes around an
     * API access.
     *
     * @generated from protobuf field: repeated google.rpc.context.AttributeContext operations = 3;
     */
    operations: AttributeContext[];
}
/**
 * Response message for the Report method.
 * If the request contains any invalid data, the server returns an RPC error.
 *
 * @generated from protobuf message google.api.servicecontrol.v2.ReportResponse
 */
export interface ReportResponse {
}
// @generated message type with reflection information, may provide speed optimized methods
class CheckRequest$Type extends MessageType<CheckRequest> {
    constructor() {
        super("google.api.servicecontrol.v2.CheckRequest", [
            { no: 1, name: "service_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "service_config_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "attributes", kind: "message", T: () => AttributeContext },
            { no: 4, name: "resources", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ResourceInfo },
            { no: 5, name: "flags", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CheckRequest>): CheckRequest {
        const message = { serviceName: "", serviceConfigId: "", resources: [], flags: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CheckRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CheckRequest): CheckRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string service_name */ 1:
                    message.serviceName = reader.string();
                    break;
                case /* string service_config_id */ 2:
                    message.serviceConfigId = reader.string();
                    break;
                case /* google.rpc.context.AttributeContext attributes */ 3:
                    message.attributes = AttributeContext.internalBinaryRead(reader, reader.uint32(), options, message.attributes);
                    break;
                case /* repeated google.api.servicecontrol.v2.ResourceInfo resources */ 4:
                    message.resources.push(ResourceInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string flags */ 5:
                    message.flags = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CheckRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string service_name = 1; */
        if (message.serviceName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.serviceName);
        /* string service_config_id = 2; */
        if (message.serviceConfigId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.serviceConfigId);
        /* google.rpc.context.AttributeContext attributes = 3; */
        if (message.attributes)
            AttributeContext.internalBinaryWrite(message.attributes, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated google.api.servicecontrol.v2.ResourceInfo resources = 4; */
        for (let i = 0; i < message.resources.length; i++)
            ResourceInfo.internalBinaryWrite(message.resources[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* string flags = 5; */
        if (message.flags !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.flags);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.servicecontrol.v2.CheckRequest
 */
export const CheckRequest = new CheckRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResourceInfo$Type extends MessageType<ResourceInfo> {
    constructor() {
        super("google.api.servicecontrol.v2.ResourceInfo", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "permission", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "container", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "location", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ResourceInfo>): ResourceInfo {
        const message = { name: "", type: "", permission: "", container: "", location: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ResourceInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResourceInfo): ResourceInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string type */ 2:
                    message.type = reader.string();
                    break;
                case /* string permission */ 3:
                    message.permission = reader.string();
                    break;
                case /* string container */ 4:
                    message.container = reader.string();
                    break;
                case /* string location */ 5:
                    message.location = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResourceInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string type = 2; */
        if (message.type !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.type);
        /* string permission = 3; */
        if (message.permission !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.permission);
        /* string container = 4; */
        if (message.container !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.container);
        /* string location = 5; */
        if (message.location !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.location);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.servicecontrol.v2.ResourceInfo
 */
export const ResourceInfo = new ResourceInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CheckResponse$Type extends MessageType<CheckResponse> {
    constructor() {
        super("google.api.servicecontrol.v2.CheckResponse", [
            { no: 1, name: "status", kind: "message", T: () => Status },
            { no: 2, name: "headers", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } }
        ]);
    }
    create(value?: PartialMessage<CheckResponse>): CheckResponse {
        const message = { headers: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CheckResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CheckResponse): CheckResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.rpc.Status status */ 1:
                    message.status = Status.internalBinaryRead(reader, reader.uint32(), options, message.status);
                    break;
                case /* map<string, string> headers */ 2:
                    this.binaryReadMap2(message.headers, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap2(map: CheckResponse["headers"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof CheckResponse["headers"] | undefined, val: CheckResponse["headers"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field google.api.servicecontrol.v2.CheckResponse.headers");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message: CheckResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.rpc.Status status = 1; */
        if (message.status)
            Status.internalBinaryWrite(message.status, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* map<string, string> headers = 2; */
        for (let k of Object.keys(message.headers))
            writer.tag(2, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.headers[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.servicecontrol.v2.CheckResponse
 */
export const CheckResponse = new CheckResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReportRequest$Type extends MessageType<ReportRequest> {
    constructor() {
        super("google.api.servicecontrol.v2.ReportRequest", [
            { no: 1, name: "service_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "service_config_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "operations", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => AttributeContext }
        ]);
    }
    create(value?: PartialMessage<ReportRequest>): ReportRequest {
        const message = { serviceName: "", serviceConfigId: "", operations: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ReportRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReportRequest): ReportRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string service_name */ 1:
                    message.serviceName = reader.string();
                    break;
                case /* string service_config_id */ 2:
                    message.serviceConfigId = reader.string();
                    break;
                case /* repeated google.rpc.context.AttributeContext operations */ 3:
                    message.operations.push(AttributeContext.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReportRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string service_name = 1; */
        if (message.serviceName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.serviceName);
        /* string service_config_id = 2; */
        if (message.serviceConfigId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.serviceConfigId);
        /* repeated google.rpc.context.AttributeContext operations = 3; */
        for (let i = 0; i < message.operations.length; i++)
            AttributeContext.internalBinaryWrite(message.operations[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.servicecontrol.v2.ReportRequest
 */
export const ReportRequest = new ReportRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReportResponse$Type extends MessageType<ReportResponse> {
    constructor() {
        super("google.api.servicecontrol.v2.ReportResponse", []);
    }
    create(value?: PartialMessage<ReportResponse>): ReportResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ReportResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReportResponse): ReportResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ReportResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.servicecontrol.v2.ReportResponse
 */
export const ReportResponse = new ReportResponse$Type();
/**
 * @generated ServiceType for protobuf service google.api.servicecontrol.v2.ServiceController
 */
export const ServiceController = new ServiceType("google.api.servicecontrol.v2.ServiceController", [
    { name: "Check", options: { "google.api.http": { post: "/v2/services/{service_name}:check", body: "*" } }, I: CheckRequest, O: CheckResponse },
    { name: "Report", options: { "google.api.http": { post: "/v2/services/{service_name}:report", body: "*" } }, I: ReportRequest, O: ReportResponse }
], { "google.api.default_host": "servicecontrol.googleapis.com", "google.api.oauth_scopes": "https://www.googleapis.com/auth/cloud-platform,https://www.googleapis.com/auth/servicecontrol" });
