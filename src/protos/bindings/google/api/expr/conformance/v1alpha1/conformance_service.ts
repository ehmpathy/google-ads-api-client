// @generated by protobuf-ts 2.8.1
// @generated from protobuf file "google/api/expr/conformance/v1alpha1/conformance_service.proto" (package "google.api.expr.conformance.v1alpha1", syntax proto3)
// tslint:disable
//
// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { SourcePosition } from "../../v1alpha1/syntax";
import { ExprValue } from "../../v1alpha1/eval";
import { CheckedExpr } from "../../v1alpha1/checked";
import { Decl } from "../../v1alpha1/checked";
import { Status } from "../../../../rpc/status";
import { ParsedExpr } from "../../v1alpha1/syntax";
/**
 * Request message for the Parse method.
 *
 * @generated from protobuf message google.api.expr.conformance.v1alpha1.ParseRequest
 */
export interface ParseRequest {
    /**
     * Required. Source text in CEL syntax.
     *
     * @generated from protobuf field: string cel_source = 1;
     */
    celSource: string;
    /**
     * Tag for version of CEL syntax, for future use.
     *
     * @generated from protobuf field: string syntax_version = 2;
     */
    syntaxVersion: string;
    /**
     * File or resource for source text, used in [SourceInfo][google.api.SourceInfo].
     *
     * @generated from protobuf field: string source_location = 3;
     */
    sourceLocation: string;
    /**
     * Prevent macro expansion.  See "Macros" in Language Defiinition.
     *
     * @generated from protobuf field: bool disable_macros = 4;
     */
    disableMacros: boolean;
}
/**
 * Response message for the Parse method.
 *
 * @generated from protobuf message google.api.expr.conformance.v1alpha1.ParseResponse
 */
export interface ParseResponse {
    /**
     * The parsed representation, or unset if parsing failed.
     *
     * @generated from protobuf field: google.api.expr.v1alpha1.ParsedExpr parsed_expr = 1;
     */
    parsedExpr?: ParsedExpr;
    /**
     * Any number of issues with [StatusDetails][] as the details.
     *
     * @generated from protobuf field: repeated google.rpc.Status issues = 2;
     */
    issues: Status[];
}
/**
 * Request message for the Check method.
 *
 * @generated from protobuf message google.api.expr.conformance.v1alpha1.CheckRequest
 */
export interface CheckRequest {
    /**
     * Required. The parsed representation of the CEL program.
     *
     * @generated from protobuf field: google.api.expr.v1alpha1.ParsedExpr parsed_expr = 1;
     */
    parsedExpr?: ParsedExpr;
    /**
     * Declarations of types for external variables and functions.
     * Required if program uses external variables or functions
     * not in the default environment.
     *
     * @generated from protobuf field: repeated google.api.expr.v1alpha1.Decl type_env = 2;
     */
    typeEnv: Decl[];
    /**
     * The protocol buffer context.  See "Name Resolution" in the
     * Language Definition.
     *
     * @generated from protobuf field: string container = 3;
     */
    container: string;
    /**
     * If true, use only the declarations in [type_env][google.api.expr.conformance.v1alpha1.CheckRequest.type_env].  If false (default),
     * add declarations for the standard definitions to the type environment.  See
     * "Standard Definitions" in the Language Definition.
     *
     * @generated from protobuf field: bool no_std_env = 4;
     */
    noStdEnv: boolean;
}
/**
 * Response message for the Check method.
 *
 * @generated from protobuf message google.api.expr.conformance.v1alpha1.CheckResponse
 */
export interface CheckResponse {
    /**
     * The annotated representation, or unset if checking failed.
     *
     * @generated from protobuf field: google.api.expr.v1alpha1.CheckedExpr checked_expr = 1;
     */
    checkedExpr?: CheckedExpr;
    /**
     * Any number of issues with [StatusDetails][] as the details.
     *
     * @generated from protobuf field: repeated google.rpc.Status issues = 2;
     */
    issues: Status[];
}
/**
 * Request message for the Eval method.
 *
 * @generated from protobuf message google.api.expr.conformance.v1alpha1.EvalRequest
 */
export interface EvalRequest {
    /**
     * @generated from protobuf oneof: expr_kind
     */
    exprKind: {
        oneofKind: "parsedExpr";
        /**
         * Evaluate based on the parsed representation.
         *
         * @generated from protobuf field: google.api.expr.v1alpha1.ParsedExpr parsed_expr = 1;
         */
        parsedExpr: ParsedExpr;
    } | {
        oneofKind: "checkedExpr";
        /**
         * Evaluate based on the checked representation.
         *
         * @generated from protobuf field: google.api.expr.v1alpha1.CheckedExpr checked_expr = 2;
         */
        checkedExpr: CheckedExpr;
    } | {
        oneofKind: undefined;
    };
    /**
     * Bindings for the external variables.  The types SHOULD be compatible
     * with the type environment in [CheckRequest][google.api.expr.conformance.v1alpha1.CheckRequest], if checked.
     *
     * @generated from protobuf field: map<string, google.api.expr.v1alpha1.ExprValue> bindings = 3;
     */
    bindings: {
        [key: string]: ExprValue;
    };
    /**
     * SHOULD be the same container as used in [CheckRequest][google.api.expr.conformance.v1alpha1.CheckRequest], if checked.
     *
     * @generated from protobuf field: string container = 4;
     */
    container: string;
}
/**
 * Response message for the Eval method.
 *
 * @generated from protobuf message google.api.expr.conformance.v1alpha1.EvalResponse
 */
export interface EvalResponse {
    /**
     * The execution result, or unset if execution couldn't start.
     *
     * @generated from protobuf field: google.api.expr.v1alpha1.ExprValue result = 1;
     */
    result?: ExprValue;
    /**
     * Any number of issues with [StatusDetails][] as the details.
     * Note that CEL execution errors are reified into [ExprValue][].
     * Nevertheless, we'll allow out-of-band issues to be raised,
     * which also makes the replies more regular.
     *
     * @generated from protobuf field: repeated google.rpc.Status issues = 2;
     */
    issues: Status[];
}
/**
 * Warnings or errors in service execution are represented by
 * [google.rpc.Status][google.rpc.Status] messages, with the following message
 * in the details field.
 *
 * @generated from protobuf message google.api.expr.conformance.v1alpha1.IssueDetails
 */
export interface IssueDetails {
    /**
     * The severity of the issue.
     *
     * @generated from protobuf field: google.api.expr.conformance.v1alpha1.IssueDetails.Severity severity = 1;
     */
    severity: IssueDetails_Severity;
    /**
     * Position in the source, if known.
     *
     * @generated from protobuf field: google.api.expr.v1alpha1.SourcePosition position = 2;
     */
    position?: SourcePosition;
    /**
     * Expression ID from [Expr][], 0 if unknown.
     *
     * @generated from protobuf field: int64 id = 3;
     */
    id: bigint;
}
/**
 * Severities of issues.
 *
 * @generated from protobuf enum google.api.expr.conformance.v1alpha1.IssueDetails.Severity
 */
export enum IssueDetails_Severity {
    /**
     * An unspecified severity.
     *
     * @generated from protobuf enum value: SEVERITY_UNSPECIFIED = 0;
     */
    SEVERITY_UNSPECIFIED = 0,
    /**
     * Deprecation issue for statements and method that may no longer be
     * supported or maintained.
     *
     * @generated from protobuf enum value: DEPRECATION = 1;
     */
    DEPRECATION = 1,
    /**
     * Warnings such as: unused variables.
     *
     * @generated from protobuf enum value: WARNING = 2;
     */
    WARNING = 2,
    /**
     * Errors such as: unmatched curly braces or variable redefinition.
     *
     * @generated from protobuf enum value: ERROR = 3;
     */
    ERROR = 3
}
// @generated message type with reflection information, may provide speed optimized methods
class ParseRequest$Type extends MessageType<ParseRequest> {
    constructor() {
        super("google.api.expr.conformance.v1alpha1.ParseRequest", [
            { no: 1, name: "cel_source", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "syntax_version", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "source_location", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "disable_macros", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ParseRequest>): ParseRequest {
        const message = { celSource: "", syntaxVersion: "", sourceLocation: "", disableMacros: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ParseRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ParseRequest): ParseRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string cel_source */ 1:
                    message.celSource = reader.string();
                    break;
                case /* string syntax_version */ 2:
                    message.syntaxVersion = reader.string();
                    break;
                case /* string source_location */ 3:
                    message.sourceLocation = reader.string();
                    break;
                case /* bool disable_macros */ 4:
                    message.disableMacros = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ParseRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string cel_source = 1; */
        if (message.celSource !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.celSource);
        /* string syntax_version = 2; */
        if (message.syntaxVersion !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.syntaxVersion);
        /* string source_location = 3; */
        if (message.sourceLocation !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.sourceLocation);
        /* bool disable_macros = 4; */
        if (message.disableMacros !== false)
            writer.tag(4, WireType.Varint).bool(message.disableMacros);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.expr.conformance.v1alpha1.ParseRequest
 */
export const ParseRequest = new ParseRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ParseResponse$Type extends MessageType<ParseResponse> {
    constructor() {
        super("google.api.expr.conformance.v1alpha1.ParseResponse", [
            { no: 1, name: "parsed_expr", kind: "message", T: () => ParsedExpr },
            { no: 2, name: "issues", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Status }
        ]);
    }
    create(value?: PartialMessage<ParseResponse>): ParseResponse {
        const message = { issues: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ParseResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ParseResponse): ParseResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.api.expr.v1alpha1.ParsedExpr parsed_expr */ 1:
                    message.parsedExpr = ParsedExpr.internalBinaryRead(reader, reader.uint32(), options, message.parsedExpr);
                    break;
                case /* repeated google.rpc.Status issues */ 2:
                    message.issues.push(Status.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ParseResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.api.expr.v1alpha1.ParsedExpr parsed_expr = 1; */
        if (message.parsedExpr)
            ParsedExpr.internalBinaryWrite(message.parsedExpr, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated google.rpc.Status issues = 2; */
        for (let i = 0; i < message.issues.length; i++)
            Status.internalBinaryWrite(message.issues[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.expr.conformance.v1alpha1.ParseResponse
 */
export const ParseResponse = new ParseResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CheckRequest$Type extends MessageType<CheckRequest> {
    constructor() {
        super("google.api.expr.conformance.v1alpha1.CheckRequest", [
            { no: 1, name: "parsed_expr", kind: "message", T: () => ParsedExpr },
            { no: 2, name: "type_env", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Decl },
            { no: 3, name: "container", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "no_std_env", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<CheckRequest>): CheckRequest {
        const message = { typeEnv: [], container: "", noStdEnv: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CheckRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CheckRequest): CheckRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.api.expr.v1alpha1.ParsedExpr parsed_expr */ 1:
                    message.parsedExpr = ParsedExpr.internalBinaryRead(reader, reader.uint32(), options, message.parsedExpr);
                    break;
                case /* repeated google.api.expr.v1alpha1.Decl type_env */ 2:
                    message.typeEnv.push(Decl.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string container */ 3:
                    message.container = reader.string();
                    break;
                case /* bool no_std_env */ 4:
                    message.noStdEnv = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CheckRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.api.expr.v1alpha1.ParsedExpr parsed_expr = 1; */
        if (message.parsedExpr)
            ParsedExpr.internalBinaryWrite(message.parsedExpr, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated google.api.expr.v1alpha1.Decl type_env = 2; */
        for (let i = 0; i < message.typeEnv.length; i++)
            Decl.internalBinaryWrite(message.typeEnv[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string container = 3; */
        if (message.container !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.container);
        /* bool no_std_env = 4; */
        if (message.noStdEnv !== false)
            writer.tag(4, WireType.Varint).bool(message.noStdEnv);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.expr.conformance.v1alpha1.CheckRequest
 */
export const CheckRequest = new CheckRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CheckResponse$Type extends MessageType<CheckResponse> {
    constructor() {
        super("google.api.expr.conformance.v1alpha1.CheckResponse", [
            { no: 1, name: "checked_expr", kind: "message", T: () => CheckedExpr },
            { no: 2, name: "issues", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Status }
        ]);
    }
    create(value?: PartialMessage<CheckResponse>): CheckResponse {
        const message = { issues: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CheckResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CheckResponse): CheckResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.api.expr.v1alpha1.CheckedExpr checked_expr */ 1:
                    message.checkedExpr = CheckedExpr.internalBinaryRead(reader, reader.uint32(), options, message.checkedExpr);
                    break;
                case /* repeated google.rpc.Status issues */ 2:
                    message.issues.push(Status.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CheckResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.api.expr.v1alpha1.CheckedExpr checked_expr = 1; */
        if (message.checkedExpr)
            CheckedExpr.internalBinaryWrite(message.checkedExpr, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated google.rpc.Status issues = 2; */
        for (let i = 0; i < message.issues.length; i++)
            Status.internalBinaryWrite(message.issues[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.expr.conformance.v1alpha1.CheckResponse
 */
export const CheckResponse = new CheckResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EvalRequest$Type extends MessageType<EvalRequest> {
    constructor() {
        super("google.api.expr.conformance.v1alpha1.EvalRequest", [
            { no: 1, name: "parsed_expr", kind: "message", oneof: "exprKind", T: () => ParsedExpr },
            { no: 2, name: "checked_expr", kind: "message", oneof: "exprKind", T: () => CheckedExpr },
            { no: 3, name: "bindings", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => ExprValue } },
            { no: 4, name: "container", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<EvalRequest>): EvalRequest {
        const message = { exprKind: { oneofKind: undefined }, bindings: {}, container: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EvalRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EvalRequest): EvalRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.api.expr.v1alpha1.ParsedExpr parsed_expr */ 1:
                    message.exprKind = {
                        oneofKind: "parsedExpr",
                        parsedExpr: ParsedExpr.internalBinaryRead(reader, reader.uint32(), options, (message.exprKind as any).parsedExpr)
                    };
                    break;
                case /* google.api.expr.v1alpha1.CheckedExpr checked_expr */ 2:
                    message.exprKind = {
                        oneofKind: "checkedExpr",
                        checkedExpr: CheckedExpr.internalBinaryRead(reader, reader.uint32(), options, (message.exprKind as any).checkedExpr)
                    };
                    break;
                case /* map<string, google.api.expr.v1alpha1.ExprValue> bindings */ 3:
                    this.binaryReadMap3(message.bindings, reader, options);
                    break;
                case /* string container */ 4:
                    message.container = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap3(map: EvalRequest["bindings"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof EvalRequest["bindings"] | undefined, val: EvalRequest["bindings"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = ExprValue.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field google.api.expr.conformance.v1alpha1.EvalRequest.bindings");
            }
        }
        map[key ?? ""] = val ?? ExprValue.create();
    }
    internalBinaryWrite(message: EvalRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.api.expr.v1alpha1.ParsedExpr parsed_expr = 1; */
        if (message.exprKind.oneofKind === "parsedExpr")
            ParsedExpr.internalBinaryWrite(message.exprKind.parsedExpr, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* google.api.expr.v1alpha1.CheckedExpr checked_expr = 2; */
        if (message.exprKind.oneofKind === "checkedExpr")
            CheckedExpr.internalBinaryWrite(message.exprKind.checkedExpr, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* map<string, google.api.expr.v1alpha1.ExprValue> bindings = 3; */
        for (let k of Object.keys(message.bindings)) {
            writer.tag(3, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            ExprValue.internalBinaryWrite(message.bindings[k], writer, options);
            writer.join().join();
        }
        /* string container = 4; */
        if (message.container !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.container);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.expr.conformance.v1alpha1.EvalRequest
 */
export const EvalRequest = new EvalRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EvalResponse$Type extends MessageType<EvalResponse> {
    constructor() {
        super("google.api.expr.conformance.v1alpha1.EvalResponse", [
            { no: 1, name: "result", kind: "message", T: () => ExprValue },
            { no: 2, name: "issues", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Status }
        ]);
    }
    create(value?: PartialMessage<EvalResponse>): EvalResponse {
        const message = { issues: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EvalResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EvalResponse): EvalResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.api.expr.v1alpha1.ExprValue result */ 1:
                    message.result = ExprValue.internalBinaryRead(reader, reader.uint32(), options, message.result);
                    break;
                case /* repeated google.rpc.Status issues */ 2:
                    message.issues.push(Status.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EvalResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.api.expr.v1alpha1.ExprValue result = 1; */
        if (message.result)
            ExprValue.internalBinaryWrite(message.result, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated google.rpc.Status issues = 2; */
        for (let i = 0; i < message.issues.length; i++)
            Status.internalBinaryWrite(message.issues[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.expr.conformance.v1alpha1.EvalResponse
 */
export const EvalResponse = new EvalResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IssueDetails$Type extends MessageType<IssueDetails> {
    constructor() {
        super("google.api.expr.conformance.v1alpha1.IssueDetails", [
            { no: 1, name: "severity", kind: "enum", T: () => ["google.api.expr.conformance.v1alpha1.IssueDetails.Severity", IssueDetails_Severity] },
            { no: 2, name: "position", kind: "message", T: () => SourcePosition },
            { no: 3, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<IssueDetails>): IssueDetails {
        const message = { severity: 0, id: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<IssueDetails>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IssueDetails): IssueDetails {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.api.expr.conformance.v1alpha1.IssueDetails.Severity severity */ 1:
                    message.severity = reader.int32();
                    break;
                case /* google.api.expr.v1alpha1.SourcePosition position */ 2:
                    message.position = SourcePosition.internalBinaryRead(reader, reader.uint32(), options, message.position);
                    break;
                case /* int64 id */ 3:
                    message.id = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IssueDetails, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.api.expr.conformance.v1alpha1.IssueDetails.Severity severity = 1; */
        if (message.severity !== 0)
            writer.tag(1, WireType.Varint).int32(message.severity);
        /* google.api.expr.v1alpha1.SourcePosition position = 2; */
        if (message.position)
            SourcePosition.internalBinaryWrite(message.position, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* int64 id = 3; */
        if (message.id !== 0n)
            writer.tag(3, WireType.Varint).int64(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.expr.conformance.v1alpha1.IssueDetails
 */
export const IssueDetails = new IssueDetails$Type();
/**
 * @generated ServiceType for protobuf service google.api.expr.conformance.v1alpha1.ConformanceService
 */
export const ConformanceService = new ServiceType("google.api.expr.conformance.v1alpha1.ConformanceService", [
    { name: "Parse", options: {}, I: ParseRequest, O: ParseResponse },
    { name: "Check", options: {}, I: CheckRequest, O: CheckResponse },
    { name: "Eval", options: {}, I: EvalRequest, O: EvalResponse }
], { "google.api.default_host": "cel.googleapis.com" });
