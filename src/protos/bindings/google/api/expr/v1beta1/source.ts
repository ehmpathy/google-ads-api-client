// @generated by protobuf-ts 2.8.1
// @generated from protobuf file "google/api/expr/v1beta1/source.proto" (package "google.api.expr.v1beta1", syntax proto3)
// tslint:disable
//
// Copyright 2019 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * Source information collected at parse time.
 *
 * @generated from protobuf message google.api.expr.v1beta1.SourceInfo
 */
export interface SourceInfo {
    /**
     * The location name. All position information attached to an expression is
     * relative to this location.
     *
     * The location could be a file, UI element, or similar. For example,
     * `acme/app/AnvilPolicy.cel`.
     *
     * @generated from protobuf field: string location = 2;
     */
    location: string;
    /**
     * Monotonically increasing list of character offsets where newlines appear.
     *
     * The line number of a given position is the index `i` where for a given
     * `id` the `line_offsets[i] < id_positions[id] < line_offsets[i+1]`. The
     * column may be derivd from `id_positions[id] - line_offsets[i]`.
     *
     * @generated from protobuf field: repeated int32 line_offsets = 3;
     */
    lineOffsets: number[];
    /**
     * A map from the parse node id (e.g. `Expr.id`) to the character offset
     * within source.
     *
     * @generated from protobuf field: map<int32, int32> positions = 4;
     */
    positions: {
        [key: number]: number;
    };
}
/**
 * A specific position in source.
 *
 * @generated from protobuf message google.api.expr.v1beta1.SourcePosition
 */
export interface SourcePosition {
    /**
     * The soucre location name (e.g. file name).
     *
     * @generated from protobuf field: string location = 1;
     */
    location: string;
    /**
     * The character offset.
     *
     * @generated from protobuf field: int32 offset = 2;
     */
    offset: number;
    /**
     * The 1-based index of the starting line in the source text
     * where the issue occurs, or 0 if unknown.
     *
     * @generated from protobuf field: int32 line = 3;
     */
    line: number;
    /**
     * The 0-based index of the starting position within the line of source text
     * where the issue occurs.  Only meaningful if line is nonzer..
     *
     * @generated from protobuf field: int32 column = 4;
     */
    column: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class SourceInfo$Type extends MessageType<SourceInfo> {
    constructor() {
        super("google.api.expr.v1beta1.SourceInfo", [
            { no: 2, name: "location", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "line_offsets", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "positions", kind: "map", K: 5 /*ScalarType.INT32*/, V: { kind: "scalar", T: 5 /*ScalarType.INT32*/ } }
        ]);
    }
    create(value?: PartialMessage<SourceInfo>): SourceInfo {
        const message = { location: "", lineOffsets: [], positions: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SourceInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SourceInfo): SourceInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string location */ 2:
                    message.location = reader.string();
                    break;
                case /* repeated int32 line_offsets */ 3:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.lineOffsets.push(reader.int32());
                    else
                        message.lineOffsets.push(reader.int32());
                    break;
                case /* map<int32, int32> positions */ 4:
                    this.binaryReadMap4(message.positions, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap4(map: SourceInfo["positions"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof SourceInfo["positions"] | undefined, val: SourceInfo["positions"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.int32();
                    break;
                case 2:
                    val = reader.int32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field google.api.expr.v1beta1.SourceInfo.positions");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    internalBinaryWrite(message: SourceInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string location = 2; */
        if (message.location !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.location);
        /* repeated int32 line_offsets = 3; */
        if (message.lineOffsets.length) {
            writer.tag(3, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.lineOffsets.length; i++)
                writer.int32(message.lineOffsets[i]);
            writer.join();
        }
        /* map<int32, int32> positions = 4; */
        for (let k of Object.keys(message.positions))
            writer.tag(4, WireType.LengthDelimited).fork().tag(1, WireType.Varint).int32(parseInt(k)).tag(2, WireType.Varint).int32(message.positions[k as any]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.expr.v1beta1.SourceInfo
 */
export const SourceInfo = new SourceInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SourcePosition$Type extends MessageType<SourcePosition> {
    constructor() {
        super("google.api.expr.v1beta1.SourcePosition", [
            { no: 1, name: "location", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "offset", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "line", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "column", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<SourcePosition>): SourcePosition {
        const message = { location: "", offset: 0, line: 0, column: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SourcePosition>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SourcePosition): SourcePosition {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string location */ 1:
                    message.location = reader.string();
                    break;
                case /* int32 offset */ 2:
                    message.offset = reader.int32();
                    break;
                case /* int32 line */ 3:
                    message.line = reader.int32();
                    break;
                case /* int32 column */ 4:
                    message.column = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SourcePosition, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string location = 1; */
        if (message.location !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.location);
        /* int32 offset = 2; */
        if (message.offset !== 0)
            writer.tag(2, WireType.Varint).int32(message.offset);
        /* int32 line = 3; */
        if (message.line !== 0)
            writer.tag(3, WireType.Varint).int32(message.line);
        /* int32 column = 4; */
        if (message.column !== 0)
            writer.tag(4, WireType.Varint).int32(message.column);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.expr.v1beta1.SourcePosition
 */
export const SourcePosition = new SourcePosition$Type();
