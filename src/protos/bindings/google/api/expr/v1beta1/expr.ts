// @generated by protobuf-ts 2.8.1
// @generated from protobuf file "google/api/expr/v1beta1/expr.proto" (package "google.api.expr.v1beta1", syntax proto3)
// tslint:disable
//
// Copyright 2019 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { NullValue } from "../../../protobuf/struct";
import { SourceInfo } from "./source";
/**
 * An expression together with source information as returned by the parser.
 *
 * @generated from protobuf message google.api.expr.v1beta1.ParsedExpr
 */
export interface ParsedExpr {
    /**
     * The parsed expression.
     *
     * @generated from protobuf field: google.api.expr.v1beta1.Expr expr = 2;
     */
    expr?: Expr;
    /**
     * The source info derived from input that generated the parsed `expr`.
     *
     * @generated from protobuf field: google.api.expr.v1beta1.SourceInfo source_info = 3;
     */
    sourceInfo?: SourceInfo;
    /**
     * The syntax version of the source, e.g. `cel1`.
     *
     * @generated from protobuf field: string syntax_version = 4;
     */
    syntaxVersion: string;
}
/**
 * An abstract representation of a common expression.
 *
 * Expressions are abstractly represented as a collection of identifiers,
 * select statements, function calls, literals, and comprehensions. All
 * operators with the exception of the '.' operator are modelled as function
 * calls. This makes it easy to represent new operators into the existing AST.
 *
 * All references within expressions must resolve to a [Decl][google.api.expr.v1beta1.Decl] provided at
 * type-check for an expression to be valid. A reference may either be a bare
 * identifier `name` or a qualified identifier `google.api.name`. References
 * may either refer to a value or a function declaration.
 *
 * For example, the expression `google.api.name.startsWith('expr')` references
 * the declaration `google.api.name` within a [Expr.Select][google.api.expr.v1beta1.Expr.Select] expression, and
 * the function declaration `startsWith`.
 *
 * @generated from protobuf message google.api.expr.v1beta1.Expr
 */
export interface Expr {
    /**
     * Required. An id assigned to this node by the parser which is unique in a
     * given expression tree. This is used to associate type information and other
     * attributes to a node in the parse tree.
     *
     * @generated from protobuf field: int32 id = 2;
     */
    id: number;
    /**
     * @generated from protobuf oneof: expr_kind
     */
    exprKind: {
        oneofKind: "literalExpr";
        /**
         * A literal expression.
         *
         * @generated from protobuf field: google.api.expr.v1beta1.Literal literal_expr = 3;
         */
        literalExpr: Literal;
    } | {
        oneofKind: "identExpr";
        /**
         * An identifier expression.
         *
         * @generated from protobuf field: google.api.expr.v1beta1.Expr.Ident ident_expr = 4;
         */
        identExpr: Expr_Ident;
    } | {
        oneofKind: "selectExpr";
        /**
         * A field selection expression, e.g. `request.auth`.
         *
         * @generated from protobuf field: google.api.expr.v1beta1.Expr.Select select_expr = 5;
         */
        selectExpr: Expr_Select;
    } | {
        oneofKind: "callExpr";
        /**
         * A call expression, including calls to predefined functions and operators.
         *
         * @generated from protobuf field: google.api.expr.v1beta1.Expr.Call call_expr = 6;
         */
        callExpr: Expr_Call;
    } | {
        oneofKind: "listExpr";
        /**
         * A list creation expression.
         *
         * @generated from protobuf field: google.api.expr.v1beta1.Expr.CreateList list_expr = 7;
         */
        listExpr: Expr_CreateList;
    } | {
        oneofKind: "structExpr";
        /**
         * A map or object creation expression.
         *
         * @generated from protobuf field: google.api.expr.v1beta1.Expr.CreateStruct struct_expr = 8;
         */
        structExpr: Expr_CreateStruct;
    } | {
        oneofKind: "comprehensionExpr";
        /**
         * A comprehension expression.
         *
         * @generated from protobuf field: google.api.expr.v1beta1.Expr.Comprehension comprehension_expr = 9;
         */
        comprehensionExpr: Expr_Comprehension;
    } | {
        oneofKind: undefined;
    };
}
/**
 * An identifier expression. e.g. `request`.
 *
 * @generated from protobuf message google.api.expr.v1beta1.Expr.Ident
 */
export interface Expr_Ident {
    /**
     * Required. Holds a single, unqualified identifier, possibly preceded by a
     * '.'.
     *
     * Qualified names are represented by the [Expr.Select][google.api.expr.v1beta1.Expr.Select] expression.
     *
     * @generated from protobuf field: string name = 1;
     */
    name: string;
}
/**
 * A field selection expression. e.g. `request.auth`.
 *
 * @generated from protobuf message google.api.expr.v1beta1.Expr.Select
 */
export interface Expr_Select {
    /**
     * Required. The target of the selection expression.
     *
     * For example, in the select expression `request.auth`, the `request`
     * portion of the expression is the `operand`.
     *
     * @generated from protobuf field: google.api.expr.v1beta1.Expr operand = 1;
     */
    operand?: Expr;
    /**
     * Required. The name of the field to select.
     *
     * For example, in the select expression `request.auth`, the `auth` portion
     * of the expression would be the `field`.
     *
     * @generated from protobuf field: string field = 2;
     */
    field: string;
    /**
     * Whether the select is to be interpreted as a field presence test.
     *
     * This results from the macro `has(request.auth)`.
     *
     * @generated from protobuf field: bool test_only = 3;
     */
    testOnly: boolean;
}
/**
 * A call expression, including calls to predefined functions and operators.
 *
 * For example, `value == 10`, `size(map_value)`.
 *
 * @generated from protobuf message google.api.expr.v1beta1.Expr.Call
 */
export interface Expr_Call {
    /**
     * The target of an method call-style expression. For example, `x` in
     * `x.f()`.
     *
     * @generated from protobuf field: google.api.expr.v1beta1.Expr target = 1;
     */
    target?: Expr;
    /**
     * Required. The name of the function or method being called.
     *
     * @generated from protobuf field: string function = 2;
     */
    function: string;
    /**
     * The arguments.
     *
     * @generated from protobuf field: repeated google.api.expr.v1beta1.Expr args = 3;
     */
    args: Expr[];
}
/**
 * A list creation expression.
 *
 * Lists may either be homogenous, e.g. `[1, 2, 3]`, or heterogenous, e.g.
 * `dyn([1, 'hello', 2.0])`
 *
 * @generated from protobuf message google.api.expr.v1beta1.Expr.CreateList
 */
export interface Expr_CreateList {
    /**
     * The elements part of the list.
     *
     * @generated from protobuf field: repeated google.api.expr.v1beta1.Expr elements = 1;
     */
    elements: Expr[];
}
/**
 * A map or message creation expression.
 *
 * Maps are constructed as `{'key_name': 'value'}`. Message construction is
 * similar, but prefixed with a type name and composed of field ids:
 * `types.MyType{field_id: 'value'}`.
 *
 * @generated from protobuf message google.api.expr.v1beta1.Expr.CreateStruct
 */
export interface Expr_CreateStruct {
    /**
     * The type name of the message to be created, empty when creating map
     * literals.
     *
     * @generated from protobuf field: string type = 1;
     */
    type: string;
    /**
     * The entries in the creation expression.
     *
     * @generated from protobuf field: repeated google.api.expr.v1beta1.Expr.CreateStruct.Entry entries = 2;
     */
    entries: Expr_CreateStruct_Entry[];
}
/**
 * Represents an entry.
 *
 * @generated from protobuf message google.api.expr.v1beta1.Expr.CreateStruct.Entry
 */
export interface Expr_CreateStruct_Entry {
    /**
     * Required. An id assigned to this node by the parser which is unique
     * in a given expression tree. This is used to associate type
     * information and other attributes to the node.
     *
     * @generated from protobuf field: int32 id = 1;
     */
    id: number;
    /**
     * @generated from protobuf oneof: key_kind
     */
    keyKind: {
        oneofKind: "fieldKey";
        /**
         * The field key for a message creator statement.
         *
         * @generated from protobuf field: string field_key = 2;
         */
        fieldKey: string;
    } | {
        oneofKind: "mapKey";
        /**
         * The key expression for a map creation statement.
         *
         * @generated from protobuf field: google.api.expr.v1beta1.Expr map_key = 3;
         */
        mapKey: Expr;
    } | {
        oneofKind: undefined;
    };
    /**
     * Required. The value assigned to the key.
     *
     * @generated from protobuf field: google.api.expr.v1beta1.Expr value = 4;
     */
    value?: Expr;
}
/**
 * A comprehension expression applied to a list or map.
 *
 * Comprehensions are not part of the core syntax, but enabled with macros.
 * A macro matches a specific call signature within a parsed AST and replaces
 * the call with an alternate AST block. Macro expansion happens at parse
 * time.
 *
 * The following macros are supported within CEL:
 *
 * Aggregate type macros may be applied to all elements in a list or all keys
 * in a map:
 *
 * *  `all`, `exists`, `exists_one` -  test a predicate expression against
 *    the inputs and return `true` if the predicate is satisfied for all,
 *    any, or only one value `list.all(x, x < 10)`.
 * *  `filter` - test a predicate expression against the inputs and return
 *    the subset of elements which satisfy the predicate:
 *    `payments.filter(p, p > 1000)`.
 * *  `map` - apply an expression to all elements in the input and return the
 *    output aggregate type: `[1, 2, 3].map(i, i * i)`.
 *
 * The `has(m.x)` macro tests whether the property `x` is present in struct
 * `m`. The semantics of this macro depend on the type of `m`. For proto2
 * messages `has(m.x)` is defined as 'defined, but not set`. For proto3, the
 * macro tests whether the property is set to its default. For map and struct
 * types, the macro tests whether the property `x` is defined on `m`.
 *
 * @generated from protobuf message google.api.expr.v1beta1.Expr.Comprehension
 */
export interface Expr_Comprehension {
    /**
     * The name of the iteration variable.
     *
     * @generated from protobuf field: string iter_var = 1;
     */
    iterVar: string;
    /**
     * The range over which var iterates.
     *
     * @generated from protobuf field: google.api.expr.v1beta1.Expr iter_range = 2;
     */
    iterRange?: Expr;
    /**
     * The name of the variable used for accumulation of the result.
     *
     * @generated from protobuf field: string accu_var = 3;
     */
    accuVar: string;
    /**
     * The initial value of the accumulator.
     *
     * @generated from protobuf field: google.api.expr.v1beta1.Expr accu_init = 4;
     */
    accuInit?: Expr;
    /**
     * An expression which can contain iter_var and accu_var.
     *
     * Returns false when the result has been computed and may be used as
     * a hint to short-circuit the remainder of the comprehension.
     *
     * @generated from protobuf field: google.api.expr.v1beta1.Expr loop_condition = 5;
     */
    loopCondition?: Expr;
    /**
     * An expression which can contain iter_var and accu_var.
     *
     * Computes the next value of accu_var.
     *
     * @generated from protobuf field: google.api.expr.v1beta1.Expr loop_step = 6;
     */
    loopStep?: Expr;
    /**
     * An expression which can contain accu_var.
     *
     * Computes the result.
     *
     * @generated from protobuf field: google.api.expr.v1beta1.Expr result = 7;
     */
    result?: Expr;
}
/**
 * Represents a primitive literal.
 *
 * This is similar to the primitives supported in the well-known type
 * `google.protobuf.Value`, but richer so it can represent CEL's full range of
 * primitives.
 *
 * Lists and structs are not included as constants as these aggregate types may
 * contain [Expr][google.api.expr.v1beta1.Expr] elements which require evaluation and are thus not constant.
 *
 * Examples of literals include: `"hello"`, `b'bytes'`, `1u`, `4.2`, `-2`,
 * `true`, `null`.
 *
 * @generated from protobuf message google.api.expr.v1beta1.Literal
 */
export interface Literal {
    /**
     * @generated from protobuf oneof: constant_kind
     */
    constantKind: {
        oneofKind: "nullValue";
        /**
         * null value.
         *
         * @generated from protobuf field: google.protobuf.NullValue null_value = 1;
         */
        nullValue: NullValue;
    } | {
        oneofKind: "boolValue";
        /**
         * boolean value.
         *
         * @generated from protobuf field: bool bool_value = 2;
         */
        boolValue: boolean;
    } | {
        oneofKind: "int64Value";
        /**
         * int64 value.
         *
         * @generated from protobuf field: int64 int64_value = 3;
         */
        int64Value: bigint;
    } | {
        oneofKind: "uint64Value";
        /**
         * uint64 value.
         *
         * @generated from protobuf field: uint64 uint64_value = 4;
         */
        uint64Value: bigint;
    } | {
        oneofKind: "doubleValue";
        /**
         * double value.
         *
         * @generated from protobuf field: double double_value = 5;
         */
        doubleValue: number;
    } | {
        oneofKind: "stringValue";
        /**
         * string value.
         *
         * @generated from protobuf field: string string_value = 6;
         */
        stringValue: string;
    } | {
        oneofKind: "bytesValue";
        /**
         * bytes value.
         *
         * @generated from protobuf field: bytes bytes_value = 7;
         */
        bytesValue: Uint8Array;
    } | {
        oneofKind: undefined;
    };
}
// @generated message type with reflection information, may provide speed optimized methods
class ParsedExpr$Type extends MessageType<ParsedExpr> {
    constructor() {
        super("google.api.expr.v1beta1.ParsedExpr", [
            { no: 2, name: "expr", kind: "message", T: () => Expr },
            { no: 3, name: "source_info", kind: "message", T: () => SourceInfo },
            { no: 4, name: "syntax_version", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ParsedExpr>): ParsedExpr {
        const message = { syntaxVersion: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ParsedExpr>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ParsedExpr): ParsedExpr {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.api.expr.v1beta1.Expr expr */ 2:
                    message.expr = Expr.internalBinaryRead(reader, reader.uint32(), options, message.expr);
                    break;
                case /* google.api.expr.v1beta1.SourceInfo source_info */ 3:
                    message.sourceInfo = SourceInfo.internalBinaryRead(reader, reader.uint32(), options, message.sourceInfo);
                    break;
                case /* string syntax_version */ 4:
                    message.syntaxVersion = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ParsedExpr, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.api.expr.v1beta1.Expr expr = 2; */
        if (message.expr)
            Expr.internalBinaryWrite(message.expr, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* google.api.expr.v1beta1.SourceInfo source_info = 3; */
        if (message.sourceInfo)
            SourceInfo.internalBinaryWrite(message.sourceInfo, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* string syntax_version = 4; */
        if (message.syntaxVersion !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.syntaxVersion);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.expr.v1beta1.ParsedExpr
 */
export const ParsedExpr = new ParsedExpr$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Expr$Type extends MessageType<Expr> {
    constructor() {
        super("google.api.expr.v1beta1.Expr", [
            { no: 2, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "literal_expr", kind: "message", oneof: "exprKind", T: () => Literal },
            { no: 4, name: "ident_expr", kind: "message", oneof: "exprKind", T: () => Expr_Ident },
            { no: 5, name: "select_expr", kind: "message", oneof: "exprKind", T: () => Expr_Select },
            { no: 6, name: "call_expr", kind: "message", oneof: "exprKind", T: () => Expr_Call },
            { no: 7, name: "list_expr", kind: "message", oneof: "exprKind", T: () => Expr_CreateList },
            { no: 8, name: "struct_expr", kind: "message", oneof: "exprKind", T: () => Expr_CreateStruct },
            { no: 9, name: "comprehension_expr", kind: "message", oneof: "exprKind", T: () => Expr_Comprehension }
        ]);
    }
    create(value?: PartialMessage<Expr>): Expr {
        const message = { id: 0, exprKind: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Expr>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Expr): Expr {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 2:
                    message.id = reader.int32();
                    break;
                case /* google.api.expr.v1beta1.Literal literal_expr */ 3:
                    message.exprKind = {
                        oneofKind: "literalExpr",
                        literalExpr: Literal.internalBinaryRead(reader, reader.uint32(), options, (message.exprKind as any).literalExpr)
                    };
                    break;
                case /* google.api.expr.v1beta1.Expr.Ident ident_expr */ 4:
                    message.exprKind = {
                        oneofKind: "identExpr",
                        identExpr: Expr_Ident.internalBinaryRead(reader, reader.uint32(), options, (message.exprKind as any).identExpr)
                    };
                    break;
                case /* google.api.expr.v1beta1.Expr.Select select_expr */ 5:
                    message.exprKind = {
                        oneofKind: "selectExpr",
                        selectExpr: Expr_Select.internalBinaryRead(reader, reader.uint32(), options, (message.exprKind as any).selectExpr)
                    };
                    break;
                case /* google.api.expr.v1beta1.Expr.Call call_expr */ 6:
                    message.exprKind = {
                        oneofKind: "callExpr",
                        callExpr: Expr_Call.internalBinaryRead(reader, reader.uint32(), options, (message.exprKind as any).callExpr)
                    };
                    break;
                case /* google.api.expr.v1beta1.Expr.CreateList list_expr */ 7:
                    message.exprKind = {
                        oneofKind: "listExpr",
                        listExpr: Expr_CreateList.internalBinaryRead(reader, reader.uint32(), options, (message.exprKind as any).listExpr)
                    };
                    break;
                case /* google.api.expr.v1beta1.Expr.CreateStruct struct_expr */ 8:
                    message.exprKind = {
                        oneofKind: "structExpr",
                        structExpr: Expr_CreateStruct.internalBinaryRead(reader, reader.uint32(), options, (message.exprKind as any).structExpr)
                    };
                    break;
                case /* google.api.expr.v1beta1.Expr.Comprehension comprehension_expr */ 9:
                    message.exprKind = {
                        oneofKind: "comprehensionExpr",
                        comprehensionExpr: Expr_Comprehension.internalBinaryRead(reader, reader.uint32(), options, (message.exprKind as any).comprehensionExpr)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Expr, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 id = 2; */
        if (message.id !== 0)
            writer.tag(2, WireType.Varint).int32(message.id);
        /* google.api.expr.v1beta1.Literal literal_expr = 3; */
        if (message.exprKind.oneofKind === "literalExpr")
            Literal.internalBinaryWrite(message.exprKind.literalExpr, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* google.api.expr.v1beta1.Expr.Ident ident_expr = 4; */
        if (message.exprKind.oneofKind === "identExpr")
            Expr_Ident.internalBinaryWrite(message.exprKind.identExpr, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* google.api.expr.v1beta1.Expr.Select select_expr = 5; */
        if (message.exprKind.oneofKind === "selectExpr")
            Expr_Select.internalBinaryWrite(message.exprKind.selectExpr, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* google.api.expr.v1beta1.Expr.Call call_expr = 6; */
        if (message.exprKind.oneofKind === "callExpr")
            Expr_Call.internalBinaryWrite(message.exprKind.callExpr, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* google.api.expr.v1beta1.Expr.CreateList list_expr = 7; */
        if (message.exprKind.oneofKind === "listExpr")
            Expr_CreateList.internalBinaryWrite(message.exprKind.listExpr, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* google.api.expr.v1beta1.Expr.CreateStruct struct_expr = 8; */
        if (message.exprKind.oneofKind === "structExpr")
            Expr_CreateStruct.internalBinaryWrite(message.exprKind.structExpr, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* google.api.expr.v1beta1.Expr.Comprehension comprehension_expr = 9; */
        if (message.exprKind.oneofKind === "comprehensionExpr")
            Expr_Comprehension.internalBinaryWrite(message.exprKind.comprehensionExpr, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.expr.v1beta1.Expr
 */
export const Expr = new Expr$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Expr_Ident$Type extends MessageType<Expr_Ident> {
    constructor() {
        super("google.api.expr.v1beta1.Expr.Ident", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Expr_Ident>): Expr_Ident {
        const message = { name: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Expr_Ident>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Expr_Ident): Expr_Ident {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Expr_Ident, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.expr.v1beta1.Expr.Ident
 */
export const Expr_Ident = new Expr_Ident$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Expr_Select$Type extends MessageType<Expr_Select> {
    constructor() {
        super("google.api.expr.v1beta1.Expr.Select", [
            { no: 1, name: "operand", kind: "message", T: () => Expr },
            { no: 2, name: "field", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "test_only", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<Expr_Select>): Expr_Select {
        const message = { field: "", testOnly: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Expr_Select>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Expr_Select): Expr_Select {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.api.expr.v1beta1.Expr operand */ 1:
                    message.operand = Expr.internalBinaryRead(reader, reader.uint32(), options, message.operand);
                    break;
                case /* string field */ 2:
                    message.field = reader.string();
                    break;
                case /* bool test_only */ 3:
                    message.testOnly = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Expr_Select, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.api.expr.v1beta1.Expr operand = 1; */
        if (message.operand)
            Expr.internalBinaryWrite(message.operand, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string field = 2; */
        if (message.field !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.field);
        /* bool test_only = 3; */
        if (message.testOnly !== false)
            writer.tag(3, WireType.Varint).bool(message.testOnly);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.expr.v1beta1.Expr.Select
 */
export const Expr_Select = new Expr_Select$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Expr_Call$Type extends MessageType<Expr_Call> {
    constructor() {
        super("google.api.expr.v1beta1.Expr.Call", [
            { no: 1, name: "target", kind: "message", T: () => Expr },
            { no: 2, name: "function", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "args", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Expr }
        ]);
    }
    create(value?: PartialMessage<Expr_Call>): Expr_Call {
        const message = { function: "", args: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Expr_Call>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Expr_Call): Expr_Call {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.api.expr.v1beta1.Expr target */ 1:
                    message.target = Expr.internalBinaryRead(reader, reader.uint32(), options, message.target);
                    break;
                case /* string function */ 2:
                    message.function = reader.string();
                    break;
                case /* repeated google.api.expr.v1beta1.Expr args */ 3:
                    message.args.push(Expr.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Expr_Call, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.api.expr.v1beta1.Expr target = 1; */
        if (message.target)
            Expr.internalBinaryWrite(message.target, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string function = 2; */
        if (message.function !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.function);
        /* repeated google.api.expr.v1beta1.Expr args = 3; */
        for (let i = 0; i < message.args.length; i++)
            Expr.internalBinaryWrite(message.args[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.expr.v1beta1.Expr.Call
 */
export const Expr_Call = new Expr_Call$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Expr_CreateList$Type extends MessageType<Expr_CreateList> {
    constructor() {
        super("google.api.expr.v1beta1.Expr.CreateList", [
            { no: 1, name: "elements", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Expr }
        ]);
    }
    create(value?: PartialMessage<Expr_CreateList>): Expr_CreateList {
        const message = { elements: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Expr_CreateList>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Expr_CreateList): Expr_CreateList {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated google.api.expr.v1beta1.Expr elements */ 1:
                    message.elements.push(Expr.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Expr_CreateList, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated google.api.expr.v1beta1.Expr elements = 1; */
        for (let i = 0; i < message.elements.length; i++)
            Expr.internalBinaryWrite(message.elements[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.expr.v1beta1.Expr.CreateList
 */
export const Expr_CreateList = new Expr_CreateList$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Expr_CreateStruct$Type extends MessageType<Expr_CreateStruct> {
    constructor() {
        super("google.api.expr.v1beta1.Expr.CreateStruct", [
            { no: 1, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "entries", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Expr_CreateStruct_Entry }
        ]);
    }
    create(value?: PartialMessage<Expr_CreateStruct>): Expr_CreateStruct {
        const message = { type: "", entries: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Expr_CreateStruct>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Expr_CreateStruct): Expr_CreateStruct {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string type */ 1:
                    message.type = reader.string();
                    break;
                case /* repeated google.api.expr.v1beta1.Expr.CreateStruct.Entry entries */ 2:
                    message.entries.push(Expr_CreateStruct_Entry.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Expr_CreateStruct, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string type = 1; */
        if (message.type !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.type);
        /* repeated google.api.expr.v1beta1.Expr.CreateStruct.Entry entries = 2; */
        for (let i = 0; i < message.entries.length; i++)
            Expr_CreateStruct_Entry.internalBinaryWrite(message.entries[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.expr.v1beta1.Expr.CreateStruct
 */
export const Expr_CreateStruct = new Expr_CreateStruct$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Expr_CreateStruct_Entry$Type extends MessageType<Expr_CreateStruct_Entry> {
    constructor() {
        super("google.api.expr.v1beta1.Expr.CreateStruct.Entry", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "field_key", kind: "scalar", oneof: "keyKind", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "map_key", kind: "message", oneof: "keyKind", T: () => Expr },
            { no: 4, name: "value", kind: "message", T: () => Expr }
        ]);
    }
    create(value?: PartialMessage<Expr_CreateStruct_Entry>): Expr_CreateStruct_Entry {
        const message = { id: 0, keyKind: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Expr_CreateStruct_Entry>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Expr_CreateStruct_Entry): Expr_CreateStruct_Entry {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 1:
                    message.id = reader.int32();
                    break;
                case /* string field_key */ 2:
                    message.keyKind = {
                        oneofKind: "fieldKey",
                        fieldKey: reader.string()
                    };
                    break;
                case /* google.api.expr.v1beta1.Expr map_key */ 3:
                    message.keyKind = {
                        oneofKind: "mapKey",
                        mapKey: Expr.internalBinaryRead(reader, reader.uint32(), options, (message.keyKind as any).mapKey)
                    };
                    break;
                case /* google.api.expr.v1beta1.Expr value */ 4:
                    message.value = Expr.internalBinaryRead(reader, reader.uint32(), options, message.value);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Expr_CreateStruct_Entry, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int32(message.id);
        /* string field_key = 2; */
        if (message.keyKind.oneofKind === "fieldKey")
            writer.tag(2, WireType.LengthDelimited).string(message.keyKind.fieldKey);
        /* google.api.expr.v1beta1.Expr map_key = 3; */
        if (message.keyKind.oneofKind === "mapKey")
            Expr.internalBinaryWrite(message.keyKind.mapKey, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* google.api.expr.v1beta1.Expr value = 4; */
        if (message.value)
            Expr.internalBinaryWrite(message.value, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.expr.v1beta1.Expr.CreateStruct.Entry
 */
export const Expr_CreateStruct_Entry = new Expr_CreateStruct_Entry$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Expr_Comprehension$Type extends MessageType<Expr_Comprehension> {
    constructor() {
        super("google.api.expr.v1beta1.Expr.Comprehension", [
            { no: 1, name: "iter_var", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "iter_range", kind: "message", T: () => Expr },
            { no: 3, name: "accu_var", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "accu_init", kind: "message", T: () => Expr },
            { no: 5, name: "loop_condition", kind: "message", T: () => Expr },
            { no: 6, name: "loop_step", kind: "message", T: () => Expr },
            { no: 7, name: "result", kind: "message", T: () => Expr }
        ]);
    }
    create(value?: PartialMessage<Expr_Comprehension>): Expr_Comprehension {
        const message = { iterVar: "", accuVar: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Expr_Comprehension>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Expr_Comprehension): Expr_Comprehension {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string iter_var */ 1:
                    message.iterVar = reader.string();
                    break;
                case /* google.api.expr.v1beta1.Expr iter_range */ 2:
                    message.iterRange = Expr.internalBinaryRead(reader, reader.uint32(), options, message.iterRange);
                    break;
                case /* string accu_var */ 3:
                    message.accuVar = reader.string();
                    break;
                case /* google.api.expr.v1beta1.Expr accu_init */ 4:
                    message.accuInit = Expr.internalBinaryRead(reader, reader.uint32(), options, message.accuInit);
                    break;
                case /* google.api.expr.v1beta1.Expr loop_condition */ 5:
                    message.loopCondition = Expr.internalBinaryRead(reader, reader.uint32(), options, message.loopCondition);
                    break;
                case /* google.api.expr.v1beta1.Expr loop_step */ 6:
                    message.loopStep = Expr.internalBinaryRead(reader, reader.uint32(), options, message.loopStep);
                    break;
                case /* google.api.expr.v1beta1.Expr result */ 7:
                    message.result = Expr.internalBinaryRead(reader, reader.uint32(), options, message.result);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Expr_Comprehension, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string iter_var = 1; */
        if (message.iterVar !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.iterVar);
        /* google.api.expr.v1beta1.Expr iter_range = 2; */
        if (message.iterRange)
            Expr.internalBinaryWrite(message.iterRange, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string accu_var = 3; */
        if (message.accuVar !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.accuVar);
        /* google.api.expr.v1beta1.Expr accu_init = 4; */
        if (message.accuInit)
            Expr.internalBinaryWrite(message.accuInit, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* google.api.expr.v1beta1.Expr loop_condition = 5; */
        if (message.loopCondition)
            Expr.internalBinaryWrite(message.loopCondition, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* google.api.expr.v1beta1.Expr loop_step = 6; */
        if (message.loopStep)
            Expr.internalBinaryWrite(message.loopStep, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* google.api.expr.v1beta1.Expr result = 7; */
        if (message.result)
            Expr.internalBinaryWrite(message.result, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.expr.v1beta1.Expr.Comprehension
 */
export const Expr_Comprehension = new Expr_Comprehension$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Literal$Type extends MessageType<Literal> {
    constructor() {
        super("google.api.expr.v1beta1.Literal", [
            { no: 1, name: "null_value", kind: "enum", oneof: "constantKind", T: () => ["google.protobuf.NullValue", NullValue] },
            { no: 2, name: "bool_value", kind: "scalar", oneof: "constantKind", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "int64_value", kind: "scalar", oneof: "constantKind", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "uint64_value", kind: "scalar", oneof: "constantKind", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "double_value", kind: "scalar", oneof: "constantKind", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 6, name: "string_value", kind: "scalar", oneof: "constantKind", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "bytes_value", kind: "scalar", oneof: "constantKind", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<Literal>): Literal {
        const message = { constantKind: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Literal>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Literal): Literal {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.NullValue null_value */ 1:
                    message.constantKind = {
                        oneofKind: "nullValue",
                        nullValue: reader.int32()
                    };
                    break;
                case /* bool bool_value */ 2:
                    message.constantKind = {
                        oneofKind: "boolValue",
                        boolValue: reader.bool()
                    };
                    break;
                case /* int64 int64_value */ 3:
                    message.constantKind = {
                        oneofKind: "int64Value",
                        int64Value: reader.int64().toBigInt()
                    };
                    break;
                case /* uint64 uint64_value */ 4:
                    message.constantKind = {
                        oneofKind: "uint64Value",
                        uint64Value: reader.uint64().toBigInt()
                    };
                    break;
                case /* double double_value */ 5:
                    message.constantKind = {
                        oneofKind: "doubleValue",
                        doubleValue: reader.double()
                    };
                    break;
                case /* string string_value */ 6:
                    message.constantKind = {
                        oneofKind: "stringValue",
                        stringValue: reader.string()
                    };
                    break;
                case /* bytes bytes_value */ 7:
                    message.constantKind = {
                        oneofKind: "bytesValue",
                        bytesValue: reader.bytes()
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Literal, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.NullValue null_value = 1; */
        if (message.constantKind.oneofKind === "nullValue")
            writer.tag(1, WireType.Varint).int32(message.constantKind.nullValue);
        /* bool bool_value = 2; */
        if (message.constantKind.oneofKind === "boolValue")
            writer.tag(2, WireType.Varint).bool(message.constantKind.boolValue);
        /* int64 int64_value = 3; */
        if (message.constantKind.oneofKind === "int64Value")
            writer.tag(3, WireType.Varint).int64(message.constantKind.int64Value);
        /* uint64 uint64_value = 4; */
        if (message.constantKind.oneofKind === "uint64Value")
            writer.tag(4, WireType.Varint).uint64(message.constantKind.uint64Value);
        /* double double_value = 5; */
        if (message.constantKind.oneofKind === "doubleValue")
            writer.tag(5, WireType.Bit64).double(message.constantKind.doubleValue);
        /* string string_value = 6; */
        if (message.constantKind.oneofKind === "stringValue")
            writer.tag(6, WireType.LengthDelimited).string(message.constantKind.stringValue);
        /* bytes bytes_value = 7; */
        if (message.constantKind.oneofKind === "bytesValue")
            writer.tag(7, WireType.LengthDelimited).bytes(message.constantKind.bytesValue);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.expr.v1beta1.Literal
 */
export const Literal = new Literal$Type();
