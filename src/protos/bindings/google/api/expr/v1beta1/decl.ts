// @generated by protobuf-ts 2.8.1
// @generated from protobuf file "google/api/expr/v1beta1/decl.proto" (package "google.api.expr.v1beta1", syntax proto3)
// tslint:disable
//
// Copyright 2019 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Expr } from "./expr";
/**
 * A declaration.
 *
 * @generated from protobuf message google.api.expr.v1beta1.Decl
 */
export interface Decl {
    /**
     * The id of the declaration.
     *
     * @generated from protobuf field: int32 id = 1;
     */
    id: number;
    /**
     * The name of the declaration.
     *
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * The documentation string for the declaration.
     *
     * @generated from protobuf field: string doc = 3;
     */
    doc: string;
    /**
     * @generated from protobuf oneof: kind
     */
    kind: {
        oneofKind: "ident";
        /**
         * An identifier declaration.
         *
         * @generated from protobuf field: google.api.expr.v1beta1.IdentDecl ident = 4;
         */
        ident: IdentDecl;
    } | {
        oneofKind: "function";
        /**
         * A function declaration.
         *
         * @generated from protobuf field: google.api.expr.v1beta1.FunctionDecl function = 5;
         */
        function: FunctionDecl;
    } | {
        oneofKind: undefined;
    };
}
/**
 * The declared type of a variable.
 *
 * Extends runtime type values with extra information used for type checking
 * and dispatching.
 *
 * @generated from protobuf message google.api.expr.v1beta1.DeclType
 */
export interface DeclType {
    /**
     * The expression id of the declared type, if applicable.
     *
     * @generated from protobuf field: int32 id = 1;
     */
    id: number;
    /**
     * The type name, e.g. 'int', 'my.type.Type' or 'T'
     *
     * @generated from protobuf field: string type = 2;
     */
    type: string;
    /**
     * An ordered list of type parameters, e.g. `<string, int>`.
     * Only applies to a subset of types, e.g. `map`, `list`.
     *
     * @generated from protobuf field: repeated google.api.expr.v1beta1.DeclType type_params = 4;
     */
    typeParams: DeclType[];
}
/**
 * An identifier declaration.
 *
 * @generated from protobuf message google.api.expr.v1beta1.IdentDecl
 */
export interface IdentDecl {
    /**
     * Optional type of the identifier.
     *
     * @generated from protobuf field: google.api.expr.v1beta1.DeclType type = 3;
     */
    type?: DeclType;
    /**
     * Optional value of the identifier.
     *
     * @generated from protobuf field: google.api.expr.v1beta1.Expr value = 4;
     */
    value?: Expr;
}
/**
 * A function declaration.
 *
 * @generated from protobuf message google.api.expr.v1beta1.FunctionDecl
 */
export interface FunctionDecl {
    /**
     * The function arguments.
     *
     * @generated from protobuf field: repeated google.api.expr.v1beta1.IdentDecl args = 1;
     */
    args: IdentDecl[];
    /**
     * Optional declared return type.
     *
     * @generated from protobuf field: google.api.expr.v1beta1.DeclType return_type = 2;
     */
    returnType?: DeclType;
    /**
     * If the first argument of the function is the receiver.
     *
     * @generated from protobuf field: bool receiver_function = 3;
     */
    receiverFunction: boolean;
}
// @generated message type with reflection information, may provide speed optimized methods
class Decl$Type extends MessageType<Decl> {
    constructor() {
        super("google.api.expr.v1beta1.Decl", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "doc", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "ident", kind: "message", oneof: "kind", T: () => IdentDecl },
            { no: 5, name: "function", kind: "message", oneof: "kind", T: () => FunctionDecl }
        ]);
    }
    create(value?: PartialMessage<Decl>): Decl {
        const message = { id: 0, name: "", doc: "", kind: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Decl>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Decl): Decl {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 1:
                    message.id = reader.int32();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string doc */ 3:
                    message.doc = reader.string();
                    break;
                case /* google.api.expr.v1beta1.IdentDecl ident */ 4:
                    message.kind = {
                        oneofKind: "ident",
                        ident: IdentDecl.internalBinaryRead(reader, reader.uint32(), options, (message.kind as any).ident)
                    };
                    break;
                case /* google.api.expr.v1beta1.FunctionDecl function */ 5:
                    message.kind = {
                        oneofKind: "function",
                        function: FunctionDecl.internalBinaryRead(reader, reader.uint32(), options, (message.kind as any).function)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Decl, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int32(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string doc = 3; */
        if (message.doc !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.doc);
        /* google.api.expr.v1beta1.IdentDecl ident = 4; */
        if (message.kind.oneofKind === "ident")
            IdentDecl.internalBinaryWrite(message.kind.ident, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* google.api.expr.v1beta1.FunctionDecl function = 5; */
        if (message.kind.oneofKind === "function")
            FunctionDecl.internalBinaryWrite(message.kind.function, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.expr.v1beta1.Decl
 */
export const Decl = new Decl$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeclType$Type extends MessageType<DeclType> {
    constructor() {
        super("google.api.expr.v1beta1.DeclType", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "type_params", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => DeclType }
        ]);
    }
    create(value?: PartialMessage<DeclType>): DeclType {
        const message = { id: 0, type: "", typeParams: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DeclType>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeclType): DeclType {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 1:
                    message.id = reader.int32();
                    break;
                case /* string type */ 2:
                    message.type = reader.string();
                    break;
                case /* repeated google.api.expr.v1beta1.DeclType type_params */ 4:
                    message.typeParams.push(DeclType.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeclType, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int32(message.id);
        /* string type = 2; */
        if (message.type !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.type);
        /* repeated google.api.expr.v1beta1.DeclType type_params = 4; */
        for (let i = 0; i < message.typeParams.length; i++)
            DeclType.internalBinaryWrite(message.typeParams[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.expr.v1beta1.DeclType
 */
export const DeclType = new DeclType$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IdentDecl$Type extends MessageType<IdentDecl> {
    constructor() {
        super("google.api.expr.v1beta1.IdentDecl", [
            { no: 3, name: "type", kind: "message", T: () => DeclType },
            { no: 4, name: "value", kind: "message", T: () => Expr }
        ]);
    }
    create(value?: PartialMessage<IdentDecl>): IdentDecl {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<IdentDecl>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IdentDecl): IdentDecl {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.api.expr.v1beta1.DeclType type */ 3:
                    message.type = DeclType.internalBinaryRead(reader, reader.uint32(), options, message.type);
                    break;
                case /* google.api.expr.v1beta1.Expr value */ 4:
                    message.value = Expr.internalBinaryRead(reader, reader.uint32(), options, message.value);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IdentDecl, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.api.expr.v1beta1.DeclType type = 3; */
        if (message.type)
            DeclType.internalBinaryWrite(message.type, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* google.api.expr.v1beta1.Expr value = 4; */
        if (message.value)
            Expr.internalBinaryWrite(message.value, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.expr.v1beta1.IdentDecl
 */
export const IdentDecl = new IdentDecl$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FunctionDecl$Type extends MessageType<FunctionDecl> {
    constructor() {
        super("google.api.expr.v1beta1.FunctionDecl", [
            { no: 1, name: "args", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => IdentDecl },
            { no: 2, name: "return_type", kind: "message", T: () => DeclType },
            { no: 3, name: "receiver_function", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<FunctionDecl>): FunctionDecl {
        const message = { args: [], receiverFunction: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FunctionDecl>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FunctionDecl): FunctionDecl {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated google.api.expr.v1beta1.IdentDecl args */ 1:
                    message.args.push(IdentDecl.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* google.api.expr.v1beta1.DeclType return_type */ 2:
                    message.returnType = DeclType.internalBinaryRead(reader, reader.uint32(), options, message.returnType);
                    break;
                case /* bool receiver_function */ 3:
                    message.receiverFunction = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FunctionDecl, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated google.api.expr.v1beta1.IdentDecl args = 1; */
        for (let i = 0; i < message.args.length; i++)
            IdentDecl.internalBinaryWrite(message.args[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* google.api.expr.v1beta1.DeclType return_type = 2; */
        if (message.returnType)
            DeclType.internalBinaryWrite(message.returnType, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* bool receiver_function = 3; */
        if (message.receiverFunction !== false)
            writer.tag(3, WireType.Varint).bool(message.receiverFunction);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.expr.v1beta1.FunctionDecl
 */
export const FunctionDecl = new FunctionDecl$Type();
