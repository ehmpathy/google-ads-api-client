// @generated by protobuf-ts 2.8.1
// @generated from protobuf file "google/api/billing.proto" (package "google.api", syntax proto3)
// tslint:disable
//
// Copyright 2015 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * Billing related configuration of the service.
 *
 * The following example shows how to configure monitored resources and metrics
 * for billing, `consumer_destinations` is the only supported destination and
 * the monitored resources need at least one label key
 * `cloud.googleapis.com/location` to indicate the location of the billing
 * usage, using different monitored resources between monitoring and billing is
 * recommended so they can be evolved independently:
 *
 *
 *     monitored_resources:
 *     - type: library.googleapis.com/billing_branch
 *       labels:
 *       - key: cloud.googleapis.com/location
 *         description: |
 *           Predefined label to support billing location restriction.
 *       - key: city
 *         description: |
 *           Custom label to define the city where the library branch is located
 *           in.
 *       - key: name
 *         description: Custom label to define the name of the library branch.
 *     metrics:
 *     - name: library.googleapis.com/book/borrowed_count
 *       metric_kind: DELTA
 *       value_type: INT64
 *       unit: "1"
 *     billing:
 *       consumer_destinations:
 *       - monitored_resource: library.googleapis.com/billing_branch
 *         metrics:
 *         - library.googleapis.com/book/borrowed_count
 *
 * @generated from protobuf message google.api.Billing
 */
export interface Billing {
    /**
     * Billing configurations for sending metrics to the consumer project.
     * There can be multiple consumer destinations per service, each one must have
     * a different monitored resource type. A metric can be used in at most
     * one consumer destination.
     *
     * @generated from protobuf field: repeated google.api.Billing.BillingDestination consumer_destinations = 8;
     */
    consumerDestinations: Billing_BillingDestination[];
}
/**
 * Configuration of a specific billing destination (Currently only support
 * bill against consumer project).
 *
 * @generated from protobuf message google.api.Billing.BillingDestination
 */
export interface Billing_BillingDestination {
    /**
     * The monitored resource type. The type must be defined in
     * [Service.monitored_resources][google.api.Service.monitored_resources] section.
     *
     * @generated from protobuf field: string monitored_resource = 1;
     */
    monitoredResource: string;
    /**
     * Names of the metrics to report to this billing destination.
     * Each name must be defined in [Service.metrics][google.api.Service.metrics] section.
     *
     * @generated from protobuf field: repeated string metrics = 2;
     */
    metrics: string[];
}
// @generated message type with reflection information, may provide speed optimized methods
class Billing$Type extends MessageType<Billing> {
    constructor() {
        super("google.api.Billing", [
            { no: 8, name: "consumer_destinations", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Billing_BillingDestination }
        ]);
    }
    create(value?: PartialMessage<Billing>): Billing {
        const message = { consumerDestinations: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Billing>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Billing): Billing {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated google.api.Billing.BillingDestination consumer_destinations */ 8:
                    message.consumerDestinations.push(Billing_BillingDestination.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Billing, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated google.api.Billing.BillingDestination consumer_destinations = 8; */
        for (let i = 0; i < message.consumerDestinations.length; i++)
            Billing_BillingDestination.internalBinaryWrite(message.consumerDestinations[i], writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.Billing
 */
export const Billing = new Billing$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Billing_BillingDestination$Type extends MessageType<Billing_BillingDestination> {
    constructor() {
        super("google.api.Billing.BillingDestination", [
            { no: 1, name: "monitored_resource", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "metrics", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Billing_BillingDestination>): Billing_BillingDestination {
        const message = { monitoredResource: "", metrics: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Billing_BillingDestination>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Billing_BillingDestination): Billing_BillingDestination {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string monitored_resource */ 1:
                    message.monitoredResource = reader.string();
                    break;
                case /* repeated string metrics */ 2:
                    message.metrics.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Billing_BillingDestination, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string monitored_resource = 1; */
        if (message.monitoredResource !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.monitoredResource);
        /* repeated string metrics = 2; */
        for (let i = 0; i < message.metrics.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.metrics[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.Billing.BillingDestination
 */
export const Billing_BillingDestination = new Billing_BillingDestination$Type();
