// @generated by protobuf-ts 2.8.1
// @generated from protobuf file "google/api/servicemanagement/v1/servicemanager.proto" (package "google.api.servicemanagement.v1", syntax proto3)
// tslint:disable
//
// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import { Operation } from "../../../longrunning/operations";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Diagnostic } from "./resources";
import { ChangeReport } from "./resources";
import { Any } from "../../../protobuf/any";
import { Rollout } from "./resources";
import { ConfigSource } from "./resources";
import { Service } from "../../service";
import { ManagedService } from "./resources";
/**
 * Request message for `ListServices` method.
 *
 * @generated from protobuf message google.api.servicemanagement.v1.ListServicesRequest
 */
export interface ListServicesRequest {
    /**
     * Include services produced by the specified project.
     *
     * @generated from protobuf field: string producer_project_id = 1;
     */
    producerProjectId: string;
    /**
     * The max number of items to include in the response list. Page size is 50
     * if not specified. Maximum value is 100.
     *
     * @generated from protobuf field: int32 page_size = 5;
     */
    pageSize: number;
    /**
     * Token identifying which result to start with; returned by a previous list
     * call.
     *
     * @generated from protobuf field: string page_token = 6;
     */
    pageToken: string;
    /**
     * Include services consumed by the specified consumer.
     *
     * The Google Service Management implementation accepts the following
     * forms:
     * - project:<project_id>
     *
     * @deprecated
     * @generated from protobuf field: string consumer_id = 7 [deprecated = true];
     */
    consumerId: string;
}
/**
 * Response message for `ListServices` method.
 *
 * @generated from protobuf message google.api.servicemanagement.v1.ListServicesResponse
 */
export interface ListServicesResponse {
    /**
     * The returned services will only have the name field set.
     *
     * @generated from protobuf field: repeated google.api.servicemanagement.v1.ManagedService services = 1;
     */
    services: ManagedService[];
    /**
     * Token that can be passed to `ListServices` to resume a paginated query.
     *
     * @generated from protobuf field: string next_page_token = 2;
     */
    nextPageToken: string;
}
/**
 * Request message for `GetService` method.
 *
 * @generated from protobuf message google.api.servicemanagement.v1.GetServiceRequest
 */
export interface GetServiceRequest {
    /**
     * Required. The name of the service.  See the `ServiceManager` overview for
     * naming requirements.  For example: `example.googleapis.com`.
     *
     * @generated from protobuf field: string service_name = 1;
     */
    serviceName: string;
}
/**
 * Request message for CreateService method.
 *
 * @generated from protobuf message google.api.servicemanagement.v1.CreateServiceRequest
 */
export interface CreateServiceRequest {
    /**
     * Required. Initial values for the service resource.
     *
     * @generated from protobuf field: google.api.servicemanagement.v1.ManagedService service = 1;
     */
    service?: ManagedService;
}
/**
 * Request message for DeleteService method.
 *
 * @generated from protobuf message google.api.servicemanagement.v1.DeleteServiceRequest
 */
export interface DeleteServiceRequest {
    /**
     * Required. The name of the service.  See the
     * [overview](https://cloud.google.com/service-infrastructure/docs/overview) for naming requirements.  For
     * example: `example.googleapis.com`.
     *
     * @generated from protobuf field: string service_name = 1;
     */
    serviceName: string;
}
/**
 * Request message for UndeleteService method.
 *
 * @generated from protobuf message google.api.servicemanagement.v1.UndeleteServiceRequest
 */
export interface UndeleteServiceRequest {
    /**
     * Required. The name of the service. See the
     * [overview](https://cloud.google.com/service-infrastructure/docs/overview) for naming requirements. For
     * example: `example.googleapis.com`.
     *
     * @generated from protobuf field: string service_name = 1;
     */
    serviceName: string;
}
/**
 * Response message for UndeleteService method.
 *
 * @generated from protobuf message google.api.servicemanagement.v1.UndeleteServiceResponse
 */
export interface UndeleteServiceResponse {
    /**
     * Revived service resource.
     *
     * @generated from protobuf field: google.api.servicemanagement.v1.ManagedService service = 1;
     */
    service?: ManagedService;
}
/**
 * Request message for GetServiceConfig method.
 *
 * @generated from protobuf message google.api.servicemanagement.v1.GetServiceConfigRequest
 */
export interface GetServiceConfigRequest {
    /**
     * Required. The name of the service.  See the
     * [overview](https://cloud.google.com/service-infrastructure/docs/overview) for naming requirements.  For
     * example: `example.googleapis.com`.
     *
     * @generated from protobuf field: string service_name = 1;
     */
    serviceName: string;
    /**
     * Required. The id of the service configuration resource.
     *
     * This field must be specified for the server to return all fields, including
     * `SourceInfo`.
     *
     * @generated from protobuf field: string config_id = 2;
     */
    configId: string;
    /**
     * Specifies which parts of the Service Config should be returned in the
     * response.
     *
     * @generated from protobuf field: google.api.servicemanagement.v1.GetServiceConfigRequest.ConfigView view = 3;
     */
    view: GetServiceConfigRequest_ConfigView;
}
/**
 * @generated from protobuf enum google.api.servicemanagement.v1.GetServiceConfigRequest.ConfigView
 */
export enum GetServiceConfigRequest_ConfigView {
    /**
     * Server response includes all fields except SourceInfo.
     *
     * @generated from protobuf enum value: BASIC = 0;
     */
    BASIC = 0,
    /**
     * Server response includes all fields including SourceInfo.
     * SourceFiles are of type 'google.api.servicemanagement.v1.ConfigFile'
     * and are only available for configs created using the
     * SubmitConfigSource method.
     *
     * @generated from protobuf enum value: FULL = 1;
     */
    FULL = 1
}
/**
 * Request message for ListServiceConfigs method.
 *
 * @generated from protobuf message google.api.servicemanagement.v1.ListServiceConfigsRequest
 */
export interface ListServiceConfigsRequest {
    /**
     * Required. The name of the service.  See the
     * [overview](https://cloud.google.com/service-infrastructure/docs/overview) for naming requirements.  For
     * example: `example.googleapis.com`.
     *
     * @generated from protobuf field: string service_name = 1;
     */
    serviceName: string;
    /**
     * The token of the page to retrieve.
     *
     * @generated from protobuf field: string page_token = 2;
     */
    pageToken: string;
    /**
     * The max number of items to include in the response list. Page size is 50
     * if not specified. Maximum value is 100.
     *
     * @generated from protobuf field: int32 page_size = 3;
     */
    pageSize: number;
}
/**
 * Response message for ListServiceConfigs method.
 *
 * @generated from protobuf message google.api.servicemanagement.v1.ListServiceConfigsResponse
 */
export interface ListServiceConfigsResponse {
    /**
     * The list of service configuration resources.
     *
     * @generated from protobuf field: repeated google.api.Service service_configs = 1;
     */
    serviceConfigs: Service[];
    /**
     * The token of the next page of results.
     *
     * @generated from protobuf field: string next_page_token = 2;
     */
    nextPageToken: string;
}
/**
 * Request message for CreateServiceConfig method.
 *
 * @generated from protobuf message google.api.servicemanagement.v1.CreateServiceConfigRequest
 */
export interface CreateServiceConfigRequest {
    /**
     * Required. The name of the service.  See the
     * [overview](https://cloud.google.com/service-infrastructure/docs/overview) for naming requirements.  For
     * example: `example.googleapis.com`.
     *
     * @generated from protobuf field: string service_name = 1;
     */
    serviceName: string;
    /**
     * Required. The service configuration resource.
     *
     * @generated from protobuf field: google.api.Service service_config = 2;
     */
    serviceConfig?: Service;
}
/**
 * Request message for SubmitConfigSource method.
 *
 * @generated from protobuf message google.api.servicemanagement.v1.SubmitConfigSourceRequest
 */
export interface SubmitConfigSourceRequest {
    /**
     * Required. The name of the service.  See the
     * [overview](https://cloud.google.com/service-infrastructure/docs/overview) for naming requirements.  For
     * example: `example.googleapis.com`.
     *
     * @generated from protobuf field: string service_name = 1;
     */
    serviceName: string;
    /**
     * Required. The source configuration for the service.
     *
     * @generated from protobuf field: google.api.servicemanagement.v1.ConfigSource config_source = 2;
     */
    configSource?: ConfigSource;
    /**
     * Optional. If set, this will result in the generation of a
     * `google.api.Service` configuration based on the `ConfigSource` provided,
     * but the generated config and the sources will NOT be persisted.
     *
     * @generated from protobuf field: bool validate_only = 3;
     */
    validateOnly: boolean;
}
/**
 * Response message for SubmitConfigSource method.
 *
 * @generated from protobuf message google.api.servicemanagement.v1.SubmitConfigSourceResponse
 */
export interface SubmitConfigSourceResponse {
    /**
     * The generated service configuration.
     *
     * @generated from protobuf field: google.api.Service service_config = 1;
     */
    serviceConfig?: Service;
}
/**
 * Request message for 'CreateServiceRollout'
 *
 * @generated from protobuf message google.api.servicemanagement.v1.CreateServiceRolloutRequest
 */
export interface CreateServiceRolloutRequest {
    /**
     * Required. The name of the service.  See the
     * [overview](https://cloud.google.com/service-infrastructure/docs/overview) for naming requirements.  For
     * example: `example.googleapis.com`.
     *
     * @generated from protobuf field: string service_name = 1;
     */
    serviceName: string;
    /**
     * Required. The rollout resource. The `service_name` field is output only.
     *
     * @generated from protobuf field: google.api.servicemanagement.v1.Rollout rollout = 2;
     */
    rollout?: Rollout;
}
/**
 * Request message for 'ListServiceRollouts'
 *
 * @generated from protobuf message google.api.servicemanagement.v1.ListServiceRolloutsRequest
 */
export interface ListServiceRolloutsRequest {
    /**
     * Required. The name of the service.  See the
     * [overview](https://cloud.google.com/service-infrastructure/docs/overview) for naming requirements.  For
     * example: `example.googleapis.com`.
     *
     * @generated from protobuf field: string service_name = 1;
     */
    serviceName: string;
    /**
     * The token of the page to retrieve.
     *
     * @generated from protobuf field: string page_token = 2;
     */
    pageToken: string;
    /**
     * The max number of items to include in the response list. Page size is 50
     * if not specified. Maximum value is 100.
     *
     * @generated from protobuf field: int32 page_size = 3;
     */
    pageSize: number;
    /**
     * Required. Use `filter` to return subset of rollouts.
     * The following filters are supported:
     *   -- To limit the results to only those in
     *      status (google.api.servicemanagement.v1.RolloutStatus) 'SUCCESS',
     *      use filter='status=SUCCESS'
     *   -- To limit the results to those in
     *      status (google.api.servicemanagement.v1.RolloutStatus) 'CANCELLED'
     *      or 'FAILED', use filter='status=CANCELLED OR status=FAILED'
     *
     * @generated from protobuf field: string filter = 4;
     */
    filter: string;
}
/**
 * Response message for ListServiceRollouts method.
 *
 * @generated from protobuf message google.api.servicemanagement.v1.ListServiceRolloutsResponse
 */
export interface ListServiceRolloutsResponse {
    /**
     * The list of rollout resources.
     *
     * @generated from protobuf field: repeated google.api.servicemanagement.v1.Rollout rollouts = 1;
     */
    rollouts: Rollout[];
    /**
     * The token of the next page of results.
     *
     * @generated from protobuf field: string next_page_token = 2;
     */
    nextPageToken: string;
}
/**
 * Request message for GetServiceRollout method.
 *
 * @generated from protobuf message google.api.servicemanagement.v1.GetServiceRolloutRequest
 */
export interface GetServiceRolloutRequest {
    /**
     * Required. The name of the service.  See the
     * [overview](https://cloud.google.com/service-infrastructure/docs/overview) for naming requirements.  For
     * example: `example.googleapis.com`.
     *
     * @generated from protobuf field: string service_name = 1;
     */
    serviceName: string;
    /**
     * Required. The id of the rollout resource.
     *
     * @generated from protobuf field: string rollout_id = 2;
     */
    rolloutId: string;
}
/**
 * Request message for GenerateConfigReport method.
 *
 * @generated from protobuf message google.api.servicemanagement.v1.GenerateConfigReportRequest
 */
export interface GenerateConfigReportRequest {
    /**
     * Required. Service configuration for which we want to generate the report.
     * For this version of API, the supported types are
     * [google.api.servicemanagement.v1.ConfigRef][google.api.servicemanagement.v1.ConfigRef],
     * [google.api.servicemanagement.v1.ConfigSource][google.api.servicemanagement.v1.ConfigSource],
     * and [google.api.Service][google.api.Service]
     *
     * @generated from protobuf field: google.protobuf.Any new_config = 1;
     */
    newConfig?: Any;
    /**
     * Optional. Service configuration against which the comparison will be done.
     * For this version of API, the supported types are
     * [google.api.servicemanagement.v1.ConfigRef][google.api.servicemanagement.v1.ConfigRef],
     * [google.api.servicemanagement.v1.ConfigSource][google.api.servicemanagement.v1.ConfigSource],
     * and [google.api.Service][google.api.Service]
     *
     * @generated from protobuf field: google.protobuf.Any old_config = 2;
     */
    oldConfig?: Any;
}
/**
 * Response message for GenerateConfigReport method.
 *
 * @generated from protobuf message google.api.servicemanagement.v1.GenerateConfigReportResponse
 */
export interface GenerateConfigReportResponse {
    /**
     * Name of the service this report belongs to.
     *
     * @generated from protobuf field: string service_name = 1;
     */
    serviceName: string;
    /**
     * ID of the service configuration this report belongs to.
     *
     * @generated from protobuf field: string id = 2;
     */
    id: string;
    /**
     * list of ChangeReport, each corresponding to comparison between two
     * service configurations.
     *
     * @generated from protobuf field: repeated google.api.servicemanagement.v1.ChangeReport change_reports = 3;
     */
    changeReports: ChangeReport[];
    /**
     * Errors / Linter warnings associated with the service definition this
     * report
     * belongs to.
     *
     * @generated from protobuf field: repeated google.api.servicemanagement.v1.Diagnostic diagnostics = 4;
     */
    diagnostics: Diagnostic[];
}
// @generated message type with reflection information, may provide speed optimized methods
class ListServicesRequest$Type extends MessageType<ListServicesRequest> {
    constructor() {
        super("google.api.servicemanagement.v1.ListServicesRequest", [
            { no: 1, name: "producer_project_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "page_size", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "page_token", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "consumer_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ListServicesRequest>): ListServicesRequest {
        const message = { producerProjectId: "", pageSize: 0, pageToken: "", consumerId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListServicesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListServicesRequest): ListServicesRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string producer_project_id */ 1:
                    message.producerProjectId = reader.string();
                    break;
                case /* int32 page_size */ 5:
                    message.pageSize = reader.int32();
                    break;
                case /* string page_token */ 6:
                    message.pageToken = reader.string();
                    break;
                case /* string consumer_id = 7 [deprecated = true];*/ 7:
                    message.consumerId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListServicesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string producer_project_id = 1; */
        if (message.producerProjectId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.producerProjectId);
        /* int32 page_size = 5; */
        if (message.pageSize !== 0)
            writer.tag(5, WireType.Varint).int32(message.pageSize);
        /* string page_token = 6; */
        if (message.pageToken !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.pageToken);
        /* string consumer_id = 7 [deprecated = true]; */
        if (message.consumerId !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.consumerId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.servicemanagement.v1.ListServicesRequest
 */
export const ListServicesRequest = new ListServicesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListServicesResponse$Type extends MessageType<ListServicesResponse> {
    constructor() {
        super("google.api.servicemanagement.v1.ListServicesResponse", [
            { no: 1, name: "services", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ManagedService },
            { no: 2, name: "next_page_token", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ListServicesResponse>): ListServicesResponse {
        const message = { services: [], nextPageToken: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListServicesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListServicesResponse): ListServicesResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated google.api.servicemanagement.v1.ManagedService services */ 1:
                    message.services.push(ManagedService.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string next_page_token */ 2:
                    message.nextPageToken = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListServicesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated google.api.servicemanagement.v1.ManagedService services = 1; */
        for (let i = 0; i < message.services.length; i++)
            ManagedService.internalBinaryWrite(message.services[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string next_page_token = 2; */
        if (message.nextPageToken !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.nextPageToken);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.servicemanagement.v1.ListServicesResponse
 */
export const ListServicesResponse = new ListServicesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetServiceRequest$Type extends MessageType<GetServiceRequest> {
    constructor() {
        super("google.api.servicemanagement.v1.GetServiceRequest", [
            { no: 1, name: "service_name", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "google.api.field_behavior": ["REQUIRED"] } }
        ]);
    }
    create(value?: PartialMessage<GetServiceRequest>): GetServiceRequest {
        const message = { serviceName: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetServiceRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetServiceRequest): GetServiceRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string service_name */ 1:
                    message.serviceName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetServiceRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string service_name = 1; */
        if (message.serviceName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.serviceName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.servicemanagement.v1.GetServiceRequest
 */
export const GetServiceRequest = new GetServiceRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateServiceRequest$Type extends MessageType<CreateServiceRequest> {
    constructor() {
        super("google.api.servicemanagement.v1.CreateServiceRequest", [
            { no: 1, name: "service", kind: "message", T: () => ManagedService, options: { "google.api.field_behavior": ["REQUIRED"] } }
        ]);
    }
    create(value?: PartialMessage<CreateServiceRequest>): CreateServiceRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateServiceRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateServiceRequest): CreateServiceRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.api.servicemanagement.v1.ManagedService service */ 1:
                    message.service = ManagedService.internalBinaryRead(reader, reader.uint32(), options, message.service);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateServiceRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.api.servicemanagement.v1.ManagedService service = 1; */
        if (message.service)
            ManagedService.internalBinaryWrite(message.service, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.servicemanagement.v1.CreateServiceRequest
 */
export const CreateServiceRequest = new CreateServiceRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteServiceRequest$Type extends MessageType<DeleteServiceRequest> {
    constructor() {
        super("google.api.servicemanagement.v1.DeleteServiceRequest", [
            { no: 1, name: "service_name", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "google.api.field_behavior": ["REQUIRED"] } }
        ]);
    }
    create(value?: PartialMessage<DeleteServiceRequest>): DeleteServiceRequest {
        const message = { serviceName: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DeleteServiceRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteServiceRequest): DeleteServiceRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string service_name */ 1:
                    message.serviceName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteServiceRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string service_name = 1; */
        if (message.serviceName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.serviceName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.servicemanagement.v1.DeleteServiceRequest
 */
export const DeleteServiceRequest = new DeleteServiceRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UndeleteServiceRequest$Type extends MessageType<UndeleteServiceRequest> {
    constructor() {
        super("google.api.servicemanagement.v1.UndeleteServiceRequest", [
            { no: 1, name: "service_name", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "google.api.field_behavior": ["REQUIRED"] } }
        ]);
    }
    create(value?: PartialMessage<UndeleteServiceRequest>): UndeleteServiceRequest {
        const message = { serviceName: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UndeleteServiceRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UndeleteServiceRequest): UndeleteServiceRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string service_name */ 1:
                    message.serviceName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UndeleteServiceRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string service_name = 1; */
        if (message.serviceName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.serviceName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.servicemanagement.v1.UndeleteServiceRequest
 */
export const UndeleteServiceRequest = new UndeleteServiceRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UndeleteServiceResponse$Type extends MessageType<UndeleteServiceResponse> {
    constructor() {
        super("google.api.servicemanagement.v1.UndeleteServiceResponse", [
            { no: 1, name: "service", kind: "message", T: () => ManagedService }
        ]);
    }
    create(value?: PartialMessage<UndeleteServiceResponse>): UndeleteServiceResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UndeleteServiceResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UndeleteServiceResponse): UndeleteServiceResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.api.servicemanagement.v1.ManagedService service */ 1:
                    message.service = ManagedService.internalBinaryRead(reader, reader.uint32(), options, message.service);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UndeleteServiceResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.api.servicemanagement.v1.ManagedService service = 1; */
        if (message.service)
            ManagedService.internalBinaryWrite(message.service, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.servicemanagement.v1.UndeleteServiceResponse
 */
export const UndeleteServiceResponse = new UndeleteServiceResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetServiceConfigRequest$Type extends MessageType<GetServiceConfigRequest> {
    constructor() {
        super("google.api.servicemanagement.v1.GetServiceConfigRequest", [
            { no: 1, name: "service_name", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "google.api.field_behavior": ["REQUIRED"] } },
            { no: 2, name: "config_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "google.api.field_behavior": ["REQUIRED"] } },
            { no: 3, name: "view", kind: "enum", T: () => ["google.api.servicemanagement.v1.GetServiceConfigRequest.ConfigView", GetServiceConfigRequest_ConfigView] }
        ]);
    }
    create(value?: PartialMessage<GetServiceConfigRequest>): GetServiceConfigRequest {
        const message = { serviceName: "", configId: "", view: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetServiceConfigRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetServiceConfigRequest): GetServiceConfigRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string service_name */ 1:
                    message.serviceName = reader.string();
                    break;
                case /* string config_id */ 2:
                    message.configId = reader.string();
                    break;
                case /* google.api.servicemanagement.v1.GetServiceConfigRequest.ConfigView view */ 3:
                    message.view = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetServiceConfigRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string service_name = 1; */
        if (message.serviceName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.serviceName);
        /* string config_id = 2; */
        if (message.configId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.configId);
        /* google.api.servicemanagement.v1.GetServiceConfigRequest.ConfigView view = 3; */
        if (message.view !== 0)
            writer.tag(3, WireType.Varint).int32(message.view);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.servicemanagement.v1.GetServiceConfigRequest
 */
export const GetServiceConfigRequest = new GetServiceConfigRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListServiceConfigsRequest$Type extends MessageType<ListServiceConfigsRequest> {
    constructor() {
        super("google.api.servicemanagement.v1.ListServiceConfigsRequest", [
            { no: 1, name: "service_name", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "google.api.field_behavior": ["REQUIRED"] } },
            { no: 2, name: "page_token", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "page_size", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ListServiceConfigsRequest>): ListServiceConfigsRequest {
        const message = { serviceName: "", pageToken: "", pageSize: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListServiceConfigsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListServiceConfigsRequest): ListServiceConfigsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string service_name */ 1:
                    message.serviceName = reader.string();
                    break;
                case /* string page_token */ 2:
                    message.pageToken = reader.string();
                    break;
                case /* int32 page_size */ 3:
                    message.pageSize = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListServiceConfigsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string service_name = 1; */
        if (message.serviceName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.serviceName);
        /* string page_token = 2; */
        if (message.pageToken !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.pageToken);
        /* int32 page_size = 3; */
        if (message.pageSize !== 0)
            writer.tag(3, WireType.Varint).int32(message.pageSize);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.servicemanagement.v1.ListServiceConfigsRequest
 */
export const ListServiceConfigsRequest = new ListServiceConfigsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListServiceConfigsResponse$Type extends MessageType<ListServiceConfigsResponse> {
    constructor() {
        super("google.api.servicemanagement.v1.ListServiceConfigsResponse", [
            { no: 1, name: "service_configs", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Service },
            { no: 2, name: "next_page_token", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ListServiceConfigsResponse>): ListServiceConfigsResponse {
        const message = { serviceConfigs: [], nextPageToken: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListServiceConfigsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListServiceConfigsResponse): ListServiceConfigsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated google.api.Service service_configs */ 1:
                    message.serviceConfigs.push(Service.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string next_page_token */ 2:
                    message.nextPageToken = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListServiceConfigsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated google.api.Service service_configs = 1; */
        for (let i = 0; i < message.serviceConfigs.length; i++)
            Service.internalBinaryWrite(message.serviceConfigs[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string next_page_token = 2; */
        if (message.nextPageToken !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.nextPageToken);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.servicemanagement.v1.ListServiceConfigsResponse
 */
export const ListServiceConfigsResponse = new ListServiceConfigsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateServiceConfigRequest$Type extends MessageType<CreateServiceConfigRequest> {
    constructor() {
        super("google.api.servicemanagement.v1.CreateServiceConfigRequest", [
            { no: 1, name: "service_name", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "google.api.field_behavior": ["REQUIRED"] } },
            { no: 2, name: "service_config", kind: "message", T: () => Service, options: { "google.api.field_behavior": ["REQUIRED"] } }
        ]);
    }
    create(value?: PartialMessage<CreateServiceConfigRequest>): CreateServiceConfigRequest {
        const message = { serviceName: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateServiceConfigRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateServiceConfigRequest): CreateServiceConfigRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string service_name */ 1:
                    message.serviceName = reader.string();
                    break;
                case /* google.api.Service service_config */ 2:
                    message.serviceConfig = Service.internalBinaryRead(reader, reader.uint32(), options, message.serviceConfig);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateServiceConfigRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string service_name = 1; */
        if (message.serviceName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.serviceName);
        /* google.api.Service service_config = 2; */
        if (message.serviceConfig)
            Service.internalBinaryWrite(message.serviceConfig, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.servicemanagement.v1.CreateServiceConfigRequest
 */
export const CreateServiceConfigRequest = new CreateServiceConfigRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SubmitConfigSourceRequest$Type extends MessageType<SubmitConfigSourceRequest> {
    constructor() {
        super("google.api.servicemanagement.v1.SubmitConfigSourceRequest", [
            { no: 1, name: "service_name", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "google.api.field_behavior": ["REQUIRED"] } },
            { no: 2, name: "config_source", kind: "message", T: () => ConfigSource, options: { "google.api.field_behavior": ["REQUIRED"] } },
            { no: 3, name: "validate_only", kind: "scalar", T: 8 /*ScalarType.BOOL*/, options: { "google.api.field_behavior": ["OPTIONAL"] } }
        ]);
    }
    create(value?: PartialMessage<SubmitConfigSourceRequest>): SubmitConfigSourceRequest {
        const message = { serviceName: "", validateOnly: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SubmitConfigSourceRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubmitConfigSourceRequest): SubmitConfigSourceRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string service_name */ 1:
                    message.serviceName = reader.string();
                    break;
                case /* google.api.servicemanagement.v1.ConfigSource config_source */ 2:
                    message.configSource = ConfigSource.internalBinaryRead(reader, reader.uint32(), options, message.configSource);
                    break;
                case /* bool validate_only */ 3:
                    message.validateOnly = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SubmitConfigSourceRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string service_name = 1; */
        if (message.serviceName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.serviceName);
        /* google.api.servicemanagement.v1.ConfigSource config_source = 2; */
        if (message.configSource)
            ConfigSource.internalBinaryWrite(message.configSource, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* bool validate_only = 3; */
        if (message.validateOnly !== false)
            writer.tag(3, WireType.Varint).bool(message.validateOnly);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.servicemanagement.v1.SubmitConfigSourceRequest
 */
export const SubmitConfigSourceRequest = new SubmitConfigSourceRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SubmitConfigSourceResponse$Type extends MessageType<SubmitConfigSourceResponse> {
    constructor() {
        super("google.api.servicemanagement.v1.SubmitConfigSourceResponse", [
            { no: 1, name: "service_config", kind: "message", T: () => Service }
        ]);
    }
    create(value?: PartialMessage<SubmitConfigSourceResponse>): SubmitConfigSourceResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SubmitConfigSourceResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubmitConfigSourceResponse): SubmitConfigSourceResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.api.Service service_config */ 1:
                    message.serviceConfig = Service.internalBinaryRead(reader, reader.uint32(), options, message.serviceConfig);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SubmitConfigSourceResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.api.Service service_config = 1; */
        if (message.serviceConfig)
            Service.internalBinaryWrite(message.serviceConfig, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.servicemanagement.v1.SubmitConfigSourceResponse
 */
export const SubmitConfigSourceResponse = new SubmitConfigSourceResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateServiceRolloutRequest$Type extends MessageType<CreateServiceRolloutRequest> {
    constructor() {
        super("google.api.servicemanagement.v1.CreateServiceRolloutRequest", [
            { no: 1, name: "service_name", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "google.api.field_behavior": ["REQUIRED"] } },
            { no: 2, name: "rollout", kind: "message", T: () => Rollout, options: { "google.api.field_behavior": ["REQUIRED"] } }
        ]);
    }
    create(value?: PartialMessage<CreateServiceRolloutRequest>): CreateServiceRolloutRequest {
        const message = { serviceName: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateServiceRolloutRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateServiceRolloutRequest): CreateServiceRolloutRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string service_name */ 1:
                    message.serviceName = reader.string();
                    break;
                case /* google.api.servicemanagement.v1.Rollout rollout */ 2:
                    message.rollout = Rollout.internalBinaryRead(reader, reader.uint32(), options, message.rollout);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateServiceRolloutRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string service_name = 1; */
        if (message.serviceName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.serviceName);
        /* google.api.servicemanagement.v1.Rollout rollout = 2; */
        if (message.rollout)
            Rollout.internalBinaryWrite(message.rollout, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.servicemanagement.v1.CreateServiceRolloutRequest
 */
export const CreateServiceRolloutRequest = new CreateServiceRolloutRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListServiceRolloutsRequest$Type extends MessageType<ListServiceRolloutsRequest> {
    constructor() {
        super("google.api.servicemanagement.v1.ListServiceRolloutsRequest", [
            { no: 1, name: "service_name", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "google.api.field_behavior": ["REQUIRED"] } },
            { no: 2, name: "page_token", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "page_size", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "filter", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "google.api.field_behavior": ["REQUIRED"] } }
        ]);
    }
    create(value?: PartialMessage<ListServiceRolloutsRequest>): ListServiceRolloutsRequest {
        const message = { serviceName: "", pageToken: "", pageSize: 0, filter: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListServiceRolloutsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListServiceRolloutsRequest): ListServiceRolloutsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string service_name */ 1:
                    message.serviceName = reader.string();
                    break;
                case /* string page_token */ 2:
                    message.pageToken = reader.string();
                    break;
                case /* int32 page_size */ 3:
                    message.pageSize = reader.int32();
                    break;
                case /* string filter */ 4:
                    message.filter = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListServiceRolloutsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string service_name = 1; */
        if (message.serviceName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.serviceName);
        /* string page_token = 2; */
        if (message.pageToken !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.pageToken);
        /* int32 page_size = 3; */
        if (message.pageSize !== 0)
            writer.tag(3, WireType.Varint).int32(message.pageSize);
        /* string filter = 4; */
        if (message.filter !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.filter);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.servicemanagement.v1.ListServiceRolloutsRequest
 */
export const ListServiceRolloutsRequest = new ListServiceRolloutsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListServiceRolloutsResponse$Type extends MessageType<ListServiceRolloutsResponse> {
    constructor() {
        super("google.api.servicemanagement.v1.ListServiceRolloutsResponse", [
            { no: 1, name: "rollouts", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Rollout },
            { no: 2, name: "next_page_token", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ListServiceRolloutsResponse>): ListServiceRolloutsResponse {
        const message = { rollouts: [], nextPageToken: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListServiceRolloutsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListServiceRolloutsResponse): ListServiceRolloutsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated google.api.servicemanagement.v1.Rollout rollouts */ 1:
                    message.rollouts.push(Rollout.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string next_page_token */ 2:
                    message.nextPageToken = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListServiceRolloutsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated google.api.servicemanagement.v1.Rollout rollouts = 1; */
        for (let i = 0; i < message.rollouts.length; i++)
            Rollout.internalBinaryWrite(message.rollouts[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string next_page_token = 2; */
        if (message.nextPageToken !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.nextPageToken);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.servicemanagement.v1.ListServiceRolloutsResponse
 */
export const ListServiceRolloutsResponse = new ListServiceRolloutsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetServiceRolloutRequest$Type extends MessageType<GetServiceRolloutRequest> {
    constructor() {
        super("google.api.servicemanagement.v1.GetServiceRolloutRequest", [
            { no: 1, name: "service_name", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "google.api.field_behavior": ["REQUIRED"] } },
            { no: 2, name: "rollout_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "google.api.field_behavior": ["REQUIRED"] } }
        ]);
    }
    create(value?: PartialMessage<GetServiceRolloutRequest>): GetServiceRolloutRequest {
        const message = { serviceName: "", rolloutId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetServiceRolloutRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetServiceRolloutRequest): GetServiceRolloutRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string service_name */ 1:
                    message.serviceName = reader.string();
                    break;
                case /* string rollout_id */ 2:
                    message.rolloutId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetServiceRolloutRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string service_name = 1; */
        if (message.serviceName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.serviceName);
        /* string rollout_id = 2; */
        if (message.rolloutId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.rolloutId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.servicemanagement.v1.GetServiceRolloutRequest
 */
export const GetServiceRolloutRequest = new GetServiceRolloutRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GenerateConfigReportRequest$Type extends MessageType<GenerateConfigReportRequest> {
    constructor() {
        super("google.api.servicemanagement.v1.GenerateConfigReportRequest", [
            { no: 1, name: "new_config", kind: "message", T: () => Any, options: { "google.api.field_behavior": ["REQUIRED"] } },
            { no: 2, name: "old_config", kind: "message", T: () => Any, options: { "google.api.field_behavior": ["OPTIONAL"] } }
        ]);
    }
    create(value?: PartialMessage<GenerateConfigReportRequest>): GenerateConfigReportRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GenerateConfigReportRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GenerateConfigReportRequest): GenerateConfigReportRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Any new_config */ 1:
                    message.newConfig = Any.internalBinaryRead(reader, reader.uint32(), options, message.newConfig);
                    break;
                case /* google.protobuf.Any old_config */ 2:
                    message.oldConfig = Any.internalBinaryRead(reader, reader.uint32(), options, message.oldConfig);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GenerateConfigReportRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.Any new_config = 1; */
        if (message.newConfig)
            Any.internalBinaryWrite(message.newConfig, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Any old_config = 2; */
        if (message.oldConfig)
            Any.internalBinaryWrite(message.oldConfig, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.servicemanagement.v1.GenerateConfigReportRequest
 */
export const GenerateConfigReportRequest = new GenerateConfigReportRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GenerateConfigReportResponse$Type extends MessageType<GenerateConfigReportResponse> {
    constructor() {
        super("google.api.servicemanagement.v1.GenerateConfigReportResponse", [
            { no: 1, name: "service_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "change_reports", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ChangeReport },
            { no: 4, name: "diagnostics", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Diagnostic }
        ]);
    }
    create(value?: PartialMessage<GenerateConfigReportResponse>): GenerateConfigReportResponse {
        const message = { serviceName: "", id: "", changeReports: [], diagnostics: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GenerateConfigReportResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GenerateConfigReportResponse): GenerateConfigReportResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string service_name */ 1:
                    message.serviceName = reader.string();
                    break;
                case /* string id */ 2:
                    message.id = reader.string();
                    break;
                case /* repeated google.api.servicemanagement.v1.ChangeReport change_reports */ 3:
                    message.changeReports.push(ChangeReport.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated google.api.servicemanagement.v1.Diagnostic diagnostics */ 4:
                    message.diagnostics.push(Diagnostic.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GenerateConfigReportResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string service_name = 1; */
        if (message.serviceName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.serviceName);
        /* string id = 2; */
        if (message.id !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.id);
        /* repeated google.api.servicemanagement.v1.ChangeReport change_reports = 3; */
        for (let i = 0; i < message.changeReports.length; i++)
            ChangeReport.internalBinaryWrite(message.changeReports[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated google.api.servicemanagement.v1.Diagnostic diagnostics = 4; */
        for (let i = 0; i < message.diagnostics.length; i++)
            Diagnostic.internalBinaryWrite(message.diagnostics[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.servicemanagement.v1.GenerateConfigReportResponse
 */
export const GenerateConfigReportResponse = new GenerateConfigReportResponse$Type();
/**
 * @generated ServiceType for protobuf service google.api.servicemanagement.v1.ServiceManager
 */
export const ServiceManager = new ServiceType("google.api.servicemanagement.v1.ServiceManager", [
    { name: "ListServices", options: { "google.api.http": { get: "/v1/services" }, "google.api.method_signature": ["producer_project_id,consumer_id"] }, I: ListServicesRequest, O: ListServicesResponse },
    { name: "GetService", options: { "google.api.http": { get: "/v1/services/{service_name}" }, "google.api.method_signature": ["service_name"] }, I: GetServiceRequest, O: ManagedService },
    { name: "CreateService", options: { "google.api.http": { post: "/v1/services", body: "service" }, "google.api.method_signature": ["service"], "google.longrunning.operation_info": { responseType: "google.api.servicemanagement.v1.ManagedService", metadataType: "google.api.servicemanagement.v1.OperationMetadata" } }, I: CreateServiceRequest, O: Operation },
    { name: "DeleteService", options: { "google.api.http": { delete: "/v1/services/{service_name}" }, "google.api.method_signature": ["service_name"], "google.longrunning.operation_info": { responseType: "google.protobuf.Empty", metadataType: "google.api.servicemanagement.v1.OperationMetadata" } }, I: DeleteServiceRequest, O: Operation },
    { name: "UndeleteService", options: { "google.api.http": { post: "/v1/services/{service_name}:undelete" }, "google.api.method_signature": ["service_name"], "google.longrunning.operation_info": { responseType: "google.api.servicemanagement.v1.UndeleteServiceResponse", metadataType: "google.api.servicemanagement.v1.OperationMetadata" } }, I: UndeleteServiceRequest, O: Operation },
    { name: "ListServiceConfigs", options: { "google.api.http": { get: "/v1/services/{service_name}/configs" }, "google.api.method_signature": ["service_name"] }, I: ListServiceConfigsRequest, O: ListServiceConfigsResponse },
    { name: "GetServiceConfig", options: { "google.api.http": { get: "/v1/services/{service_name}/configs/{config_id}", additionalBindings: [{ get: "/v1/services/{service_name}/config" }] }, "google.api.method_signature": ["service_name,config_id,view"] }, I: GetServiceConfigRequest, O: Service },
    { name: "CreateServiceConfig", options: { "google.api.http": { post: "/v1/services/{service_name}/configs", body: "service_config" }, "google.api.method_signature": ["service_name,service_config"] }, I: CreateServiceConfigRequest, O: Service },
    { name: "SubmitConfigSource", options: { "google.api.http": { post: "/v1/services/{service_name}/configs:submit", body: "*" }, "google.api.method_signature": ["service_name,config_source,validate_only"], "google.longrunning.operation_info": { responseType: "google.api.servicemanagement.v1.SubmitConfigSourceResponse", metadataType: "google.api.servicemanagement.v1.OperationMetadata" } }, I: SubmitConfigSourceRequest, O: Operation },
    { name: "ListServiceRollouts", options: { "google.api.http": { get: "/v1/services/{service_name}/rollouts" }, "google.api.method_signature": ["service_name,filter"] }, I: ListServiceRolloutsRequest, O: ListServiceRolloutsResponse },
    { name: "GetServiceRollout", options: { "google.api.http": { get: "/v1/services/{service_name}/rollouts/{rollout_id}" }, "google.api.method_signature": ["service_name,rollout_id"] }, I: GetServiceRolloutRequest, O: Rollout },
    { name: "CreateServiceRollout", options: { "google.api.http": { post: "/v1/services/{service_name}/rollouts", body: "rollout" }, "google.api.method_signature": ["service_name,rollout"], "google.longrunning.operation_info": { responseType: "google.api.servicemanagement.v1.Rollout", metadataType: "google.api.servicemanagement.v1.OperationMetadata" } }, I: CreateServiceRolloutRequest, O: Operation },
    { name: "GenerateConfigReport", options: { "google.api.http": { post: "/v1/services:generateConfigReport", body: "*" }, "google.api.method_signature": ["new_config,old_config"] }, I: GenerateConfigReportRequest, O: GenerateConfigReportResponse }
], { "google.api.default_host": "servicemanagement.googleapis.com", "google.api.oauth_scopes": "https://www.googleapis.com/auth/cloud-platform,https://www.googleapis.com/auth/cloud-platform.read-only,https://www.googleapis.com/auth/service.management,https://www.googleapis.com/auth/service.management.readonly" });
