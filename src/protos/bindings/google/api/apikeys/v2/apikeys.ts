// @generated by protobuf-ts 2.8.1
// @generated from protobuf file "google/api/apikeys/v2/apikeys.proto" (package "google.api.apikeys.v2", syntax proto3)
// tslint:disable
//
// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import { Operation } from "../../../longrunning/operations";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { FieldMask } from "../../../protobuf/field_mask";
import { Key } from "./resources";
/**
 * Request message for `CreateKey` method.
 *
 * @generated from protobuf message google.api.apikeys.v2.CreateKeyRequest
 */
export interface CreateKeyRequest {
    /**
     * Required. The project in which the API key is created.
     *
     * @generated from protobuf field: string parent = 1;
     */
    parent: string;
    /**
     * Required. The API key fields to set at creation time.
     * You can configure only the `display_name`, `restrictions`, and
     * `annotations` fields.
     *
     * @generated from protobuf field: google.api.apikeys.v2.Key key = 2;
     */
    key?: Key;
    /**
     * User specified key id (optional). If specified, it will become the final
     * component of the key resource name.
     *
     * The id must be unique within the project, must conform with RFC-1034,
     * is restricted to lower-cased letters, and has a maximum length of 63
     * characters. In another word, the id must match the regular
     * expression: `[a-z]([a-z0-9-]{0,61}[a-z0-9])?`.
     *
     * The id must NOT be a UUID-like string.
     *
     * @generated from protobuf field: string key_id = 3;
     */
    keyId: string;
}
/**
 * Request message for `ListKeys` method.
 *
 * @generated from protobuf message google.api.apikeys.v2.ListKeysRequest
 */
export interface ListKeysRequest {
    /**
     * Required. Lists all API keys associated with this project.
     *
     * @generated from protobuf field: string parent = 1;
     */
    parent: string;
    /**
     * Optional. Specifies the maximum number of results to be returned at a time.
     *
     * @generated from protobuf field: int32 page_size = 2;
     */
    pageSize: number;
    /**
     * Optional. Requests a specific page of results.
     *
     * @generated from protobuf field: string page_token = 3;
     */
    pageToken: string;
    /**
     * Optional. Indicate that keys deleted in the past 30 days should also be
     * returned.
     *
     * @generated from protobuf field: bool show_deleted = 6;
     */
    showDeleted: boolean;
}
/**
 * Response message for `ListKeys` method.
 *
 * @generated from protobuf message google.api.apikeys.v2.ListKeysResponse
 */
export interface ListKeysResponse {
    /**
     * A list of API keys.
     *
     * @generated from protobuf field: repeated google.api.apikeys.v2.Key keys = 1;
     */
    keys: Key[];
    /**
     * The pagination token for the next page of results.
     *
     * @generated from protobuf field: string next_page_token = 2;
     */
    nextPageToken: string;
}
/**
 * Request message for `GetKey` method.
 *
 * @generated from protobuf message google.api.apikeys.v2.GetKeyRequest
 */
export interface GetKeyRequest {
    /**
     * Required. The resource name of the API key to get.
     *
     * @generated from protobuf field: string name = 1;
     */
    name: string;
}
/**
 * Request message for `GetKeyString` method.
 *
 * @generated from protobuf message google.api.apikeys.v2.GetKeyStringRequest
 */
export interface GetKeyStringRequest {
    /**
     * Required. The resource name of the API key to be retrieved.
     *
     * @generated from protobuf field: string name = 1;
     */
    name: string;
}
/**
 * Response message for `GetKeyString` method.
 *
 * @generated from protobuf message google.api.apikeys.v2.GetKeyStringResponse
 */
export interface GetKeyStringResponse {
    /**
     * An encrypted and signed value of the key.
     *
     * @generated from protobuf field: string key_string = 1;
     */
    keyString: string;
}
/**
 * Request message for `UpdateKey` method.
 *
 * @generated from protobuf message google.api.apikeys.v2.UpdateKeyRequest
 */
export interface UpdateKeyRequest {
    /**
     * Required. Set the `name` field to the resource name of the API key to be
     * updated. You can update only the `display_name`, `restrictions`, and
     * `annotations` fields.
     *
     * @generated from protobuf field: google.api.apikeys.v2.Key key = 1;
     */
    key?: Key;
    /**
     * The field mask specifies which fields to be updated as part of this
     * request. All other fields are ignored.
     * Mutable fields are: `display_name`, `restrictions`, and `annotations`.
     * If an update mask is not provided, the service treats it as an implied mask
     * equivalent to all allowed fields that are set on the wire. If the field
     * mask has a special value "*", the service treats it equivalent to replace
     * all allowed mutable fields.
     *
     * @generated from protobuf field: google.protobuf.FieldMask update_mask = 2;
     */
    updateMask?: FieldMask;
}
/**
 * Request message for `DeleteKey` method.
 *
 * @generated from protobuf message google.api.apikeys.v2.DeleteKeyRequest
 */
export interface DeleteKeyRequest {
    /**
     * Required. The resource name of the API key to be deleted.
     *
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * Optional. The etag known to the client for the expected state of the key.
     * This is to be used for optimistic concurrency.
     *
     * @generated from protobuf field: string etag = 2;
     */
    etag: string;
}
/**
 * Request message for `UndeleteKey` method.
 *
 * @generated from protobuf message google.api.apikeys.v2.UndeleteKeyRequest
 */
export interface UndeleteKeyRequest {
    /**
     * Required. The resource name of the API key to be undeleted.
     *
     * @generated from protobuf field: string name = 1;
     */
    name: string;
}
/**
 * Request message for `LookupKey` method.
 *
 * @generated from protobuf message google.api.apikeys.v2.LookupKeyRequest
 */
export interface LookupKeyRequest {
    /**
     * Required. Finds the project that owns the key string value.
     *
     * @generated from protobuf field: string key_string = 1;
     */
    keyString: string;
}
/**
 * Response message for `LookupKey` method.
 *
 * @generated from protobuf message google.api.apikeys.v2.LookupKeyResponse
 */
export interface LookupKeyResponse {
    /**
     * The project that owns the key with the value specified in the request.
     *
     * @generated from protobuf field: string parent = 1;
     */
    parent: string;
    /**
     * The resource name of the API key. If the API key has been purged,
     * resource name is empty.
     *
     * @generated from protobuf field: string name = 2;
     */
    name: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class CreateKeyRequest$Type extends MessageType<CreateKeyRequest> {
    constructor() {
        super("google.api.apikeys.v2.CreateKeyRequest", [
            { no: 1, name: "parent", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "google.api.field_behavior": ["REQUIRED"], "google.api.resource_reference": { childType: "apikeys.googleapis.com/Key" } } },
            { no: 2, name: "key", kind: "message", T: () => Key, options: { "google.api.field_behavior": ["REQUIRED"] } },
            { no: 3, name: "key_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateKeyRequest>): CreateKeyRequest {
        const message = { parent: "", keyId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateKeyRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateKeyRequest): CreateKeyRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string parent */ 1:
                    message.parent = reader.string();
                    break;
                case /* google.api.apikeys.v2.Key key */ 2:
                    message.key = Key.internalBinaryRead(reader, reader.uint32(), options, message.key);
                    break;
                case /* string key_id */ 3:
                    message.keyId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateKeyRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string parent = 1; */
        if (message.parent !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.parent);
        /* google.api.apikeys.v2.Key key = 2; */
        if (message.key)
            Key.internalBinaryWrite(message.key, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string key_id = 3; */
        if (message.keyId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.keyId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.apikeys.v2.CreateKeyRequest
 */
export const CreateKeyRequest = new CreateKeyRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListKeysRequest$Type extends MessageType<ListKeysRequest> {
    constructor() {
        super("google.api.apikeys.v2.ListKeysRequest", [
            { no: 1, name: "parent", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "google.api.field_behavior": ["REQUIRED"], "google.api.resource_reference": { childType: "apikeys.googleapis.com/Key" } } },
            { no: 2, name: "page_size", kind: "scalar", T: 5 /*ScalarType.INT32*/, options: { "google.api.field_behavior": ["OPTIONAL"] } },
            { no: 3, name: "page_token", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "google.api.field_behavior": ["OPTIONAL"] } },
            { no: 6, name: "show_deleted", kind: "scalar", T: 8 /*ScalarType.BOOL*/, options: { "google.api.field_behavior": ["OPTIONAL"] } }
        ]);
    }
    create(value?: PartialMessage<ListKeysRequest>): ListKeysRequest {
        const message = { parent: "", pageSize: 0, pageToken: "", showDeleted: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListKeysRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListKeysRequest): ListKeysRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string parent */ 1:
                    message.parent = reader.string();
                    break;
                case /* int32 page_size */ 2:
                    message.pageSize = reader.int32();
                    break;
                case /* string page_token */ 3:
                    message.pageToken = reader.string();
                    break;
                case /* bool show_deleted */ 6:
                    message.showDeleted = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListKeysRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string parent = 1; */
        if (message.parent !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.parent);
        /* int32 page_size = 2; */
        if (message.pageSize !== 0)
            writer.tag(2, WireType.Varint).int32(message.pageSize);
        /* string page_token = 3; */
        if (message.pageToken !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.pageToken);
        /* bool show_deleted = 6; */
        if (message.showDeleted !== false)
            writer.tag(6, WireType.Varint).bool(message.showDeleted);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.apikeys.v2.ListKeysRequest
 */
export const ListKeysRequest = new ListKeysRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListKeysResponse$Type extends MessageType<ListKeysResponse> {
    constructor() {
        super("google.api.apikeys.v2.ListKeysResponse", [
            { no: 1, name: "keys", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Key },
            { no: 2, name: "next_page_token", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ListKeysResponse>): ListKeysResponse {
        const message = { keys: [], nextPageToken: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListKeysResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListKeysResponse): ListKeysResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated google.api.apikeys.v2.Key keys */ 1:
                    message.keys.push(Key.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string next_page_token */ 2:
                    message.nextPageToken = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListKeysResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated google.api.apikeys.v2.Key keys = 1; */
        for (let i = 0; i < message.keys.length; i++)
            Key.internalBinaryWrite(message.keys[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string next_page_token = 2; */
        if (message.nextPageToken !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.nextPageToken);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.apikeys.v2.ListKeysResponse
 */
export const ListKeysResponse = new ListKeysResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetKeyRequest$Type extends MessageType<GetKeyRequest> {
    constructor() {
        super("google.api.apikeys.v2.GetKeyRequest", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "google.api.field_behavior": ["REQUIRED"], "google.api.resource_reference": { type: "apikeys.googleapis.com/Key" } } }
        ]);
    }
    create(value?: PartialMessage<GetKeyRequest>): GetKeyRequest {
        const message = { name: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetKeyRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetKeyRequest): GetKeyRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetKeyRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.apikeys.v2.GetKeyRequest
 */
export const GetKeyRequest = new GetKeyRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetKeyStringRequest$Type extends MessageType<GetKeyStringRequest> {
    constructor() {
        super("google.api.apikeys.v2.GetKeyStringRequest", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "google.api.field_behavior": ["REQUIRED"], "google.api.resource_reference": { type: "apikeys.googleapis.com/Key" } } }
        ]);
    }
    create(value?: PartialMessage<GetKeyStringRequest>): GetKeyStringRequest {
        const message = { name: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetKeyStringRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetKeyStringRequest): GetKeyStringRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetKeyStringRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.apikeys.v2.GetKeyStringRequest
 */
export const GetKeyStringRequest = new GetKeyStringRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetKeyStringResponse$Type extends MessageType<GetKeyStringResponse> {
    constructor() {
        super("google.api.apikeys.v2.GetKeyStringResponse", [
            { no: 1, name: "key_string", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetKeyStringResponse>): GetKeyStringResponse {
        const message = { keyString: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetKeyStringResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetKeyStringResponse): GetKeyStringResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string key_string */ 1:
                    message.keyString = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetKeyStringResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string key_string = 1; */
        if (message.keyString !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.keyString);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.apikeys.v2.GetKeyStringResponse
 */
export const GetKeyStringResponse = new GetKeyStringResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateKeyRequest$Type extends MessageType<UpdateKeyRequest> {
    constructor() {
        super("google.api.apikeys.v2.UpdateKeyRequest", [
            { no: 1, name: "key", kind: "message", T: () => Key, options: { "google.api.field_behavior": ["REQUIRED"] } },
            { no: 2, name: "update_mask", kind: "message", T: () => FieldMask }
        ]);
    }
    create(value?: PartialMessage<UpdateKeyRequest>): UpdateKeyRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdateKeyRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateKeyRequest): UpdateKeyRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.api.apikeys.v2.Key key */ 1:
                    message.key = Key.internalBinaryRead(reader, reader.uint32(), options, message.key);
                    break;
                case /* google.protobuf.FieldMask update_mask */ 2:
                    message.updateMask = FieldMask.internalBinaryRead(reader, reader.uint32(), options, message.updateMask);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateKeyRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.api.apikeys.v2.Key key = 1; */
        if (message.key)
            Key.internalBinaryWrite(message.key, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.FieldMask update_mask = 2; */
        if (message.updateMask)
            FieldMask.internalBinaryWrite(message.updateMask, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.apikeys.v2.UpdateKeyRequest
 */
export const UpdateKeyRequest = new UpdateKeyRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteKeyRequest$Type extends MessageType<DeleteKeyRequest> {
    constructor() {
        super("google.api.apikeys.v2.DeleteKeyRequest", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "google.api.field_behavior": ["REQUIRED"], "google.api.resource_reference": { type: "apikeys.googleapis.com/Key" } } },
            { no: 2, name: "etag", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "google.api.field_behavior": ["OPTIONAL"] } }
        ]);
    }
    create(value?: PartialMessage<DeleteKeyRequest>): DeleteKeyRequest {
        const message = { name: "", etag: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DeleteKeyRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteKeyRequest): DeleteKeyRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string etag */ 2:
                    message.etag = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteKeyRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string etag = 2; */
        if (message.etag !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.etag);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.apikeys.v2.DeleteKeyRequest
 */
export const DeleteKeyRequest = new DeleteKeyRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UndeleteKeyRequest$Type extends MessageType<UndeleteKeyRequest> {
    constructor() {
        super("google.api.apikeys.v2.UndeleteKeyRequest", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "google.api.field_behavior": ["REQUIRED"], "google.api.resource_reference": { type: "apikeys.googleapis.com/Key" } } }
        ]);
    }
    create(value?: PartialMessage<UndeleteKeyRequest>): UndeleteKeyRequest {
        const message = { name: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UndeleteKeyRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UndeleteKeyRequest): UndeleteKeyRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UndeleteKeyRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.apikeys.v2.UndeleteKeyRequest
 */
export const UndeleteKeyRequest = new UndeleteKeyRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LookupKeyRequest$Type extends MessageType<LookupKeyRequest> {
    constructor() {
        super("google.api.apikeys.v2.LookupKeyRequest", [
            { no: 1, name: "key_string", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "google.api.field_behavior": ["REQUIRED"] } }
        ]);
    }
    create(value?: PartialMessage<LookupKeyRequest>): LookupKeyRequest {
        const message = { keyString: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LookupKeyRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LookupKeyRequest): LookupKeyRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string key_string */ 1:
                    message.keyString = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LookupKeyRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string key_string = 1; */
        if (message.keyString !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.keyString);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.apikeys.v2.LookupKeyRequest
 */
export const LookupKeyRequest = new LookupKeyRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LookupKeyResponse$Type extends MessageType<LookupKeyResponse> {
    constructor() {
        super("google.api.apikeys.v2.LookupKeyResponse", [
            { no: 1, name: "parent", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LookupKeyResponse>): LookupKeyResponse {
        const message = { parent: "", name: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LookupKeyResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LookupKeyResponse): LookupKeyResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string parent */ 1:
                    message.parent = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LookupKeyResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string parent = 1; */
        if (message.parent !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.parent);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.apikeys.v2.LookupKeyResponse
 */
export const LookupKeyResponse = new LookupKeyResponse$Type();
/**
 * @generated ServiceType for protobuf service google.api.apikeys.v2.ApiKeys
 */
export const ApiKeys = new ServiceType("google.api.apikeys.v2.ApiKeys", [
    { name: "CreateKey", options: { "google.api.http": { post: "/v2/{parent=projects/*/locations/*}/keys", body: "key" }, "google.api.method_signature": ["parent,key,key_id"], "google.longrunning.operation_info": { responseType: "Key", metadataType: "google.protobuf.Empty" } }, I: CreateKeyRequest, O: Operation },
    { name: "ListKeys", options: { "google.api.http": { get: "/v2/{parent=projects/*/locations/*}/keys" }, "google.api.method_signature": ["parent"] }, I: ListKeysRequest, O: ListKeysResponse },
    { name: "GetKey", options: { "google.api.http": { get: "/v2/{name=projects/*/locations/*/keys/*}" }, "google.api.method_signature": ["name"] }, I: GetKeyRequest, O: Key },
    { name: "GetKeyString", options: { "google.api.http": { get: "/v2/{name=projects/*/locations/*/keys/*}/keyString" }, "google.api.method_signature": ["name"] }, I: GetKeyStringRequest, O: GetKeyStringResponse },
    { name: "UpdateKey", options: { "google.api.http": { patch: "/v2/{key.name=projects/*/locations/*/keys/*}", body: "key" }, "google.api.method_signature": ["key,update_mask"], "google.longrunning.operation_info": { responseType: "Key", metadataType: "google.protobuf.Empty" } }, I: UpdateKeyRequest, O: Operation },
    { name: "DeleteKey", options: { "google.api.http": { delete: "/v2/{name=projects/*/locations/*/keys/*}" }, "google.api.method_signature": ["name"], "google.longrunning.operation_info": { responseType: "Key", metadataType: "google.protobuf.Empty" } }, I: DeleteKeyRequest, O: Operation },
    { name: "UndeleteKey", options: { "google.api.http": { post: "/v2/{name=projects/*/locations/*/keys/*}:undelete", body: "*" }, "google.longrunning.operation_info": { responseType: "Key", metadataType: "google.protobuf.Empty" } }, I: UndeleteKeyRequest, O: Operation },
    { name: "LookupKey", options: { "google.api.http": { get: "/v2/keys:lookupKey" } }, I: LookupKeyRequest, O: LookupKeyResponse }
], { "google.api.default_host": "apikeys.googleapis.com", "google.api.oauth_scopes": "https://www.googleapis.com/auth/cloud-platform,https://www.googleapis.com/auth/cloud-platform.read-only" });
