// @generated by protobuf-ts 2.8.1
// @generated from protobuf file "google/api/usage.proto" (package "google.api", syntax proto3)
// tslint:disable
//
// Copyright 2015 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * Configuration controlling usage of a service.
 *
 * @generated from protobuf message google.api.Usage
 */
export interface Usage {
    /**
     * Requirements that must be satisfied before a consumer project can use the
     * service. Each requirement is of the form <service.name>/<requirement-id>;
     * for example 'serviceusage.googleapis.com/billing-enabled'.
     *
     * For Google APIs, a Terms of Service requirement must be included here.
     * Google Cloud APIs must include "serviceusage.googleapis.com/tos/cloud".
     * Other Google APIs should include
     * "serviceusage.googleapis.com/tos/universal". Additional ToS can be
     * included based on the business needs.
     *
     * @generated from protobuf field: repeated string requirements = 1;
     */
    requirements: string[];
    /**
     * A list of usage rules that apply to individual API methods.
     *
     * **NOTE:** All service configuration rules follow "last one wins" order.
     *
     * @generated from protobuf field: repeated google.api.UsageRule rules = 6;
     */
    rules: UsageRule[];
    /**
     * The full resource name of a channel used for sending notifications to the
     * service producer.
     *
     * Google Service Management currently only supports
     * [Google Cloud Pub/Sub](https://cloud.google.com/pubsub) as a notification
     * channel. To use Google Cloud Pub/Sub as the channel, this must be the name
     * of a Cloud Pub/Sub topic that uses the Cloud Pub/Sub topic name format
     * documented in https://cloud.google.com/pubsub/docs/overview.
     *
     * @generated from protobuf field: string producer_notification_channel = 7;
     */
    producerNotificationChannel: string;
}
/**
 * Usage configuration rules for the service.
 *
 * NOTE: Under development.
 *
 *
 * Use this rule to configure unregistered calls for the service. Unregistered
 * calls are calls that do not contain consumer project identity.
 * (Example: calls that do not contain an API key).
 * By default, API methods do not allow unregistered calls, and each method call
 * must be identified by a consumer project identity. Use this rule to
 * allow/disallow unregistered calls.
 *
 * Example of an API that wants to allow unregistered calls for entire service.
 *
 *     usage:
 *       rules:
 *       - selector: "*"
 *         allow_unregistered_calls: true
 *
 * Example of a method that wants to allow unregistered calls.
 *
 *     usage:
 *       rules:
 *       - selector: "google.example.library.v1.LibraryService.CreateBook"
 *         allow_unregistered_calls: true
 *
 * @generated from protobuf message google.api.UsageRule
 */
export interface UsageRule {
    /**
     * Selects the methods to which this rule applies. Use '*' to indicate all
     * methods in all APIs.
     *
     * Refer to [selector][google.api.DocumentationRule.selector] for syntax details.
     *
     * @generated from protobuf field: string selector = 1;
     */
    selector: string;
    /**
     * If true, the selected method allows unregistered calls, e.g. calls
     * that don't identify any user or application.
     *
     * @generated from protobuf field: bool allow_unregistered_calls = 2;
     */
    allowUnregisteredCalls: boolean;
    /**
     * If true, the selected method should skip service control and the control
     * plane features, such as quota and billing, will not be available.
     * This flag is used by Google Cloud Endpoints to bypass checks for internal
     * methods, such as service health check methods.
     *
     * @generated from protobuf field: bool skip_service_control = 3;
     */
    skipServiceControl: boolean;
}
// @generated message type with reflection information, may provide speed optimized methods
class Usage$Type extends MessageType<Usage> {
    constructor() {
        super("google.api.Usage", [
            { no: 1, name: "requirements", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "rules", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => UsageRule },
            { no: 7, name: "producer_notification_channel", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Usage>): Usage {
        const message = { requirements: [], rules: [], producerNotificationChannel: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Usage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Usage): Usage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string requirements */ 1:
                    message.requirements.push(reader.string());
                    break;
                case /* repeated google.api.UsageRule rules */ 6:
                    message.rules.push(UsageRule.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string producer_notification_channel */ 7:
                    message.producerNotificationChannel = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Usage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string requirements = 1; */
        for (let i = 0; i < message.requirements.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.requirements[i]);
        /* repeated google.api.UsageRule rules = 6; */
        for (let i = 0; i < message.rules.length; i++)
            UsageRule.internalBinaryWrite(message.rules[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* string producer_notification_channel = 7; */
        if (message.producerNotificationChannel !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.producerNotificationChannel);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.Usage
 */
export const Usage = new Usage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UsageRule$Type extends MessageType<UsageRule> {
    constructor() {
        super("google.api.UsageRule", [
            { no: 1, name: "selector", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "allow_unregistered_calls", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "skip_service_control", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<UsageRule>): UsageRule {
        const message = { selector: "", allowUnregisteredCalls: false, skipServiceControl: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UsageRule>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UsageRule): UsageRule {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string selector */ 1:
                    message.selector = reader.string();
                    break;
                case /* bool allow_unregistered_calls */ 2:
                    message.allowUnregisteredCalls = reader.bool();
                    break;
                case /* bool skip_service_control */ 3:
                    message.skipServiceControl = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UsageRule, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string selector = 1; */
        if (message.selector !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.selector);
        /* bool allow_unregistered_calls = 2; */
        if (message.allowUnregisteredCalls !== false)
            writer.tag(2, WireType.Varint).bool(message.allowUnregisteredCalls);
        /* bool skip_service_control = 3; */
        if (message.skipServiceControl !== false)
            writer.tag(3, WireType.Varint).bool(message.skipServiceControl);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.UsageRule
 */
export const UsageRule = new UsageRule$Type();
