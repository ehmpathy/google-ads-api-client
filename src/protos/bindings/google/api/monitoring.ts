// @generated by protobuf-ts 2.8.1
// @generated from protobuf file "google/api/monitoring.proto" (package "google.api", syntax proto3)
// tslint:disable
//
// Copyright 2015 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * Monitoring configuration of the service.
 *
 * The example below shows how to configure monitored resources and metrics
 * for monitoring. In the example, a monitored resource and two metrics are
 * defined. The `library.googleapis.com/book/returned_count` metric is sent
 * to both producer and consumer projects, whereas the
 * `library.googleapis.com/book/num_overdue` metric is only sent to the
 * consumer project.
 *
 *     monitored_resources:
 *     - type: library.googleapis.com/Branch
 *       display_name: "Library Branch"
 *       description: "A branch of a library."
 *       launch_stage: GA
 *       labels:
 *       - key: resource_container
 *         description: "The Cloud container (ie. project id) for the Branch."
 *       - key: location
 *         description: "The location of the library branch."
 *       - key: branch_id
 *         description: "The id of the branch."
 *     metrics:
 *     - name: library.googleapis.com/book/returned_count
 *       display_name: "Books Returned"
 *       description: "The count of books that have been returned."
 *       launch_stage: GA
 *       metric_kind: DELTA
 *       value_type: INT64
 *       unit: "1"
 *       labels:
 *       - key: customer_id
 *         description: "The id of the customer."
 *     - name: library.googleapis.com/book/num_overdue
 *       display_name: "Books Overdue"
 *       description: "The current number of overdue books."
 *       launch_stage: GA
 *       metric_kind: GAUGE
 *       value_type: INT64
 *       unit: "1"
 *       labels:
 *       - key: customer_id
 *         description: "The id of the customer."
 *     monitoring:
 *       producer_destinations:
 *       - monitored_resource: library.googleapis.com/Branch
 *         metrics:
 *         - library.googleapis.com/book/returned_count
 *       consumer_destinations:
 *       - monitored_resource: library.googleapis.com/Branch
 *         metrics:
 *         - library.googleapis.com/book/returned_count
 *         - library.googleapis.com/book/num_overdue
 *
 * @generated from protobuf message google.api.Monitoring
 */
export interface Monitoring {
    /**
     * Monitoring configurations for sending metrics to the producer project.
     * There can be multiple producer destinations. A monitored resource type may
     * appear in multiple monitoring destinations if different aggregations are
     * needed for different sets of metrics associated with that monitored
     * resource type. A monitored resource and metric pair may only be used once
     * in the Monitoring configuration.
     *
     * @generated from protobuf field: repeated google.api.Monitoring.MonitoringDestination producer_destinations = 1;
     */
    producerDestinations: Monitoring_MonitoringDestination[];
    /**
     * Monitoring configurations for sending metrics to the consumer project.
     * There can be multiple consumer destinations. A monitored resource type may
     * appear in multiple monitoring destinations if different aggregations are
     * needed for different sets of metrics associated with that monitored
     * resource type. A monitored resource and metric pair may only be used once
     * in the Monitoring configuration.
     *
     * @generated from protobuf field: repeated google.api.Monitoring.MonitoringDestination consumer_destinations = 2;
     */
    consumerDestinations: Monitoring_MonitoringDestination[];
}
/**
 * Configuration of a specific monitoring destination (the producer project
 * or the consumer project).
 *
 * @generated from protobuf message google.api.Monitoring.MonitoringDestination
 */
export interface Monitoring_MonitoringDestination {
    /**
     * The monitored resource type. The type must be defined in
     * [Service.monitored_resources][google.api.Service.monitored_resources] section.
     *
     * @generated from protobuf field: string monitored_resource = 1;
     */
    monitoredResource: string;
    /**
     * Types of the metrics to report to this monitoring destination.
     * Each type must be defined in [Service.metrics][google.api.Service.metrics] section.
     *
     * @generated from protobuf field: repeated string metrics = 2;
     */
    metrics: string[];
}
// @generated message type with reflection information, may provide speed optimized methods
class Monitoring$Type extends MessageType<Monitoring> {
    constructor() {
        super("google.api.Monitoring", [
            { no: 1, name: "producer_destinations", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Monitoring_MonitoringDestination },
            { no: 2, name: "consumer_destinations", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Monitoring_MonitoringDestination }
        ]);
    }
    create(value?: PartialMessage<Monitoring>): Monitoring {
        const message = { producerDestinations: [], consumerDestinations: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Monitoring>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Monitoring): Monitoring {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated google.api.Monitoring.MonitoringDestination producer_destinations */ 1:
                    message.producerDestinations.push(Monitoring_MonitoringDestination.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated google.api.Monitoring.MonitoringDestination consumer_destinations */ 2:
                    message.consumerDestinations.push(Monitoring_MonitoringDestination.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Monitoring, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated google.api.Monitoring.MonitoringDestination producer_destinations = 1; */
        for (let i = 0; i < message.producerDestinations.length; i++)
            Monitoring_MonitoringDestination.internalBinaryWrite(message.producerDestinations[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated google.api.Monitoring.MonitoringDestination consumer_destinations = 2; */
        for (let i = 0; i < message.consumerDestinations.length; i++)
            Monitoring_MonitoringDestination.internalBinaryWrite(message.consumerDestinations[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.Monitoring
 */
export const Monitoring = new Monitoring$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Monitoring_MonitoringDestination$Type extends MessageType<Monitoring_MonitoringDestination> {
    constructor() {
        super("google.api.Monitoring.MonitoringDestination", [
            { no: 1, name: "monitored_resource", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "metrics", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Monitoring_MonitoringDestination>): Monitoring_MonitoringDestination {
        const message = { monitoredResource: "", metrics: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Monitoring_MonitoringDestination>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Monitoring_MonitoringDestination): Monitoring_MonitoringDestination {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string monitored_resource */ 1:
                    message.monitoredResource = reader.string();
                    break;
                case /* repeated string metrics */ 2:
                    message.metrics.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Monitoring_MonitoringDestination, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string monitored_resource = 1; */
        if (message.monitoredResource !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.monitoredResource);
        /* repeated string metrics = 2; */
        for (let i = 0; i < message.metrics.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.metrics[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.Monitoring.MonitoringDestination
 */
export const Monitoring_MonitoringDestination = new Monitoring_MonitoringDestination$Type();
