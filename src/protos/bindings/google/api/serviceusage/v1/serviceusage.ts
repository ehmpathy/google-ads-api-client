// @generated by protobuf-ts 2.8.1
// @generated from protobuf file "google/api/serviceusage/v1/serviceusage.proto" (package "google.api.serviceusage.v1", syntax proto3)
// tslint:disable
//
// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import { Operation } from "../../../longrunning/operations";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Service } from "./resources";
/**
 * Request message for the `EnableService` method.
 *
 * @generated from protobuf message google.api.serviceusage.v1.EnableServiceRequest
 */
export interface EnableServiceRequest {
    /**
     * Name of the consumer and service to enable the service on.
     *
     * The `EnableService` and `DisableService` methods currently only support
     * projects.
     *
     * Enabling a service requires that the service is public or is shared with
     * the user enabling the service.
     *
     * An example name would be:
     * `projects/123/services/serviceusage.googleapis.com` where `123` is the
     * project number.
     *
     * @generated from protobuf field: string name = 1;
     */
    name: string;
}
/**
 * Response message for the `EnableService` method.
 * This response message is assigned to the `response` field of the returned
 * Operation when that operation is done.
 *
 * @generated from protobuf message google.api.serviceusage.v1.EnableServiceResponse
 */
export interface EnableServiceResponse {
    /**
     * The new state of the service after enabling.
     *
     * @generated from protobuf field: google.api.serviceusage.v1.Service service = 1;
     */
    service?: Service;
}
/**
 * Request message for the `DisableService` method.
 *
 * @generated from protobuf message google.api.serviceusage.v1.DisableServiceRequest
 */
export interface DisableServiceRequest {
    /**
     * Name of the consumer and service to disable the service on.
     *
     * The enable and disable methods currently only support projects.
     *
     * An example name would be:
     * `projects/123/services/serviceusage.googleapis.com` where `123` is the
     * project number.
     *
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * Indicates if services that are enabled and which depend on this service
     * should also be disabled. If not set, an error will be generated if any
     * enabled services depend on the service to be disabled. When set, the
     * service, and any enabled services that depend on it, will be disabled
     * together.
     *
     * @generated from protobuf field: bool disable_dependent_services = 2;
     */
    disableDependentServices: boolean;
    /**
     * Defines the behavior for checking service usage when disabling a service.
     *
     * @generated from protobuf field: google.api.serviceusage.v1.DisableServiceRequest.CheckIfServiceHasUsage check_if_service_has_usage = 3;
     */
    checkIfServiceHasUsage: DisableServiceRequest_CheckIfServiceHasUsage;
}
/**
 * Enum to determine if service usage should be checked when disabling a
 * service.
 *
 * @generated from protobuf enum google.api.serviceusage.v1.DisableServiceRequest.CheckIfServiceHasUsage
 */
export enum DisableServiceRequest_CheckIfServiceHasUsage {
    /**
     * When unset, the default behavior is used, which is SKIP.
     *
     * @generated from protobuf enum value: CHECK_IF_SERVICE_HAS_USAGE_UNSPECIFIED = 0;
     */
    CHECK_IF_SERVICE_HAS_USAGE_UNSPECIFIED = 0,
    /**
     * If set, skip checking service usage when disabling a service.
     *
     * @generated from protobuf enum value: SKIP = 1;
     */
    SKIP = 1,
    /**
     * If set, service usage is checked when disabling the service. If a
     * service, or its dependents, has usage in the last 30 days, the request
     * returns a FAILED_PRECONDITION error.
     *
     * @generated from protobuf enum value: CHECK = 2;
     */
    CHECK = 2
}
/**
 * Response message for the `DisableService` method.
 * This response message is assigned to the `response` field of the returned
 * Operation when that operation is done.
 *
 * @generated from protobuf message google.api.serviceusage.v1.DisableServiceResponse
 */
export interface DisableServiceResponse {
    /**
     * The new state of the service after disabling.
     *
     * @generated from protobuf field: google.api.serviceusage.v1.Service service = 1;
     */
    service?: Service;
}
/**
 * Request message for the `GetService` method.
 *
 * @generated from protobuf message google.api.serviceusage.v1.GetServiceRequest
 */
export interface GetServiceRequest {
    /**
     * Name of the consumer and service to get the `ConsumerState` for.
     *
     * An example name would be:
     * `projects/123/services/serviceusage.googleapis.com` where `123` is the
     * project number.
     *
     * @generated from protobuf field: string name = 1;
     */
    name: string;
}
/**
 * Request message for the `ListServices` method.
 *
 * @generated from protobuf message google.api.serviceusage.v1.ListServicesRequest
 */
export interface ListServicesRequest {
    /**
     * Parent to search for services on.
     *
     * An example name would be:
     * `projects/123` where `123` is the project number.
     *
     * @generated from protobuf field: string parent = 1;
     */
    parent: string;
    /**
     * Requested size of the next page of data.
     * Requested page size cannot exceed 200.
     * If not set, the default page size is 50.
     *
     * @generated from protobuf field: int32 page_size = 2;
     */
    pageSize: number;
    /**
     * Token identifying which result to start with, which is returned by a
     * previous list call.
     *
     * @generated from protobuf field: string page_token = 3;
     */
    pageToken: string;
    /**
     * Only list services that conform to the given filter.
     * The allowed filter strings are `state:ENABLED` and `state:DISABLED`.
     *
     * @generated from protobuf field: string filter = 4;
     */
    filter: string;
}
/**
 * Response message for the `ListServices` method.
 *
 * @generated from protobuf message google.api.serviceusage.v1.ListServicesResponse
 */
export interface ListServicesResponse {
    /**
     * The available services for the requested project.
     *
     * @generated from protobuf field: repeated google.api.serviceusage.v1.Service services = 1;
     */
    services: Service[];
    /**
     * Token that can be passed to `ListServices` to resume a paginated
     * query.
     *
     * @generated from protobuf field: string next_page_token = 2;
     */
    nextPageToken: string;
}
/**
 * Request message for the `BatchEnableServices` method.
 *
 * @generated from protobuf message google.api.serviceusage.v1.BatchEnableServicesRequest
 */
export interface BatchEnableServicesRequest {
    /**
     * Parent to enable services on.
     *
     * An example name would be:
     * `projects/123` where `123` is the project number.
     *
     * The `BatchEnableServices` method currently only supports projects.
     *
     * @generated from protobuf field: string parent = 1;
     */
    parent: string;
    /**
     * The identifiers of the services to enable on the project.
     *
     * A valid identifier would be:
     * serviceusage.googleapis.com
     *
     * Enabling services requires that each service is public or is shared with
     * the user enabling the service.
     *
     * A single request can enable a maximum of 20 services at a time. If more
     * than 20 services are specified, the request will fail, and no state changes
     * will occur.
     *
     * @generated from protobuf field: repeated string service_ids = 2;
     */
    serviceIds: string[];
}
/**
 * Response message for the `BatchEnableServices` method.
 * This response message is assigned to the `response` field of the returned
 * Operation when that operation is done.
 *
 * @generated from protobuf message google.api.serviceusage.v1.BatchEnableServicesResponse
 */
export interface BatchEnableServicesResponse {
    /**
     * The new state of the services after enabling.
     *
     * @generated from protobuf field: repeated google.api.serviceusage.v1.Service services = 1;
     */
    services: Service[];
    /**
     * If allow_partial_success is true, and one or more services could not be
     * enabled, this field contains the details about each failure.
     *
     * @generated from protobuf field: repeated google.api.serviceusage.v1.BatchEnableServicesResponse.EnableFailure failures = 2;
     */
    failures: BatchEnableServicesResponse_EnableFailure[];
}
/**
 * Provides error messages for the failing services.
 *
 * @generated from protobuf message google.api.serviceusage.v1.BatchEnableServicesResponse.EnableFailure
 */
export interface BatchEnableServicesResponse_EnableFailure {
    /**
     * The service id of a service that could not be enabled.
     *
     * @generated from protobuf field: string service_id = 1;
     */
    serviceId: string;
    /**
     * An error message describing why the service could not be enabled.
     *
     * @generated from protobuf field: string error_message = 2;
     */
    errorMessage: string;
}
/**
 * Request message for the `BatchGetServices` method.
 *
 * @generated from protobuf message google.api.serviceusage.v1.BatchGetServicesRequest
 */
export interface BatchGetServicesRequest {
    /**
     * Parent to retrieve services from.
     * If this is set, the parent of all of the services specified in `names` must
     * match this field. An example name would be: `projects/123` where `123` is
     * the project number. The `BatchGetServices` method currently only supports
     * projects.
     *
     * @generated from protobuf field: string parent = 1;
     */
    parent: string;
    /**
     * Names of the services to retrieve.
     *
     * An example name would be:
     * `projects/123/services/serviceusage.googleapis.com` where `123` is the
     * project number.
     * A single request can get a maximum of 30 services at a time.
     *
     * @generated from protobuf field: repeated string names = 2;
     */
    names: string[];
}
/**
 * Response message for the `BatchGetServices` method.
 *
 * @generated from protobuf message google.api.serviceusage.v1.BatchGetServicesResponse
 */
export interface BatchGetServicesResponse {
    /**
     * The requested Service states.
     *
     * @generated from protobuf field: repeated google.api.serviceusage.v1.Service services = 1;
     */
    services: Service[];
}
// @generated message type with reflection information, may provide speed optimized methods
class EnableServiceRequest$Type extends MessageType<EnableServiceRequest> {
    constructor() {
        super("google.api.serviceusage.v1.EnableServiceRequest", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<EnableServiceRequest>): EnableServiceRequest {
        const message = { name: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EnableServiceRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EnableServiceRequest): EnableServiceRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EnableServiceRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.serviceusage.v1.EnableServiceRequest
 */
export const EnableServiceRequest = new EnableServiceRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EnableServiceResponse$Type extends MessageType<EnableServiceResponse> {
    constructor() {
        super("google.api.serviceusage.v1.EnableServiceResponse", [
            { no: 1, name: "service", kind: "message", T: () => Service }
        ]);
    }
    create(value?: PartialMessage<EnableServiceResponse>): EnableServiceResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EnableServiceResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EnableServiceResponse): EnableServiceResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.api.serviceusage.v1.Service service */ 1:
                    message.service = Service.internalBinaryRead(reader, reader.uint32(), options, message.service);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EnableServiceResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.api.serviceusage.v1.Service service = 1; */
        if (message.service)
            Service.internalBinaryWrite(message.service, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.serviceusage.v1.EnableServiceResponse
 */
export const EnableServiceResponse = new EnableServiceResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DisableServiceRequest$Type extends MessageType<DisableServiceRequest> {
    constructor() {
        super("google.api.serviceusage.v1.DisableServiceRequest", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "disable_dependent_services", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "check_if_service_has_usage", kind: "enum", T: () => ["google.api.serviceusage.v1.DisableServiceRequest.CheckIfServiceHasUsage", DisableServiceRequest_CheckIfServiceHasUsage] }
        ]);
    }
    create(value?: PartialMessage<DisableServiceRequest>): DisableServiceRequest {
        const message = { name: "", disableDependentServices: false, checkIfServiceHasUsage: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DisableServiceRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DisableServiceRequest): DisableServiceRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* bool disable_dependent_services */ 2:
                    message.disableDependentServices = reader.bool();
                    break;
                case /* google.api.serviceusage.v1.DisableServiceRequest.CheckIfServiceHasUsage check_if_service_has_usage */ 3:
                    message.checkIfServiceHasUsage = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DisableServiceRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* bool disable_dependent_services = 2; */
        if (message.disableDependentServices !== false)
            writer.tag(2, WireType.Varint).bool(message.disableDependentServices);
        /* google.api.serviceusage.v1.DisableServiceRequest.CheckIfServiceHasUsage check_if_service_has_usage = 3; */
        if (message.checkIfServiceHasUsage !== 0)
            writer.tag(3, WireType.Varint).int32(message.checkIfServiceHasUsage);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.serviceusage.v1.DisableServiceRequest
 */
export const DisableServiceRequest = new DisableServiceRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DisableServiceResponse$Type extends MessageType<DisableServiceResponse> {
    constructor() {
        super("google.api.serviceusage.v1.DisableServiceResponse", [
            { no: 1, name: "service", kind: "message", T: () => Service }
        ]);
    }
    create(value?: PartialMessage<DisableServiceResponse>): DisableServiceResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DisableServiceResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DisableServiceResponse): DisableServiceResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.api.serviceusage.v1.Service service */ 1:
                    message.service = Service.internalBinaryRead(reader, reader.uint32(), options, message.service);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DisableServiceResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.api.serviceusage.v1.Service service = 1; */
        if (message.service)
            Service.internalBinaryWrite(message.service, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.serviceusage.v1.DisableServiceResponse
 */
export const DisableServiceResponse = new DisableServiceResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetServiceRequest$Type extends MessageType<GetServiceRequest> {
    constructor() {
        super("google.api.serviceusage.v1.GetServiceRequest", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetServiceRequest>): GetServiceRequest {
        const message = { name: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetServiceRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetServiceRequest): GetServiceRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetServiceRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.serviceusage.v1.GetServiceRequest
 */
export const GetServiceRequest = new GetServiceRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListServicesRequest$Type extends MessageType<ListServicesRequest> {
    constructor() {
        super("google.api.serviceusage.v1.ListServicesRequest", [
            { no: 1, name: "parent", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "page_size", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "page_token", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "filter", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ListServicesRequest>): ListServicesRequest {
        const message = { parent: "", pageSize: 0, pageToken: "", filter: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListServicesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListServicesRequest): ListServicesRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string parent */ 1:
                    message.parent = reader.string();
                    break;
                case /* int32 page_size */ 2:
                    message.pageSize = reader.int32();
                    break;
                case /* string page_token */ 3:
                    message.pageToken = reader.string();
                    break;
                case /* string filter */ 4:
                    message.filter = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListServicesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string parent = 1; */
        if (message.parent !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.parent);
        /* int32 page_size = 2; */
        if (message.pageSize !== 0)
            writer.tag(2, WireType.Varint).int32(message.pageSize);
        /* string page_token = 3; */
        if (message.pageToken !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.pageToken);
        /* string filter = 4; */
        if (message.filter !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.filter);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.serviceusage.v1.ListServicesRequest
 */
export const ListServicesRequest = new ListServicesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListServicesResponse$Type extends MessageType<ListServicesResponse> {
    constructor() {
        super("google.api.serviceusage.v1.ListServicesResponse", [
            { no: 1, name: "services", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Service },
            { no: 2, name: "next_page_token", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ListServicesResponse>): ListServicesResponse {
        const message = { services: [], nextPageToken: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListServicesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListServicesResponse): ListServicesResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated google.api.serviceusage.v1.Service services */ 1:
                    message.services.push(Service.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string next_page_token */ 2:
                    message.nextPageToken = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListServicesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated google.api.serviceusage.v1.Service services = 1; */
        for (let i = 0; i < message.services.length; i++)
            Service.internalBinaryWrite(message.services[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string next_page_token = 2; */
        if (message.nextPageToken !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.nextPageToken);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.serviceusage.v1.ListServicesResponse
 */
export const ListServicesResponse = new ListServicesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BatchEnableServicesRequest$Type extends MessageType<BatchEnableServicesRequest> {
    constructor() {
        super("google.api.serviceusage.v1.BatchEnableServicesRequest", [
            { no: 1, name: "parent", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "service_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<BatchEnableServicesRequest>): BatchEnableServicesRequest {
        const message = { parent: "", serviceIds: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BatchEnableServicesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BatchEnableServicesRequest): BatchEnableServicesRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string parent */ 1:
                    message.parent = reader.string();
                    break;
                case /* repeated string service_ids */ 2:
                    message.serviceIds.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BatchEnableServicesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string parent = 1; */
        if (message.parent !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.parent);
        /* repeated string service_ids = 2; */
        for (let i = 0; i < message.serviceIds.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.serviceIds[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.serviceusage.v1.BatchEnableServicesRequest
 */
export const BatchEnableServicesRequest = new BatchEnableServicesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BatchEnableServicesResponse$Type extends MessageType<BatchEnableServicesResponse> {
    constructor() {
        super("google.api.serviceusage.v1.BatchEnableServicesResponse", [
            { no: 1, name: "services", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Service },
            { no: 2, name: "failures", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => BatchEnableServicesResponse_EnableFailure }
        ]);
    }
    create(value?: PartialMessage<BatchEnableServicesResponse>): BatchEnableServicesResponse {
        const message = { services: [], failures: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BatchEnableServicesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BatchEnableServicesResponse): BatchEnableServicesResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated google.api.serviceusage.v1.Service services */ 1:
                    message.services.push(Service.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated google.api.serviceusage.v1.BatchEnableServicesResponse.EnableFailure failures */ 2:
                    message.failures.push(BatchEnableServicesResponse_EnableFailure.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BatchEnableServicesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated google.api.serviceusage.v1.Service services = 1; */
        for (let i = 0; i < message.services.length; i++)
            Service.internalBinaryWrite(message.services[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated google.api.serviceusage.v1.BatchEnableServicesResponse.EnableFailure failures = 2; */
        for (let i = 0; i < message.failures.length; i++)
            BatchEnableServicesResponse_EnableFailure.internalBinaryWrite(message.failures[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.serviceusage.v1.BatchEnableServicesResponse
 */
export const BatchEnableServicesResponse = new BatchEnableServicesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BatchEnableServicesResponse_EnableFailure$Type extends MessageType<BatchEnableServicesResponse_EnableFailure> {
    constructor() {
        super("google.api.serviceusage.v1.BatchEnableServicesResponse.EnableFailure", [
            { no: 1, name: "service_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "error_message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<BatchEnableServicesResponse_EnableFailure>): BatchEnableServicesResponse_EnableFailure {
        const message = { serviceId: "", errorMessage: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BatchEnableServicesResponse_EnableFailure>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BatchEnableServicesResponse_EnableFailure): BatchEnableServicesResponse_EnableFailure {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string service_id */ 1:
                    message.serviceId = reader.string();
                    break;
                case /* string error_message */ 2:
                    message.errorMessage = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BatchEnableServicesResponse_EnableFailure, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string service_id = 1; */
        if (message.serviceId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.serviceId);
        /* string error_message = 2; */
        if (message.errorMessage !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.errorMessage);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.serviceusage.v1.BatchEnableServicesResponse.EnableFailure
 */
export const BatchEnableServicesResponse_EnableFailure = new BatchEnableServicesResponse_EnableFailure$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BatchGetServicesRequest$Type extends MessageType<BatchGetServicesRequest> {
    constructor() {
        super("google.api.serviceusage.v1.BatchGetServicesRequest", [
            { no: 1, name: "parent", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "names", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<BatchGetServicesRequest>): BatchGetServicesRequest {
        const message = { parent: "", names: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BatchGetServicesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BatchGetServicesRequest): BatchGetServicesRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string parent */ 1:
                    message.parent = reader.string();
                    break;
                case /* repeated string names */ 2:
                    message.names.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BatchGetServicesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string parent = 1; */
        if (message.parent !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.parent);
        /* repeated string names = 2; */
        for (let i = 0; i < message.names.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.names[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.serviceusage.v1.BatchGetServicesRequest
 */
export const BatchGetServicesRequest = new BatchGetServicesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BatchGetServicesResponse$Type extends MessageType<BatchGetServicesResponse> {
    constructor() {
        super("google.api.serviceusage.v1.BatchGetServicesResponse", [
            { no: 1, name: "services", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Service }
        ]);
    }
    create(value?: PartialMessage<BatchGetServicesResponse>): BatchGetServicesResponse {
        const message = { services: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BatchGetServicesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BatchGetServicesResponse): BatchGetServicesResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated google.api.serviceusage.v1.Service services */ 1:
                    message.services.push(Service.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BatchGetServicesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated google.api.serviceusage.v1.Service services = 1; */
        for (let i = 0; i < message.services.length; i++)
            Service.internalBinaryWrite(message.services[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.serviceusage.v1.BatchGetServicesResponse
 */
export const BatchGetServicesResponse = new BatchGetServicesResponse$Type();
/**
 * @generated ServiceType for protobuf service google.api.serviceusage.v1.ServiceUsage
 */
export const ServiceUsage = new ServiceType("google.api.serviceusage.v1.ServiceUsage", [
    { name: "EnableService", options: { "google.api.http": { post: "/v1/{name=*/*/services/*}:enable", body: "*" }, "google.longrunning.operation_info": { responseType: "EnableServiceResponse", metadataType: "OperationMetadata" } }, I: EnableServiceRequest, O: Operation },
    { name: "DisableService", options: { "google.api.http": { post: "/v1/{name=*/*/services/*}:disable", body: "*" }, "google.longrunning.operation_info": { responseType: "DisableServiceResponse", metadataType: "OperationMetadata" } }, I: DisableServiceRequest, O: Operation },
    { name: "GetService", options: { "google.api.http": { get: "/v1/{name=*/*/services/*}" } }, I: GetServiceRequest, O: Service },
    { name: "ListServices", options: { "google.api.http": { get: "/v1/{parent=*/*}/services" } }, I: ListServicesRequest, O: ListServicesResponse },
    { name: "BatchEnableServices", options: { "google.api.http": { post: "/v1/{parent=*/*}/services:batchEnable", body: "*" }, "google.longrunning.operation_info": { responseType: "BatchEnableServicesResponse", metadataType: "OperationMetadata" } }, I: BatchEnableServicesRequest, O: Operation },
    { name: "BatchGetServices", options: { "google.api.http": { get: "/v1/{parent=*/*}/services:batchGet" } }, I: BatchGetServicesRequest, O: BatchGetServicesResponse }
], { "google.api.default_host": "serviceusage.googleapis.com", "google.api.oauth_scopes": "https://www.googleapis.com/auth/cloud-platform,https://www.googleapis.com/auth/cloud-platform.read-only,https://www.googleapis.com/auth/service.management" });
