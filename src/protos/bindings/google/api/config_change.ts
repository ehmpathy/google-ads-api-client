// @generated by protobuf-ts 2.8.1
// @generated from protobuf file "google/api/config_change.proto" (package "google.api", syntax proto3)
// tslint:disable
//
// Copyright 2015 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * Output generated from semantically comparing two versions of a service
 * configuration.
 *
 * Includes detailed information about a field that have changed with
 * applicable advice about potential consequences for the change, such as
 * backwards-incompatibility.
 *
 * @generated from protobuf message google.api.ConfigChange
 */
export interface ConfigChange {
    /**
     * Object hierarchy path to the change, with levels separated by a '.'
     * character. For repeated fields, an applicable unique identifier field is
     * used for the index (usually selector, name, or id). For maps, the term
     * 'key' is used. If the field has no unique identifier, the numeric index
     * is used.
     * Examples:
     * - visibility.rules[selector=="google.LibraryService.ListBooks"].restriction
     * - quota.metric_rules[selector=="google"].metric_costs[key=="reads"].value
     * - logging.producer_destinations[0]
     *
     * @generated from protobuf field: string element = 1;
     */
    element: string;
    /**
     * Value of the changed object in the old Service configuration,
     * in JSON format. This field will not be populated if ChangeType == ADDED.
     *
     * @generated from protobuf field: string old_value = 2;
     */
    oldValue: string;
    /**
     * Value of the changed object in the new Service configuration,
     * in JSON format. This field will not be populated if ChangeType == REMOVED.
     *
     * @generated from protobuf field: string new_value = 3;
     */
    newValue: string;
    /**
     * The type for this change, either ADDED, REMOVED, or MODIFIED.
     *
     * @generated from protobuf field: google.api.ChangeType change_type = 4;
     */
    changeType: ChangeType;
    /**
     * Collection of advice provided for this change, useful for determining the
     * possible impact of this change.
     *
     * @generated from protobuf field: repeated google.api.Advice advices = 5;
     */
    advices: Advice[];
}
/**
 * Generated advice about this change, used for providing more
 * information about how a change will affect the existing service.
 *
 * @generated from protobuf message google.api.Advice
 */
export interface Advice {
    /**
     * Useful description for why this advice was applied and what actions should
     * be taken to mitigate any implied risks.
     *
     * @generated from protobuf field: string description = 2;
     */
    description: string;
}
/**
 * Classifies set of possible modifications to an object in the service
 * configuration.
 *
 * @generated from protobuf enum google.api.ChangeType
 */
export enum ChangeType {
    /**
     * No value was provided.
     *
     * @generated from protobuf enum value: CHANGE_TYPE_UNSPECIFIED = 0;
     */
    CHANGE_TYPE_UNSPECIFIED = 0,
    /**
     * The changed object exists in the 'new' service configuration, but not
     * in the 'old' service configuration.
     *
     * @generated from protobuf enum value: ADDED = 1;
     */
    ADDED = 1,
    /**
     * The changed object exists in the 'old' service configuration, but not
     * in the 'new' service configuration.
     *
     * @generated from protobuf enum value: REMOVED = 2;
     */
    REMOVED = 2,
    /**
     * The changed object exists in both service configurations, but its value
     * is different.
     *
     * @generated from protobuf enum value: MODIFIED = 3;
     */
    MODIFIED = 3
}
// @generated message type with reflection information, may provide speed optimized methods
class ConfigChange$Type extends MessageType<ConfigChange> {
    constructor() {
        super("google.api.ConfigChange", [
            { no: 1, name: "element", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "old_value", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "new_value", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "change_type", kind: "enum", T: () => ["google.api.ChangeType", ChangeType] },
            { no: 5, name: "advices", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Advice }
        ]);
    }
    create(value?: PartialMessage<ConfigChange>): ConfigChange {
        const message = { element: "", oldValue: "", newValue: "", changeType: 0, advices: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ConfigChange>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ConfigChange): ConfigChange {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string element */ 1:
                    message.element = reader.string();
                    break;
                case /* string old_value */ 2:
                    message.oldValue = reader.string();
                    break;
                case /* string new_value */ 3:
                    message.newValue = reader.string();
                    break;
                case /* google.api.ChangeType change_type */ 4:
                    message.changeType = reader.int32();
                    break;
                case /* repeated google.api.Advice advices */ 5:
                    message.advices.push(Advice.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ConfigChange, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string element = 1; */
        if (message.element !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.element);
        /* string old_value = 2; */
        if (message.oldValue !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.oldValue);
        /* string new_value = 3; */
        if (message.newValue !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.newValue);
        /* google.api.ChangeType change_type = 4; */
        if (message.changeType !== 0)
            writer.tag(4, WireType.Varint).int32(message.changeType);
        /* repeated google.api.Advice advices = 5; */
        for (let i = 0; i < message.advices.length; i++)
            Advice.internalBinaryWrite(message.advices[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.ConfigChange
 */
export const ConfigChange = new ConfigChange$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Advice$Type extends MessageType<Advice> {
    constructor() {
        super("google.api.Advice", [
            { no: 2, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Advice>): Advice {
        const message = { description: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Advice>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Advice): Advice {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string description */ 2:
                    message.description = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Advice, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string description = 2; */
        if (message.description !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.description);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.Advice
 */
export const Advice = new Advice$Type();
