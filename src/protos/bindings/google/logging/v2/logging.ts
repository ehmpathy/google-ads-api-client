// @generated by protobuf-ts 2.8.1
// @generated from protobuf file "google/logging/v2/logging.proto" (package "google.logging.v2", syntax proto3)
// tslint:disable
//
// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import { Empty } from "../../protobuf/empty";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Duration } from "../../protobuf/duration";
import { MonitoredResourceDescriptor } from "../../api/monitored_resource";
import { Status } from "../../rpc/status";
import { LogEntry } from "./log_entry";
import { MonitoredResource } from "../../api/monitored_resource";
/**
 * The parameters to DeleteLog.
 *
 * @generated from protobuf message google.logging.v2.DeleteLogRequest
 */
export interface DeleteLogRequest {
    /**
     * Required. The resource name of the log to delete:
     *
     * * `projects/[PROJECT_ID]/logs/[LOG_ID]`
     * * `organizations/[ORGANIZATION_ID]/logs/[LOG_ID]`
     * * `billingAccounts/[BILLING_ACCOUNT_ID]/logs/[LOG_ID]`
     * * `folders/[FOLDER_ID]/logs/[LOG_ID]`
     *
     * `[LOG_ID]` must be URL-encoded. For example,
     * `"projects/my-project-id/logs/syslog"`,
     * `"organizations/123/logs/cloudaudit.googleapis.com%2Factivity"`.
     *
     * For more information about log names, see
     * [LogEntry][google.logging.v2.LogEntry].
     *
     * @generated from protobuf field: string log_name = 1;
     */
    logName: string;
}
/**
 * The parameters to WriteLogEntries.
 *
 * @generated from protobuf message google.logging.v2.WriteLogEntriesRequest
 */
export interface WriteLogEntriesRequest {
    /**
     * Optional. A default log resource name that is assigned to all log entries
     * in `entries` that do not specify a value for `log_name`:
     *
     * * `projects/[PROJECT_ID]/logs/[LOG_ID]`
     * * `organizations/[ORGANIZATION_ID]/logs/[LOG_ID]`
     * * `billingAccounts/[BILLING_ACCOUNT_ID]/logs/[LOG_ID]`
     * * `folders/[FOLDER_ID]/logs/[LOG_ID]`
     *
     * `[LOG_ID]` must be URL-encoded. For example:
     *
     *     "projects/my-project-id/logs/syslog"
     *     "organizations/123/logs/cloudaudit.googleapis.com%2Factivity"
     *
     * The permission `logging.logEntries.create` is needed on each project,
     * organization, billing account, or folder that is receiving new log
     * entries, whether the resource is specified in `logName` or in an
     * individual log entry.
     *
     * @generated from protobuf field: string log_name = 1;
     */
    logName: string;
    /**
     * Optional. A default monitored resource object that is assigned to all log
     * entries in `entries` that do not specify a value for `resource`. Example:
     *
     *     { "type": "gce_instance",
     *       "labels": {
     *         "zone": "us-central1-a", "instance_id": "00000000000000000000" }}
     *
     * See [LogEntry][google.logging.v2.LogEntry].
     *
     * @generated from protobuf field: google.api.MonitoredResource resource = 2;
     */
    resource?: MonitoredResource;
    /**
     * Optional. Default labels that are added to the `labels` field of all log
     * entries in `entries`. If a log entry already has a label with the same key
     * as a label in this parameter, then the log entry's label is not changed.
     * See [LogEntry][google.logging.v2.LogEntry].
     *
     * @generated from protobuf field: map<string, string> labels = 3;
     */
    labels: {
        [key: string]: string;
    };
    /**
     * Required. The log entries to send to Logging. The order of log
     * entries in this list does not matter. Values supplied in this method's
     * `log_name`, `resource`, and `labels` fields are copied into those log
     * entries in this list that do not include values for their corresponding
     * fields. For more information, see the
     * [LogEntry][google.logging.v2.LogEntry] type.
     *
     * If the `timestamp` or `insert_id` fields are missing in log entries, then
     * this method supplies the current time or a unique identifier, respectively.
     * The supplied values are chosen so that, among the log entries that did not
     * supply their own values, the entries earlier in the list will sort before
     * the entries later in the list. See the `entries.list` method.
     *
     * Log entries with timestamps that are more than the
     * [logs retention period](https://cloud.google.com/logging/quotas) in
     * the past or more than 24 hours in the future will not be available when
     * calling `entries.list`. However, those log entries can still be [exported
     * with
     * LogSinks](https://cloud.google.com/logging/docs/api/tasks/exporting-logs).
     *
     * To improve throughput and to avoid exceeding the
     * [quota limit](https://cloud.google.com/logging/quotas) for calls to
     * `entries.write`, you should try to include several log entries in this
     * list, rather than calling this method for each individual log entry.
     *
     * @generated from protobuf field: repeated google.logging.v2.LogEntry entries = 4;
     */
    entries: LogEntry[];
    /**
     * Optional. Whether valid entries should be written even if some other
     * entries fail due to INVALID_ARGUMENT or PERMISSION_DENIED errors. If any
     * entry is not written, then the response status is the error associated
     * with one of the failed entries and the response includes error details
     * keyed by the entries' zero-based index in the `entries.write` method.
     *
     * @generated from protobuf field: bool partial_success = 5;
     */
    partialSuccess: boolean;
    /**
     * Optional. If true, the request should expect normal response, but the
     * entries won't be persisted nor exported. Useful for checking whether the
     * logging API endpoints are working properly before sending valuable data.
     *
     * @generated from protobuf field: bool dry_run = 6;
     */
    dryRun: boolean;
}
/**
 * Result returned from WriteLogEntries.
 *
 * @generated from protobuf message google.logging.v2.WriteLogEntriesResponse
 */
export interface WriteLogEntriesResponse {
}
/**
 * Error details for WriteLogEntries with partial success.
 *
 * @generated from protobuf message google.logging.v2.WriteLogEntriesPartialErrors
 */
export interface WriteLogEntriesPartialErrors {
    /**
     * When `WriteLogEntriesRequest.partial_success` is true, records the error
     * status for entries that were not written due to a permanent error, keyed
     * by the entry's zero-based index in `WriteLogEntriesRequest.entries`.
     *
     * Failed requests for which no entries are written will not include
     * per-entry errors.
     *
     * @generated from protobuf field: map<int32, google.rpc.Status> log_entry_errors = 1;
     */
    logEntryErrors: {
        [key: number]: Status;
    };
}
/**
 * The parameters to `ListLogEntries`.
 *
 * @generated from protobuf message google.logging.v2.ListLogEntriesRequest
 */
export interface ListLogEntriesRequest {
    /**
     * Required. Names of one or more parent resources from which to
     * retrieve log entries:
     *
     * *  `projects/[PROJECT_ID]`
     * *  `organizations/[ORGANIZATION_ID]`
     * *  `billingAccounts/[BILLING_ACCOUNT_ID]`
     * *  `folders/[FOLDER_ID]`
     *
     * May alternatively be one or more views:
     *
     *  * `projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]/views/[VIEW_ID]`
     *  * `organizations/[ORGANIZATION_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]/views/[VIEW_ID]`
     *  * `billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]/views/[VIEW_ID]`
     *  * `folders/[FOLDER_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]/views/[VIEW_ID]`
     *
     * Projects listed in the `project_ids` field are added to this list.
     *
     * @generated from protobuf field: repeated string resource_names = 8;
     */
    resourceNames: string[];
    /**
     * Optional. A filter that chooses which log entries to return.  See [Advanced
     * Logs Queries](https://cloud.google.com/logging/docs/view/advanced-queries).
     * Only log entries that match the filter are returned.  An empty filter
     * matches all log entries in the resources listed in `resource_names`.
     * Referencing a parent resource that is not listed in `resource_names` will
     * cause the filter to return no results. The maximum length of the filter is
     * 20000 characters.
     *
     * @generated from protobuf field: string filter = 2;
     */
    filter: string;
    /**
     * Optional. How the results should be sorted.  Presently, the only permitted
     * values are `"timestamp asc"` (default) and `"timestamp desc"`. The first
     * option returns entries in order of increasing values of
     * `LogEntry.timestamp` (oldest first), and the second option returns entries
     * in order of decreasing timestamps (newest first).  Entries with equal
     * timestamps are returned in order of their `insert_id` values.
     *
     * @generated from protobuf field: string order_by = 3;
     */
    orderBy: string;
    /**
     * Optional. The maximum number of results to return from this request. Default is 50.
     * If the value is negative or exceeds 1000, the request is rejected. The
     * presence of `next_page_token` in the response indicates that more results
     * might be available.
     *
     * @generated from protobuf field: int32 page_size = 4;
     */
    pageSize: number;
    /**
     * Optional. If present, then retrieve the next batch of results from the
     * preceding call to this method.  `page_token` must be the value of
     * `next_page_token` from the previous response.  The values of other method
     * parameters should be identical to those in the previous call.
     *
     * @generated from protobuf field: string page_token = 5;
     */
    pageToken: string;
}
/**
 * Result returned from `ListLogEntries`.
 *
 * @generated from protobuf message google.logging.v2.ListLogEntriesResponse
 */
export interface ListLogEntriesResponse {
    /**
     * A list of log entries.  If `entries` is empty, `nextPageToken` may still be
     * returned, indicating that more entries may exist.  See `nextPageToken` for
     * more information.
     *
     * @generated from protobuf field: repeated google.logging.v2.LogEntry entries = 1;
     */
    entries: LogEntry[];
    /**
     * If there might be more results than those appearing in this response, then
     * `nextPageToken` is included.  To get the next set of results, call this
     * method again using the value of `nextPageToken` as `pageToken`.
     *
     * If a value for `next_page_token` appears and the `entries` field is empty,
     * it means that the search found no log entries so far but it did not have
     * time to search all the possible log entries.  Retry the method with this
     * value for `page_token` to continue the search.  Alternatively, consider
     * speeding up the search by changing your filter to specify a single log name
     * or resource type, or to narrow the time range of the search.
     *
     * @generated from protobuf field: string next_page_token = 2;
     */
    nextPageToken: string;
}
/**
 * The parameters to ListMonitoredResourceDescriptors
 *
 * @generated from protobuf message google.logging.v2.ListMonitoredResourceDescriptorsRequest
 */
export interface ListMonitoredResourceDescriptorsRequest {
    /**
     * Optional. The maximum number of results to return from this request.
     * Non-positive values are ignored.  The presence of `nextPageToken` in the
     * response indicates that more results might be available.
     *
     * @generated from protobuf field: int32 page_size = 1;
     */
    pageSize: number;
    /**
     * Optional. If present, then retrieve the next batch of results from the
     * preceding call to this method.  `pageToken` must be the value of
     * `nextPageToken` from the previous response.  The values of other method
     * parameters should be identical to those in the previous call.
     *
     * @generated from protobuf field: string page_token = 2;
     */
    pageToken: string;
}
/**
 * Result returned from ListMonitoredResourceDescriptors.
 *
 * @generated from protobuf message google.logging.v2.ListMonitoredResourceDescriptorsResponse
 */
export interface ListMonitoredResourceDescriptorsResponse {
    /**
     * A list of resource descriptors.
     *
     * @generated from protobuf field: repeated google.api.MonitoredResourceDescriptor resource_descriptors = 1;
     */
    resourceDescriptors: MonitoredResourceDescriptor[];
    /**
     * If there might be more results than those appearing in this response, then
     * `nextPageToken` is included.  To get the next set of results, call this
     * method again using the value of `nextPageToken` as `pageToken`.
     *
     * @generated from protobuf field: string next_page_token = 2;
     */
    nextPageToken: string;
}
/**
 * The parameters to ListLogs.
 *
 * @generated from protobuf message google.logging.v2.ListLogsRequest
 */
export interface ListLogsRequest {
    /**
     * Required. The resource name that owns the logs:
     *
     * *  `projects/[PROJECT_ID]`
     * *  `organizations/[ORGANIZATION_ID]`
     * *  `billingAccounts/[BILLING_ACCOUNT_ID]`
     * *  `folders/[FOLDER_ID]`
     *
     * @generated from protobuf field: string parent = 1;
     */
    parent: string;
    /**
     * Optional. The maximum number of results to return from this request.
     * Non-positive values are ignored.  The presence of `nextPageToken` in the
     * response indicates that more results might be available.
     *
     * @generated from protobuf field: int32 page_size = 2;
     */
    pageSize: number;
    /**
     * Optional. If present, then retrieve the next batch of results from the
     * preceding call to this method.  `pageToken` must be the value of
     * `nextPageToken` from the previous response.  The values of other method
     * parameters should be identical to those in the previous call.
     *
     * @generated from protobuf field: string page_token = 3;
     */
    pageToken: string;
    /**
     * Optional. The resource name that owns the logs:
     *
     *  * `projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]/views/[VIEW_ID]`
     *  * `organizations/[ORGANIZATION_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]/views/[VIEW_ID]`
     *  * `billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]/views/[VIEW_ID]`
     *  * `folders/[FOLDER_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]/views/[VIEW_ID]`
     *
     * To support legacy queries, it could also be:
     *
     * *  `projects/[PROJECT_ID]`
     * *  `organizations/[ORGANIZATION_ID]`
     * *  `billingAccounts/[BILLING_ACCOUNT_ID]`
     * *  `folders/[FOLDER_ID]`
     *
     * @generated from protobuf field: repeated string resource_names = 8;
     */
    resourceNames: string[];
}
/**
 * Result returned from ListLogs.
 *
 * @generated from protobuf message google.logging.v2.ListLogsResponse
 */
export interface ListLogsResponse {
    /**
     * A list of log names. For example,
     * `"projects/my-project/logs/syslog"` or
     * `"organizations/123/logs/cloudresourcemanager.googleapis.com%2Factivity"`.
     *
     * @generated from protobuf field: repeated string log_names = 3;
     */
    logNames: string[];
    /**
     * If there might be more results than those appearing in this response, then
     * `nextPageToken` is included.  To get the next set of results, call this
     * method again using the value of `nextPageToken` as `pageToken`.
     *
     * @generated from protobuf field: string next_page_token = 2;
     */
    nextPageToken: string;
}
/**
 * The parameters to `TailLogEntries`.
 *
 * @generated from protobuf message google.logging.v2.TailLogEntriesRequest
 */
export interface TailLogEntriesRequest {
    /**
     * Required. Name of a parent resource from which to retrieve log entries:
     *
     * *  `projects/[PROJECT_ID]`
     * *  `organizations/[ORGANIZATION_ID]`
     * *  `billingAccounts/[BILLING_ACCOUNT_ID]`
     * *  `folders/[FOLDER_ID]`
     *
     * May alternatively be one or more views:
     *
     *  * `projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]/views/[VIEW_ID]`
     *  * `organizations/[ORGANIZATION_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]/views/[VIEW_ID]`
     *  * `billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]/views/[VIEW_ID]`
     *  * `folders/[FOLDER_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]/views/[VIEW_ID]`
     *
     * @generated from protobuf field: repeated string resource_names = 1;
     */
    resourceNames: string[];
    /**
     * Optional. A filter that chooses which log entries to return.  See [Advanced
     * Logs Filters](https://cloud.google.com/logging/docs/view/advanced_filters).
     * Only log entries that match the filter are returned.  An empty filter
     * matches all log entries in the resources listed in `resource_names`.
     * Referencing a parent resource that is not in `resource_names` will cause
     * the filter to return no results. The maximum length of the filter is 20000
     * characters.
     *
     * @generated from protobuf field: string filter = 2;
     */
    filter: string;
    /**
     * Optional. The amount of time to buffer log entries at the server before
     * being returned to prevent out of order results due to late arriving log
     * entries. Valid values are between 0-60000 milliseconds. Defaults to 2000
     * milliseconds.
     *
     * @generated from protobuf field: google.protobuf.Duration buffer_window = 3;
     */
    bufferWindow?: Duration;
}
/**
 * Result returned from `TailLogEntries`.
 *
 * @generated from protobuf message google.logging.v2.TailLogEntriesResponse
 */
export interface TailLogEntriesResponse {
    /**
     * A list of log entries. Each response in the stream will order entries with
     * increasing values of `LogEntry.timestamp`. Ordering is not guaranteed
     * between separate responses.
     *
     * @generated from protobuf field: repeated google.logging.v2.LogEntry entries = 1;
     */
    entries: LogEntry[];
    /**
     * If entries that otherwise would have been included in the session were not
     * sent back to the client, counts of relevant entries omitted from the
     * session with the reason that they were not included. There will be at most
     * one of each reason per response. The counts represent the number of
     * suppressed entries since the last streamed response.
     *
     * @generated from protobuf field: repeated google.logging.v2.TailLogEntriesResponse.SuppressionInfo suppression_info = 2;
     */
    suppressionInfo: TailLogEntriesResponse_SuppressionInfo[];
}
/**
 * Information about entries that were omitted from the session.
 *
 * @generated from protobuf message google.logging.v2.TailLogEntriesResponse.SuppressionInfo
 */
export interface TailLogEntriesResponse_SuppressionInfo {
    /**
     * The reason that entries were omitted from the session.
     *
     * @generated from protobuf field: google.logging.v2.TailLogEntriesResponse.SuppressionInfo.Reason reason = 1;
     */
    reason: TailLogEntriesResponse_SuppressionInfo_Reason;
    /**
     * A lower bound on the count of entries omitted due to `reason`.
     *
     * @generated from protobuf field: int32 suppressed_count = 2;
     */
    suppressedCount: number;
}
/**
 * An indicator of why entries were omitted.
 *
 * @generated from protobuf enum google.logging.v2.TailLogEntriesResponse.SuppressionInfo.Reason
 */
export enum TailLogEntriesResponse_SuppressionInfo_Reason {
    /**
     * Unexpected default.
     *
     * @generated from protobuf enum value: REASON_UNSPECIFIED = 0;
     */
    REASON_UNSPECIFIED = 0,
    /**
     * Indicates suppression occurred due to relevant entries being
     * received in excess of rate limits. For quotas and limits, see
     * [Logging API quotas and
     * limits](https://cloud.google.com/logging/quotas#api-limits).
     *
     * @generated from protobuf enum value: RATE_LIMIT = 1;
     */
    RATE_LIMIT = 1,
    /**
     * Indicates suppression occurred due to the client not consuming
     * responses quickly enough.
     *
     * @generated from protobuf enum value: NOT_CONSUMED = 2;
     */
    NOT_CONSUMED = 2
}
// @generated message type with reflection information, may provide speed optimized methods
class DeleteLogRequest$Type extends MessageType<DeleteLogRequest> {
    constructor() {
        super("google.logging.v2.DeleteLogRequest", [
            { no: 1, name: "log_name", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "google.api.field_behavior": ["REQUIRED"], "google.api.resource_reference": { type: "logging.googleapis.com/Log" } } }
        ]);
    }
    create(value?: PartialMessage<DeleteLogRequest>): DeleteLogRequest {
        const message = { logName: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DeleteLogRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteLogRequest): DeleteLogRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string log_name */ 1:
                    message.logName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteLogRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string log_name = 1; */
        if (message.logName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.logName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.logging.v2.DeleteLogRequest
 */
export const DeleteLogRequest = new DeleteLogRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WriteLogEntriesRequest$Type extends MessageType<WriteLogEntriesRequest> {
    constructor() {
        super("google.logging.v2.WriteLogEntriesRequest", [
            { no: 1, name: "log_name", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "google.api.field_behavior": ["OPTIONAL"], "google.api.resource_reference": { type: "logging.googleapis.com/Log" } } },
            { no: 2, name: "resource", kind: "message", T: () => MonitoredResource, options: { "google.api.field_behavior": ["OPTIONAL"] } },
            { no: 3, name: "labels", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ }, options: { "google.api.field_behavior": ["OPTIONAL"] } },
            { no: 4, name: "entries", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => LogEntry, options: { "google.api.field_behavior": ["REQUIRED"] } },
            { no: 5, name: "partial_success", kind: "scalar", T: 8 /*ScalarType.BOOL*/, options: { "google.api.field_behavior": ["OPTIONAL"] } },
            { no: 6, name: "dry_run", kind: "scalar", T: 8 /*ScalarType.BOOL*/, options: { "google.api.field_behavior": ["OPTIONAL"] } }
        ]);
    }
    create(value?: PartialMessage<WriteLogEntriesRequest>): WriteLogEntriesRequest {
        const message = { logName: "", labels: {}, entries: [], partialSuccess: false, dryRun: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WriteLogEntriesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WriteLogEntriesRequest): WriteLogEntriesRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string log_name */ 1:
                    message.logName = reader.string();
                    break;
                case /* google.api.MonitoredResource resource */ 2:
                    message.resource = MonitoredResource.internalBinaryRead(reader, reader.uint32(), options, message.resource);
                    break;
                case /* map<string, string> labels */ 3:
                    this.binaryReadMap3(message.labels, reader, options);
                    break;
                case /* repeated google.logging.v2.LogEntry entries */ 4:
                    message.entries.push(LogEntry.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* bool partial_success */ 5:
                    message.partialSuccess = reader.bool();
                    break;
                case /* bool dry_run */ 6:
                    message.dryRun = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap3(map: WriteLogEntriesRequest["labels"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof WriteLogEntriesRequest["labels"] | undefined, val: WriteLogEntriesRequest["labels"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field google.logging.v2.WriteLogEntriesRequest.labels");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message: WriteLogEntriesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string log_name = 1; */
        if (message.logName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.logName);
        /* google.api.MonitoredResource resource = 2; */
        if (message.resource)
            MonitoredResource.internalBinaryWrite(message.resource, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* map<string, string> labels = 3; */
        for (let k of Object.keys(message.labels))
            writer.tag(3, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.labels[k]).join();
        /* repeated google.logging.v2.LogEntry entries = 4; */
        for (let i = 0; i < message.entries.length; i++)
            LogEntry.internalBinaryWrite(message.entries[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* bool partial_success = 5; */
        if (message.partialSuccess !== false)
            writer.tag(5, WireType.Varint).bool(message.partialSuccess);
        /* bool dry_run = 6; */
        if (message.dryRun !== false)
            writer.tag(6, WireType.Varint).bool(message.dryRun);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.logging.v2.WriteLogEntriesRequest
 */
export const WriteLogEntriesRequest = new WriteLogEntriesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WriteLogEntriesResponse$Type extends MessageType<WriteLogEntriesResponse> {
    constructor() {
        super("google.logging.v2.WriteLogEntriesResponse", []);
    }
    create(value?: PartialMessage<WriteLogEntriesResponse>): WriteLogEntriesResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WriteLogEntriesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WriteLogEntriesResponse): WriteLogEntriesResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: WriteLogEntriesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.logging.v2.WriteLogEntriesResponse
 */
export const WriteLogEntriesResponse = new WriteLogEntriesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WriteLogEntriesPartialErrors$Type extends MessageType<WriteLogEntriesPartialErrors> {
    constructor() {
        super("google.logging.v2.WriteLogEntriesPartialErrors", [
            { no: 1, name: "log_entry_errors", kind: "map", K: 5 /*ScalarType.INT32*/, V: { kind: "message", T: () => Status } }
        ]);
    }
    create(value?: PartialMessage<WriteLogEntriesPartialErrors>): WriteLogEntriesPartialErrors {
        const message = { logEntryErrors: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WriteLogEntriesPartialErrors>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WriteLogEntriesPartialErrors): WriteLogEntriesPartialErrors {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<int32, google.rpc.Status> log_entry_errors */ 1:
                    this.binaryReadMap1(message.logEntryErrors, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap1(map: WriteLogEntriesPartialErrors["logEntryErrors"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof WriteLogEntriesPartialErrors["logEntryErrors"] | undefined, val: WriteLogEntriesPartialErrors["logEntryErrors"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.int32();
                    break;
                case 2:
                    val = Status.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field google.logging.v2.WriteLogEntriesPartialErrors.log_entry_errors");
            }
        }
        map[key ?? 0] = val ?? Status.create();
    }
    internalBinaryWrite(message: WriteLogEntriesPartialErrors, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<int32, google.rpc.Status> log_entry_errors = 1; */
        for (let k of Object.keys(message.logEntryErrors)) {
            writer.tag(1, WireType.LengthDelimited).fork().tag(1, WireType.Varint).int32(parseInt(k));
            writer.tag(2, WireType.LengthDelimited).fork();
            Status.internalBinaryWrite(message.logEntryErrors[k as any], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.logging.v2.WriteLogEntriesPartialErrors
 */
export const WriteLogEntriesPartialErrors = new WriteLogEntriesPartialErrors$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListLogEntriesRequest$Type extends MessageType<ListLogEntriesRequest> {
    constructor() {
        super("google.logging.v2.ListLogEntriesRequest", [
            { no: 8, name: "resource_names", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/, options: { "google.api.field_behavior": ["REQUIRED"], "google.api.resource_reference": { childType: "logging.googleapis.com/Log" } } },
            { no: 2, name: "filter", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "google.api.field_behavior": ["OPTIONAL"] } },
            { no: 3, name: "order_by", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "google.api.field_behavior": ["OPTIONAL"] } },
            { no: 4, name: "page_size", kind: "scalar", T: 5 /*ScalarType.INT32*/, options: { "google.api.field_behavior": ["OPTIONAL"] } },
            { no: 5, name: "page_token", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "google.api.field_behavior": ["OPTIONAL"] } }
        ]);
    }
    create(value?: PartialMessage<ListLogEntriesRequest>): ListLogEntriesRequest {
        const message = { resourceNames: [], filter: "", orderBy: "", pageSize: 0, pageToken: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListLogEntriesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListLogEntriesRequest): ListLogEntriesRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string resource_names */ 8:
                    message.resourceNames.push(reader.string());
                    break;
                case /* string filter */ 2:
                    message.filter = reader.string();
                    break;
                case /* string order_by */ 3:
                    message.orderBy = reader.string();
                    break;
                case /* int32 page_size */ 4:
                    message.pageSize = reader.int32();
                    break;
                case /* string page_token */ 5:
                    message.pageToken = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListLogEntriesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string resource_names = 8; */
        for (let i = 0; i < message.resourceNames.length; i++)
            writer.tag(8, WireType.LengthDelimited).string(message.resourceNames[i]);
        /* string filter = 2; */
        if (message.filter !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.filter);
        /* string order_by = 3; */
        if (message.orderBy !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.orderBy);
        /* int32 page_size = 4; */
        if (message.pageSize !== 0)
            writer.tag(4, WireType.Varint).int32(message.pageSize);
        /* string page_token = 5; */
        if (message.pageToken !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.pageToken);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.logging.v2.ListLogEntriesRequest
 */
export const ListLogEntriesRequest = new ListLogEntriesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListLogEntriesResponse$Type extends MessageType<ListLogEntriesResponse> {
    constructor() {
        super("google.logging.v2.ListLogEntriesResponse", [
            { no: 1, name: "entries", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => LogEntry },
            { no: 2, name: "next_page_token", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ListLogEntriesResponse>): ListLogEntriesResponse {
        const message = { entries: [], nextPageToken: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListLogEntriesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListLogEntriesResponse): ListLogEntriesResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated google.logging.v2.LogEntry entries */ 1:
                    message.entries.push(LogEntry.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string next_page_token */ 2:
                    message.nextPageToken = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListLogEntriesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated google.logging.v2.LogEntry entries = 1; */
        for (let i = 0; i < message.entries.length; i++)
            LogEntry.internalBinaryWrite(message.entries[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string next_page_token = 2; */
        if (message.nextPageToken !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.nextPageToken);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.logging.v2.ListLogEntriesResponse
 */
export const ListLogEntriesResponse = new ListLogEntriesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListMonitoredResourceDescriptorsRequest$Type extends MessageType<ListMonitoredResourceDescriptorsRequest> {
    constructor() {
        super("google.logging.v2.ListMonitoredResourceDescriptorsRequest", [
            { no: 1, name: "page_size", kind: "scalar", T: 5 /*ScalarType.INT32*/, options: { "google.api.field_behavior": ["OPTIONAL"] } },
            { no: 2, name: "page_token", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "google.api.field_behavior": ["OPTIONAL"] } }
        ]);
    }
    create(value?: PartialMessage<ListMonitoredResourceDescriptorsRequest>): ListMonitoredResourceDescriptorsRequest {
        const message = { pageSize: 0, pageToken: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListMonitoredResourceDescriptorsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListMonitoredResourceDescriptorsRequest): ListMonitoredResourceDescriptorsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 page_size */ 1:
                    message.pageSize = reader.int32();
                    break;
                case /* string page_token */ 2:
                    message.pageToken = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListMonitoredResourceDescriptorsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 page_size = 1; */
        if (message.pageSize !== 0)
            writer.tag(1, WireType.Varint).int32(message.pageSize);
        /* string page_token = 2; */
        if (message.pageToken !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.pageToken);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.logging.v2.ListMonitoredResourceDescriptorsRequest
 */
export const ListMonitoredResourceDescriptorsRequest = new ListMonitoredResourceDescriptorsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListMonitoredResourceDescriptorsResponse$Type extends MessageType<ListMonitoredResourceDescriptorsResponse> {
    constructor() {
        super("google.logging.v2.ListMonitoredResourceDescriptorsResponse", [
            { no: 1, name: "resource_descriptors", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MonitoredResourceDescriptor },
            { no: 2, name: "next_page_token", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ListMonitoredResourceDescriptorsResponse>): ListMonitoredResourceDescriptorsResponse {
        const message = { resourceDescriptors: [], nextPageToken: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListMonitoredResourceDescriptorsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListMonitoredResourceDescriptorsResponse): ListMonitoredResourceDescriptorsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated google.api.MonitoredResourceDescriptor resource_descriptors */ 1:
                    message.resourceDescriptors.push(MonitoredResourceDescriptor.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string next_page_token */ 2:
                    message.nextPageToken = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListMonitoredResourceDescriptorsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated google.api.MonitoredResourceDescriptor resource_descriptors = 1; */
        for (let i = 0; i < message.resourceDescriptors.length; i++)
            MonitoredResourceDescriptor.internalBinaryWrite(message.resourceDescriptors[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string next_page_token = 2; */
        if (message.nextPageToken !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.nextPageToken);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.logging.v2.ListMonitoredResourceDescriptorsResponse
 */
export const ListMonitoredResourceDescriptorsResponse = new ListMonitoredResourceDescriptorsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListLogsRequest$Type extends MessageType<ListLogsRequest> {
    constructor() {
        super("google.logging.v2.ListLogsRequest", [
            { no: 1, name: "parent", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "google.api.field_behavior": ["REQUIRED"], "google.api.resource_reference": { childType: "logging.googleapis.com/Log" } } },
            { no: 2, name: "page_size", kind: "scalar", T: 5 /*ScalarType.INT32*/, options: { "google.api.field_behavior": ["OPTIONAL"] } },
            { no: 3, name: "page_token", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "google.api.field_behavior": ["OPTIONAL"] } },
            { no: 8, name: "resource_names", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/, options: { "google.api.field_behavior": ["OPTIONAL"], "google.api.resource_reference": { childType: "logging.googleapis.com/Log" } } }
        ]);
    }
    create(value?: PartialMessage<ListLogsRequest>): ListLogsRequest {
        const message = { parent: "", pageSize: 0, pageToken: "", resourceNames: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListLogsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListLogsRequest): ListLogsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string parent */ 1:
                    message.parent = reader.string();
                    break;
                case /* int32 page_size */ 2:
                    message.pageSize = reader.int32();
                    break;
                case /* string page_token */ 3:
                    message.pageToken = reader.string();
                    break;
                case /* repeated string resource_names */ 8:
                    message.resourceNames.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListLogsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string parent = 1; */
        if (message.parent !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.parent);
        /* int32 page_size = 2; */
        if (message.pageSize !== 0)
            writer.tag(2, WireType.Varint).int32(message.pageSize);
        /* string page_token = 3; */
        if (message.pageToken !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.pageToken);
        /* repeated string resource_names = 8; */
        for (let i = 0; i < message.resourceNames.length; i++)
            writer.tag(8, WireType.LengthDelimited).string(message.resourceNames[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.logging.v2.ListLogsRequest
 */
export const ListLogsRequest = new ListLogsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListLogsResponse$Type extends MessageType<ListLogsResponse> {
    constructor() {
        super("google.logging.v2.ListLogsResponse", [
            { no: 3, name: "log_names", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "next_page_token", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ListLogsResponse>): ListLogsResponse {
        const message = { logNames: [], nextPageToken: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListLogsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListLogsResponse): ListLogsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string log_names */ 3:
                    message.logNames.push(reader.string());
                    break;
                case /* string next_page_token */ 2:
                    message.nextPageToken = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListLogsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string log_names = 3; */
        for (let i = 0; i < message.logNames.length; i++)
            writer.tag(3, WireType.LengthDelimited).string(message.logNames[i]);
        /* string next_page_token = 2; */
        if (message.nextPageToken !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.nextPageToken);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.logging.v2.ListLogsResponse
 */
export const ListLogsResponse = new ListLogsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TailLogEntriesRequest$Type extends MessageType<TailLogEntriesRequest> {
    constructor() {
        super("google.logging.v2.TailLogEntriesRequest", [
            { no: 1, name: "resource_names", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/, options: { "google.api.field_behavior": ["REQUIRED"] } },
            { no: 2, name: "filter", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "google.api.field_behavior": ["OPTIONAL"] } },
            { no: 3, name: "buffer_window", kind: "message", T: () => Duration, options: { "google.api.field_behavior": ["OPTIONAL"] } }
        ]);
    }
    create(value?: PartialMessage<TailLogEntriesRequest>): TailLogEntriesRequest {
        const message = { resourceNames: [], filter: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TailLogEntriesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TailLogEntriesRequest): TailLogEntriesRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string resource_names */ 1:
                    message.resourceNames.push(reader.string());
                    break;
                case /* string filter */ 2:
                    message.filter = reader.string();
                    break;
                case /* google.protobuf.Duration buffer_window */ 3:
                    message.bufferWindow = Duration.internalBinaryRead(reader, reader.uint32(), options, message.bufferWindow);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TailLogEntriesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string resource_names = 1; */
        for (let i = 0; i < message.resourceNames.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.resourceNames[i]);
        /* string filter = 2; */
        if (message.filter !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.filter);
        /* google.protobuf.Duration buffer_window = 3; */
        if (message.bufferWindow)
            Duration.internalBinaryWrite(message.bufferWindow, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.logging.v2.TailLogEntriesRequest
 */
export const TailLogEntriesRequest = new TailLogEntriesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TailLogEntriesResponse$Type extends MessageType<TailLogEntriesResponse> {
    constructor() {
        super("google.logging.v2.TailLogEntriesResponse", [
            { no: 1, name: "entries", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => LogEntry },
            { no: 2, name: "suppression_info", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => TailLogEntriesResponse_SuppressionInfo }
        ]);
    }
    create(value?: PartialMessage<TailLogEntriesResponse>): TailLogEntriesResponse {
        const message = { entries: [], suppressionInfo: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TailLogEntriesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TailLogEntriesResponse): TailLogEntriesResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated google.logging.v2.LogEntry entries */ 1:
                    message.entries.push(LogEntry.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated google.logging.v2.TailLogEntriesResponse.SuppressionInfo suppression_info */ 2:
                    message.suppressionInfo.push(TailLogEntriesResponse_SuppressionInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TailLogEntriesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated google.logging.v2.LogEntry entries = 1; */
        for (let i = 0; i < message.entries.length; i++)
            LogEntry.internalBinaryWrite(message.entries[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated google.logging.v2.TailLogEntriesResponse.SuppressionInfo suppression_info = 2; */
        for (let i = 0; i < message.suppressionInfo.length; i++)
            TailLogEntriesResponse_SuppressionInfo.internalBinaryWrite(message.suppressionInfo[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.logging.v2.TailLogEntriesResponse
 */
export const TailLogEntriesResponse = new TailLogEntriesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TailLogEntriesResponse_SuppressionInfo$Type extends MessageType<TailLogEntriesResponse_SuppressionInfo> {
    constructor() {
        super("google.logging.v2.TailLogEntriesResponse.SuppressionInfo", [
            { no: 1, name: "reason", kind: "enum", T: () => ["google.logging.v2.TailLogEntriesResponse.SuppressionInfo.Reason", TailLogEntriesResponse_SuppressionInfo_Reason] },
            { no: 2, name: "suppressed_count", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<TailLogEntriesResponse_SuppressionInfo>): TailLogEntriesResponse_SuppressionInfo {
        const message = { reason: 0, suppressedCount: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TailLogEntriesResponse_SuppressionInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TailLogEntriesResponse_SuppressionInfo): TailLogEntriesResponse_SuppressionInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.logging.v2.TailLogEntriesResponse.SuppressionInfo.Reason reason */ 1:
                    message.reason = reader.int32();
                    break;
                case /* int32 suppressed_count */ 2:
                    message.suppressedCount = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TailLogEntriesResponse_SuppressionInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.logging.v2.TailLogEntriesResponse.SuppressionInfo.Reason reason = 1; */
        if (message.reason !== 0)
            writer.tag(1, WireType.Varint).int32(message.reason);
        /* int32 suppressed_count = 2; */
        if (message.suppressedCount !== 0)
            writer.tag(2, WireType.Varint).int32(message.suppressedCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.logging.v2.TailLogEntriesResponse.SuppressionInfo
 */
export const TailLogEntriesResponse_SuppressionInfo = new TailLogEntriesResponse_SuppressionInfo$Type();
/**
 * @generated ServiceType for protobuf service google.logging.v2.LoggingServiceV2
 */
export const LoggingServiceV2 = new ServiceType("google.logging.v2.LoggingServiceV2", [
    { name: "DeleteLog", options: { "google.api.http": { delete: "/v2/{log_name=projects/*/logs/*}", additionalBindings: [{ delete: "/v2/{log_name=*/*/logs/*}" }, { delete: "/v2/{log_name=organizations/*/logs/*}" }, { delete: "/v2/{log_name=folders/*/logs/*}" }, { delete: "/v2/{log_name=billingAccounts/*/logs/*}" }] }, "google.api.method_signature": ["log_name"] }, I: DeleteLogRequest, O: Empty },
    { name: "WriteLogEntries", options: { "google.api.http": { post: "/v2/entries:write", body: "*" }, "google.api.method_signature": ["log_name,resource,labels,entries"] }, I: WriteLogEntriesRequest, O: WriteLogEntriesResponse },
    { name: "ListLogEntries", options: { "google.api.http": { post: "/v2/entries:list", body: "*" }, "google.api.method_signature": ["resource_names,filter,order_by"] }, I: ListLogEntriesRequest, O: ListLogEntriesResponse },
    { name: "ListMonitoredResourceDescriptors", options: { "google.api.http": { get: "/v2/monitoredResourceDescriptors" } }, I: ListMonitoredResourceDescriptorsRequest, O: ListMonitoredResourceDescriptorsResponse },
    { name: "ListLogs", options: { "google.api.http": { get: "/v2/{parent=*/*}/logs", additionalBindings: [{ get: "/v2/{parent=projects/*}/logs" }, { get: "/v2/{parent=organizations/*}/logs" }, { get: "/v2/{parent=folders/*}/logs" }, { get: "/v2/{parent=billingAccounts/*}/logs" }] }, "google.api.method_signature": ["parent"] }, I: ListLogsRequest, O: ListLogsResponse },
    { name: "TailLogEntries", serverStreaming: true, clientStreaming: true, options: { "google.api.http": { post: "/v2/entries:tail", body: "*" } }, I: TailLogEntriesRequest, O: TailLogEntriesResponse }
], { "google.api.default_host": "logging.googleapis.com", "google.api.oauth_scopes": "https://www.googleapis.com/auth/cloud-platform,https://www.googleapis.com/auth/cloud-platform.read-only,https://www.googleapis.com/auth/logging.admin,https://www.googleapis.com/auth/logging.read,https://www.googleapis.com/auth/logging.write" });
