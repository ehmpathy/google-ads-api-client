// @generated by protobuf-ts 2.8.1
// @generated from protobuf file "google/logging/v2/logging_metrics.proto" (package "google.logging.v2", syntax proto3)
// tslint:disable
//
// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { MetricsServiceV2 } from "./logging_metrics";
import type { Empty } from "../../protobuf/empty";
import type { DeleteLogMetricRequest } from "./logging_metrics";
import type { UpdateLogMetricRequest } from "./logging_metrics";
import type { CreateLogMetricRequest } from "./logging_metrics";
import type { LogMetric } from "./logging_metrics";
import type { GetLogMetricRequest } from "./logging_metrics";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { ListLogMetricsResponse } from "./logging_metrics";
import type { ListLogMetricsRequest } from "./logging_metrics";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * Service for configuring logs-based metrics.
 *
 * @generated from protobuf service google.logging.v2.MetricsServiceV2
 */
export interface IMetricsServiceV2Client {
    /**
     * Lists logs-based metrics.
     *
     * @generated from protobuf rpc: ListLogMetrics(google.logging.v2.ListLogMetricsRequest) returns (google.logging.v2.ListLogMetricsResponse);
     */
    listLogMetrics(input: ListLogMetricsRequest, options?: RpcOptions): UnaryCall<ListLogMetricsRequest, ListLogMetricsResponse>;
    /**
     * Gets a logs-based metric.
     *
     * @generated from protobuf rpc: GetLogMetric(google.logging.v2.GetLogMetricRequest) returns (google.logging.v2.LogMetric);
     */
    getLogMetric(input: GetLogMetricRequest, options?: RpcOptions): UnaryCall<GetLogMetricRequest, LogMetric>;
    /**
     * Creates a logs-based metric.
     *
     * @generated from protobuf rpc: CreateLogMetric(google.logging.v2.CreateLogMetricRequest) returns (google.logging.v2.LogMetric);
     */
    createLogMetric(input: CreateLogMetricRequest, options?: RpcOptions): UnaryCall<CreateLogMetricRequest, LogMetric>;
    /**
     * Creates or updates a logs-based metric.
     *
     * @generated from protobuf rpc: UpdateLogMetric(google.logging.v2.UpdateLogMetricRequest) returns (google.logging.v2.LogMetric);
     */
    updateLogMetric(input: UpdateLogMetricRequest, options?: RpcOptions): UnaryCall<UpdateLogMetricRequest, LogMetric>;
    /**
     * Deletes a logs-based metric.
     *
     * @generated from protobuf rpc: DeleteLogMetric(google.logging.v2.DeleteLogMetricRequest) returns (google.protobuf.Empty);
     */
    deleteLogMetric(input: DeleteLogMetricRequest, options?: RpcOptions): UnaryCall<DeleteLogMetricRequest, Empty>;
}
/**
 * Service for configuring logs-based metrics.
 *
 * @generated from protobuf service google.logging.v2.MetricsServiceV2
 */
export class MetricsServiceV2Client implements IMetricsServiceV2Client, ServiceInfo {
    typeName = MetricsServiceV2.typeName;
    methods = MetricsServiceV2.methods;
    options = MetricsServiceV2.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Lists logs-based metrics.
     *
     * @generated from protobuf rpc: ListLogMetrics(google.logging.v2.ListLogMetricsRequest) returns (google.logging.v2.ListLogMetricsResponse);
     */
    listLogMetrics(input: ListLogMetricsRequest, options?: RpcOptions): UnaryCall<ListLogMetricsRequest, ListLogMetricsResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListLogMetricsRequest, ListLogMetricsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Gets a logs-based metric.
     *
     * @generated from protobuf rpc: GetLogMetric(google.logging.v2.GetLogMetricRequest) returns (google.logging.v2.LogMetric);
     */
    getLogMetric(input: GetLogMetricRequest, options?: RpcOptions): UnaryCall<GetLogMetricRequest, LogMetric> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetLogMetricRequest, LogMetric>("unary", this._transport, method, opt, input);
    }
    /**
     * Creates a logs-based metric.
     *
     * @generated from protobuf rpc: CreateLogMetric(google.logging.v2.CreateLogMetricRequest) returns (google.logging.v2.LogMetric);
     */
    createLogMetric(input: CreateLogMetricRequest, options?: RpcOptions): UnaryCall<CreateLogMetricRequest, LogMetric> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateLogMetricRequest, LogMetric>("unary", this._transport, method, opt, input);
    }
    /**
     * Creates or updates a logs-based metric.
     *
     * @generated from protobuf rpc: UpdateLogMetric(google.logging.v2.UpdateLogMetricRequest) returns (google.logging.v2.LogMetric);
     */
    updateLogMetric(input: UpdateLogMetricRequest, options?: RpcOptions): UnaryCall<UpdateLogMetricRequest, LogMetric> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateLogMetricRequest, LogMetric>("unary", this._transport, method, opt, input);
    }
    /**
     * Deletes a logs-based metric.
     *
     * @generated from protobuf rpc: DeleteLogMetric(google.logging.v2.DeleteLogMetricRequest) returns (google.protobuf.Empty);
     */
    deleteLogMetric(input: DeleteLogMetricRequest, options?: RpcOptions): UnaryCall<DeleteLogMetricRequest, Empty> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteLogMetricRequest, Empty>("unary", this._transport, method, opt, input);
    }
}
